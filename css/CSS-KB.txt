@@@@@@@@@@@@@@@@@@@

	CSS Syntax

@@@@@@@@@@@@@@@@@@@


================================================================================

	Debug


border: 2px solid red;

================================================================================

	asterisk (*) selector
	----------------------

	wildcard selector - it will select all elements within that portion of the 
	DOM.
	e.g. 
	this will apply margin to every element on the entire page 

	* {
		margin: 10px;
	}

	or within sub-selections
	this will add a margin to all elements within a paragraph tag:

	p * {
		margin: 10px;
	}



	adjacent (+) plus sign sibling selector
	---------------------------------------


what does the "+" (plus sign) CSS selector mean?

	- adjacent sibling selector

	e.g.  here, applies only to paragraphs directly following another paragraph

		p + p  {
			/* some declarations */
		}


	 tilde (~)  Subsequent-sibling Combinator
	 ----------------------------------------

	 separates two compound selectors

	 the elements represented by the two sequences share the same parent 
	 in the doc tree.


	 the first selector precedes (but not necessarily immediately)
	 the element that is represented by the 2nd selector.

	 In other words

	 	it selects all sibiling elements of a specified element.


	 	.a ~ .b {
  		background-color: powderblue;
		}


		<ul>
		  <li class="b">1st</li>
		  <li class="a">2nd</li>
		  <li>3rd</li>
		  <li class="b">4th</li>
		  <li class="b">5th</li>
		</ul>

		.a ~ .b matches  the 4th and 5th list item because they

		are .b elements
		are siblings of .a
		appear after .a in HTML source order


================================================================================


Applied to a tag. E.g.:

	div { color: red; }
	
Class:

	.callout { ... }

Subclass

	.classA {...}	
	.classA .subclassAA {...}

	<div class="classA">
		<table><tr><td class="subclassAA" ..
	
	
Combined tag/class:

	span.highlight { ... }
	
Id

	#close { ... }


Style Rule
----------

consists of two parts:
	- selector
	- style declaration
	
================================================================================

	CSS Selector
	************

CSS element selector
--------------------


	CSS selector without (.) target all HTML elements by this tag, e.g.

	  p {
	    color: green;
	  }


CSS class selector
------------------

	matches elements based on the contents of their 'class' attribute.
	although a selected element may have mutliple classes, one of them must 
	match exactly the class name given in the selector.

	E.g.

		CSS

			div.classy { .. }  

		HTML

			<div class="classy">
  
	CSS selector with (.)   specifies a class, e.g. 

	  .green {
	    color: green;
	  }  

	  <p class="green">i'm going green</p>
	  <p>i'm just plain paragraph</p>
	  <p class="green">i'm going green too!</p>



 CSS id selector
 ---------------

	CSS selector with (#)   specifies an ID, e.g. 

	  #myElement {
	    ...
	  }

	You can have ONLY one element with a particular ID.
	But you can have many elements in a particular class.
	So, if you want to target once specific element, you can give that element an ID,
	and target it with a hash ('#') in your CSS statement.



More specific CSS Selectors
---------------------------

find all TAGs that have particular class
e.g. 

  .warning {
    background-color: red;
    color: white;
  }

  // this finds all <p> paragraphs with the class of "warning"
  p.warning {
    border: 5px solid orange;
  }

find all X tags inside an element that has a particular class
e.g.

  .warning {
    background-color: red;
    color: white;
  }
  // this finds all <p> tags inside an element that has a class of "warning"
  .warning p {

  } 



applies style to <a.active> elements inside <nav> elements

    nav a.active {
      color: #03d465;
    }




	
- Tag-type selectors


	To upply a rule only to <h1> tags that are contained within a <div> tag:
	
		div h1 { color: red; }
		
	These are also referred to as element-based selectors, because they decide whether or not a DOM element is styled based on its element type.

	
- class-based selectors

	E.g, if we define a style class called 'callout', which is to appear in a colored box, we could write:
	
		.callout { border: solid blue 1px; background-golor: cyan }
		
	To assign a style class to an element, we simply declare a class attribute in the html tag:
	
		<div>I'll appear as a normal bit of text</div>
		<div class="callout">And I'll appear as a callout!</div>
		
	Elements can be assigned more than one class. 
	
		<div class='callout loud'>And I'll appear as a mixture of both</div>

		
- element-based selectors

	we can combine classes with element-based rules, to define a class that operates only on a particular tag types:
	
		span.highlight { background-color: yellow }
		
	this will be applied to <span> tags with a declared class attribute of "highlight".  Other <span> tags, or other types of tag with class='highlight', will be unaffected.
	
	We can also use these in conjunction with the parent-child selectors to create very specific rules:
	
		div.prose span.highlight { backgroun-color: yellow }
		
	This will be applied only to <span> tags of class 'highlight' that are nested within <div> tags of class 'prose'.
	

	
- id-based selector

	No more than one element should have a given ID assigned to it, so these selectors are typically used to select a single element on a page.
	
		#close { color: red }
	
	This is applied to a button with id="close".

	
- pseudo-selectors

	A web browser defines a limited number of pseudo-selectors.

		*:first-letter {
			font-size: 500%;
			color: red;
			float: left;
		}
		
	will draw the first letter of any element in a large bold red font.  We can tighten up this rule:
	
		p.illuminated:first-letter {
			...
		}
	
	The red border effect will now apply only to <p> elements with a declared class of 'illuminated'.  Other pseudo-selector include:
	
		first-line
		hover
	


================================================================================

CSS style properties
====================

	Elements can be hidden from view by setting 'visibility:hidden' or 'display:none'
	
	
	
Using CSS for layout
--------------------

	To position elements, the outermost element, representing the window is assigned an absolute position:
	
		div.window {
			position: absolute;
			overflow: auto;
			margin: 8px;
			padding: 0px;
			width: 420px;
			height: 280px;
		}
		
	Within the content area,  the icons are styled using the 'float' property so as to flow within the confines of their parent element, wrapping around to a new line:
	
		div.item {
			position: relative;
			height: 64px;
			width: 56px;
			float: left;
			padding: 0px;
			margin: 8px;
		}
			
	The itemName element, which is nested inside the 'item' element, has the text positioned below the icon by setting the upper margin as large as the icon graphic:
	
		div.item div.itemName {
			margin-top: 48px;
			font: 10px verdana, arial, helvetica;
			text-align: center;
		}
			
Using CSS for styling
---------------------

	The graphics used by the items in the folder are assigned by class name:
	
	div.folder {
		background: 
			transparent url(images/folder.png)
			top left no-repeat;
	}
	
	div.file {
		background:
			transparent url(images/file.png)
			top left no-repeat;
	}
	
	div.special {
		background:
			transparent url(images/filder_important.png)
			top left no-repeat;
	}
	
	
	
	
=================================================================


	CSS Positioning
	***************
	
The CSS positioning properties allow you to position an element. It can also place an element behind another, and specify what should happen when an element's content is too big.

Elements can be positioned using the top, bottom, left, and right properties. However, these properties will NOT work unless the position property is set first. 


Four different positioning methods:

1. Static
---------

	(default) A static positioned element is always positioned according to the normal flow of the page.  
	
	Static positioned elements are not affected by the top, bottom, left, and right properties.

2. Fixed
--------

	An element with fixed position is positioned relative to the browser window.  It will not move even if the window is scrolled.
	
	p.pos_fixed
	{
		position:fixed;
		top:30px;
		right:5px;
	}
	
	Fixed positioned elements are removed from the normal flow. The document and other elements behave like the fixed positioned element does not exist.
	
	Fixed positioned elements can overlap other elements.

3. Relative
-----------

	A relative positioned element is positioned relative to its normal position.
	
	The content of a relatively positioned elements can be moved and overlap other elements, but the reserved space for the element is still preserved in the normal flow.
	
	Relatively positioned element are often used as container blocks for absolutely positioned elements.

4. Absolute
-----------

	An absolute position element is positioned relative to the first parent element that has a position other than static. If no such element is found, the containing block is <html>
	
	Absolutely positioned elements are removed from the normal flow. The document and other elements behave like the absolutely positioned element does not exist.
	
	Absolutely positioned elements can overlap other elements.
	
	
Overlapping Elements
====================

	When elements are positioned outside the normal flow, they can overlap other elements.
	
	The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).
	
	An element can have a positive or negative stack order.
	
	An element with greater stack order is always in front of an element with a lower stack order.
	
	img
	{
		position:absolute;
		left:0px;
		top:0px;
		z-index:-1
	}
	
	
=================================================================

	background
	**********
	
background 'repeat' property sets if/how a background image will be repeated.

By default, a background-image is repeated both vertically and horizontally.

Property values:

	repeat  	
		The background image will be repeated both vertically and horizontally. This is default
	
	repeat-x 	
		The background image will be repeated only horizontally
	
	repeat-y 	
		The background image will be repeated only vertically
	
	no-repeat 	
		The background-image will not be repeated
	
	inherit 	
		Specifies that the setting of the background-repeat property should be inherited from the parent element

	
=================================================================	
		
	animation
	*********

achieved using two mechanisms:

1. CSS transitions

	https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions

2. 	CSS Animations

	https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations


transition 

	CSS start state
	CSS end state
	transition effect

	the effect is defined using the style property 'transition'
	Here, the background color is changed from black to blue on hover with a transition effect defined by the 'transition' property.

		.my-class {
			-webkit-transition:0.5s linear all;
			transition:0.5s linear all;
			background:black;
		}	
		.my-class:hover {
			background:blue;
		}

	you're not limited to pseudo selector like hover..

		.my-class.animate {
			background:blue;
		}

	when you add 'animate' class to an HTML element which already has 'my-class', the background will change with the transition effect defined.

animation

	CSS start state	
	keyframe configuration that defines the time duration of the animation 

		.my-class {
			background:black;
		}
		.my-class:hover {
			background :blue;
			animation:color 1s linear;
			-webkit-animation: color 1s linear;
		}
		@keyframes color {
			from {
				background: black;
			}
			to {
				background: blue;
			}
		}

The basic difference between transition and animation is that we do not need two CSS states defined in the case of animation.		

In the first example, transition happens when the CSS on the element changes from .my-class to .my-class:hover

whereas in the 2nd example, animation starts when the CSS state is .my-class:hover, so there is no end CSS concept with animation.

================================================================================

	Media Queries
	*************

Media Query is a CSS technique that was introduced in CSS3, which 


allows application of the stylesheet properties on the web component based on the size of the viewport. 

In other words, it first detects the size of the screen of the device (smart phones, tablets, laptop, etc.) and based on that, it applies the stylesheet properties (component display features on web browser) to the web components present on the webpage.

in CSS3, media queries look for the capability of the device rather than it's type.

	Can be used to check many things:
		- width and height of the viewport
		- width and height of the device
		- orientation (portrait or landscape)
		- resolution


	@media not|only mediatype and (expressions) {
	  CSS-Code;
	}


Syntax
----------------------------


@media only screen and (max-width: 400px) {
	body {
		background-color: green;
	}
}


CSS3 media queries consist of
 
- optional, media type
- zero or more expressions that limit the style sheet's scope by using
  media features like width, height and color

The result of the query is true if the media type specified in the media query
matches the type of device the document is being displayed on.

<style>
	@media (max-width: 600px) {
		.facet-sidebar {
			display: none;
		}
	}
</style>


Breakpoints with Media Queries
------------------------------

Breakpoint is a method where we define the 
	max or min width of the viewport of screen 
	that triggers the change of CSS properties.


In Bootstrap, any viewport less than 768px (xtra small devices),
no media queries are quired - this is the default in Bootstrap.


/* Small devices (tablets or large size smart phone of size 768px and up) */ 
@media (min-width: @screen-sm-min) { ... } 

/* Medium devices (desktops, laptops of size 992px and up) */ 
@media (min-width: @screen-md-min) { ... } 

/* Large devices (large desktops, screens of size 1200px and up) */ 
@media (min-width: @screen-lg-min) { ... }


Bootstrap V4 with Sass
------------------------

/* Breakpoint for extra-small viewport */ 
@include media-breakpoint-up(xs) { ... }
/* Breakpoint for small viewport */ 
@include media-breakpoint-up(sm) { ... }
/* Breakpoint for medium viewport */ 
@include media-breakpoint-up(md) { ... }
/* Breakpoint for large viewport */ 
@include media-breakpoint-up(lg) { ... }
/* Breakpoint for extra-large viewport */ 
@include media-breakpoint-up(xl) { ... }

// Usage in example for medium viewport:
@include media-breakpoint-up(md) {
  .utility-class {
    background-color: green; 
  }
}



================================================================================

	reveal element on hover
	************************

https://codepen.io/chrisupjohn/pen/HBgiI	

css
---------

body {
  padding: 0 10px;
}

#some-element {
  border: 1px solid #ccc;
  display: none;
  font-size: 10px;
  margin-top: 10px;
  padding: 5px;
  text-transform: uppercase;
}

#some-div:hover #some-element {
  display: block;
}

html
-----------

<div id="some-div">
  <p>
    some text some text some text some text some text some text.
  </p>
  
  <span id="some-element">
    some element to reveal on hover over some text
  </span>
</div>



================================================================================

	changing :hover to touch/click for mobile devices
	*************************************************

Use ":active" selector in combination with :hover

	.info-slide:hover, .info-slide:active {
		height: 300px;
	}

another example:

	.button:hover span,
	.button:active span {
	    opacity: 0;
	    .
	    .
	}


================================================================================

	CSS tooltip
	***********

https://www.w3schools.com/css/css_tooltip.asp	

often used to specify extra information about something when the user moves
the mouse pointer over an element.

Example
-------

	<style>
	/* Tooltip container */
	.tooltip {
	    position: relative;
	    display: inline-block;
	    border-bottom: 1px dotted black; /* If you want dots under the hoverable text */
	}

	/* Tooltip text */
	.tooltip .tooltiptext {
	    visibility: hidden;
	    width: 120px;
	    background-color: black;
	    color: #fff;
	    text-align: center;
	    padding: 5px 0 0 0;
	    border-radius: 6px;
	 
	    /* Position the tooltip text - see examples below! */
	    position: absolute;
	    z-index: 1;
	    top: 20%;
      	left: 50%;
      	margin-left: -100px;
	}

	/* Show the tooltip text when you mouse over the tooltip container */
	.tooltip:hover .tooltiptext {
	    visibility: visible;
	}
	</style>

	<div class="tooltip">Hover over me
	  <span class="tooltiptext">Tooltip text</span>
	</div>

in html
-------

	use a container element like <div> and add the "tooltip" class.
	when the mouse hover over this div, it will show the tooltip text.

in class

	the tooltip class uses 'position: relative' which is needed to position
	the tooltip text (position: absolute).

	the 'tooltiptext' class holds the actual tooltip text.
	It is hidden by default, will be visible on hover.
	A few basic styles have been added to it:
		120px width
		black backgroun color
		white text color
		centered text
		5px top and bottom padding

		border-radius to add rounded corners to the tooltip text

	:hover selector is used to show the tooltip text when the user moves
	the mouse over the <div> with 'class="tooltip"'.


positioning
-----------
	
	use 'left' and 'right' to place the tooltip relative to the "hoverable" 
	text (<div>)

	right tooltip
	-------------

		.tooltip tooltiptext {
			top: -5px;
			left: 105%;
		}

	left tooltip
	------------	

		.tooltip .tooltiptext {
			top: -5px;
			right: 105%;
		}

	'top: -5px' is used to place the tooltip in the middle of its container
	element.  "5" is used because the tooltip text has top and bottom padding
	of "5px".


	top tooltip
	------------

		.tooltip .tooltiptext {
		    width: 120px;
		    bottom: 100%;
		    left: 50%; 
		    margin-left: -60px; /* Use half of the width (120/2 = 60), to center the tooltip */
		}

	bottom tooltip
	--------------

		.tooltip .tooltiptext {
		    width: 120px;
		    top: 100%;
		    left: 50%; 
		    margin-left: -60px; /* Use half of the width (120/2 = 60), to center the tooltip */
		}	



tooltip arrows
--------------

	// TODO



fade-in and fade-out
--------------------

	use CSS3 transition property together with the 'opacity' property
	and go from being completely invisible to 100% visible in a number
	of specified seconds:


    .build-info-container .build-info-text {
      visibility: hidden;
      width: 200px;
      font-size: 10px;
      background-color: #f2f2f2;
      color: #373737;
      text-align: left;
      border: 1px solid #121212;
      border-radius: 6px;
      padding: 2px 5px 2px 5px;
      
      /* fade-out */
      opacity: 0.0;

      -webkit-transition: all .55s ease-out;
      -moz-transition: all .55s ease-out;
      -o-transition: all .55s ease-out;
      transition: all .55s ease-out;
      
      /* position */
      position: absolute;
      z-index: 1;
      
      top: 20%;
      left: 50%;
      margin-left: -100px;
    }

    .build-info-container:hover .build-info-text,
    .build-info-container:active .build-info-text {
      visibility: visible;
      /* fade-in */
      opacity: 1.0;
      -webkit-transition: all .55s ease-in;      
    }



================================================================================

	CSS Units
	**********


CSS has several different units for expressing a length.

Many CSS properties take "length" values, such as width, margin, padding, font-size, etc.

Length is a number followed by a length unit, such as 10px, 2em, etc.


Absolute lengths
-----------------

cm
mm
px - pixels
pt - poits
pc - picas



Relative lengths
----------------


em	Relative to the font-size of the element (2em means 2 times the size of the current font)	
ex	Relative to the x-height of the current font (rarely used)	
ch	Relative to the width of the "0" (zero)	
rem	Relative to font-size of the root element	
vw	Relative to 1% of the width of the viewport*	
vh	Relative to 1% of the height of the viewport*	
vmin	Relative to 1% of viewport's* smaller dimension	
vmax	Relative to 1% of viewport's* larger dimension	
%		Relative to the parent element

================================================================================

	em units in CSS
	***************

em

	the em unit is the height of the font in nominal points or inches. 
	The actual, physical height of any given portion of the font depends on 
	the user-defined DPI setting, current element font-size, and the particular font being used.

The rem unit in CSS always inherits its value from the base font size setting on the root element of the document, 
irrespective of the computed font size. 

	https://developer.mozilla.org/en-US/docs/Web/CSS/font-size

	rem values are relative to the root html element, not the parent element. In other words, it lets you specify a font size in a relative fashion without being affected by the size of the parent, thereby eliminating compounding.


use `rem` for Global sizing - use `em` for Local sizing
--------------------------------------------------------

https://css-tricks.com/rem-global-em-local/




In HTML, the root element is always the html element. 
So you could use rems, but this would mean you’ll have to control 
all components on the page using the font size on that element. 
It could work on certain projects, but I think this technique works best 
when focusing the resizability on an isolated component, rather than the whole document.


If you want your `rem` value to be set to 16px, you set your html `font-size` to 16px
as your base font-size and then use `rem` for the rest

html { font-size: 16px; }

** Be careful with this. If you set the font-size property on the html tag (such as html {font-size:10px;), it will disable the browser override for font size.


================================================================================

	CSS Grid
	********

two dimensional grid with rows and columns.

Browser Support
----------------

	IE 11+
	Edge 15+
	Firefox 57+
	Chrome 61+

Can you build your layout without the CSS grid?




================================================================================

	id your body 
	************

Give an ID to your body element for greater control and specificity

https://css-tricks.com/id-your-body-for-greater-css-control-and-specificity/

Let’s say you want to change the color of your links on just your contact page to red. They are blue on every other page, but it just makes sense for them to be red on your contact page (for some reason).


	</head>

	<body id="contact-page">


Now for our example of making all links on the contact page red instead of blue, just use some CSS like this:

	a { 
	color: blue; 
	}

	#contact-page a {
	   color: red;
	}

Using body id with navigation
------------------------------


Add a class to the body of each page representing the nav tab:

	<body class="home">

Or if you're on the contact page:

	<body class="contact">


#sub-header ul li:hover,
body.home li.home,
body.contact li.contact { background-color: #000;}

#sub-header ul li:hover a,
body.home li.home a,
body.contact li.contact a { color: #fff; }


apply class names to your list items:

<ul>
  <li class="home"><a href="index.php">Home</a></li>
  <li class="contact"><a href="contact.php">Contact Us</a></li>
  <li class="about"><a href="about.php">About Us</a></li>
</ul>

whenever you're on the body.home page, your li.home a link will have default styling indicating it is the current page.




================================================================================