
@@@@@@@@@@@@@@@@@@

    Bootstrap

@@@@@@@@@@@@@@@@@@


4 principles of Graphic Design

C - Contrast
A - Alignment
R - Repetition
P - Proximity




================================================================================

Resources:

Bootstrap with NPM and Webpack

https://medium.com/@sreejithezhakkad/how-to-start-a-web-app-project-using-bootstrap-with-npm-webpack-185e510a782e





================================================================================
  Responsive Patterns
  *******************

http://www.lukew.com/ff/entry.asp?1514

https://bradfrost.github.io/this-is-responsive/patterns.html

Multi-device web design

Mostly fluid
  stacks columns vertically in its narrowest incarnations
  a multi-column layout that introduces larger margins on big screens
  relies on fluid grids and images to scale from large screens down to small.

  "mostly fluid" because the core structure of the layout really doesn't change
  until the smallest screen width.

Column Drop
  as the screen size gets smaller, columns start dropping one by one to the 
  bottom of the page.
  Unlike Mostly Fluid which changes only on the smallest screen size, 
  the Column Drop pattern  can drop columns at any visual break point.

Layout Shifter
  significant changes to the layout happen across the device sizes.
  a column shown in a large browser may become a row in a medium sized divice.
  entire sections of the disign move around as the designer sees fit.

Tiny Tweaks
  single column web pages or even entire web sites
  makes small changes to a single column page across all device sizes.
  this pattern was the least popular because few companies have the luxury
  of brutally simple Web pages..

Content Reflow
  content moves around depending on the device size
  For instance, 3 columns of different content in large size..
  columns stacking with captions to the side of the image in medium size..
  captions under images in small size..

  e.g. http://codepen.io/ramonlapenta/full/nhlqg


================================================================================

  meta name viewport
  ******************
http://getbootstrap.com/css/  
http://blog.javierusobiaga.com/stop-using-the-viewport-tag-until-you-know-ho


<meta name="viewport"> will tell smart phones that your website is created with
responsive design in mind.

Most of the time, that's all you need..

  <meta name="viewport" content="width=device-width, initial-scale=1">

device-width

  e.g.:
    content="width=device-width" = website adapts to your width.

    if we use this parameter on a non-responsive site, the website will zoom
    to the top-left corner, forcing the users to zoom out (to understand where
    they are) and zoom in to see the details.

initial-scale

  this parameter sets the initial zoom level (since the browser tends to scale
  the website).
  i.e.  1 CSS pixel == 1 viewport pixel (which is not always the same as 1 physical
  pixel)

  a responsive site should work without this parameter, but it might help
  fixing some issues with certain browsers when changing the orientation mode,
  or preventing a default zooming.



Any additional parameters in the "content" attribute usually just screw up 
user's experience.


But here's the rest of it:

  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

maximum-scale

  this means setting maximum zoom.
  on a website where the access to the information is the top priority
  (most if not all) setting "maximum-scale=1" won't allow the user to zoom.
  This might seem unimportant if you have a responsive website, but there are 
  lots of cases when the user might need/want to zoom: small body font, checking
  some details in a photograph...

user-scalable=no

  you can disable zooming capabilities on mobile devices by adding this.
  the users are now only able to scroll.

  your site will feel like a native application.
  not recommended for every site - use with caution.  


================================================================================
  Bootstrap Grid Classes
  **********************

Container

  Everything needs to happen within a container

    .container
    .container-fluid (will always pick up full width of the browser)

  These could be assigned to <body>, <div> or some other grouping element.

Row

  inside container we need another <div> or other grouping element with class of
  .row
  and we can have several rows per container.

  row is where we have our 12-column grid

.col-sm-4
.col-sm-8

  elements that help spread visual DOM elements across the 12 columns.



Visual break points Bootstrap 4
--------------------------------

    same principle: MOBILE FIRST

  There are four visual break points:

    extra-small devices (phones)    xs        575.98px 
    small                           sm        >=576px
    medium                          md        >=768px
    large                           lg        >=992px
    extra-large                     xl        >=1200px

  These break points will be activated when the viewport reaches the width 
  indicated in pixels.



=============================================================================

  CSS reset
  *********

CSS reset should be in the foundation of your stylesheets.
If you donâ€™t define all the default CSS parameters in your style sheet, the browser will use its default parameters instead.

Russ Weakley pointed out three major concerns with resetting your CSS:

1. Every element that is "zeroed" must then be redefined. This can cause an increase in CSS file size.

2. CSS reset stylesheets can present issues if you remove the default behavior for an element and then forget to restyle it.

3. Some reset stylesheets can be harmful to users who rely on keyboards for navigation.

In Bootstrap 4, this is `Normalize.css` and is called Boostrap Reboot.


  Boodstrap Reboot
  ----------------

Reboot, a collection of element-specific CSS changes in a single file, kickstart Bootstrap to provide an elegant, consistent, and simple baseline to build upon.




=============================================================================

  Spacing
  *******

  Margins and Padding
  *******************

Use the `margin` and `padding` spacing utilities to control how 
elements and components are spaced and sized.

  Margin sizes

Bootstrap 4 includes a 5-level scale for spacing utlities based on a 
1 rem value default $spacer  variable.

  $spacer = the default is the same as the font size

but you can set it in the SASS map.

0 = 0
1 = .25  or 25% of $spacer size
2 = .5   or 50% 
3 = 1    or 100%
4 = 1.5
5 = 3    or 300%

property  (m?-?) in Bootstrap class names

  m - for classes that set margin

  p - for classes that set padding


sides  (?t-?) in Bootstrap class names

  t - for classes that set margin-top or padding-top
  b - for classes that set margin-bottom or padding-bottom
  l - for classes that set margin-left or padding-left
  r - for classes that set margin-right or padding-right
  x - for classes that set both *-left and *-right
  y - for classes that set both *-top and *-bottom

  blank 
    - for classes that set a margin or padding on all 4 sides of the element

Examples:

.mt-0 {
  margin-top: 0 !important;
}

.ml-1 {
  margin-left: ($spacer * .25) !important;
}


.px-2 {
  padding-left: ($spacer * .5) !important;
  padding-right: ($spacer * .5) !important;
}

.p-3 {
  padding: $spacer !important;
}

---------------------------------------------------------------

  Flexbox
  *******

https://getbootstrap.com/docs/4.0/utilities/flex/#enable-flex-behaviors
  

Most of our components are built with flexbox enabled.

Apply display utilities to create a flexbox container and transform direct children elements into flex items.


Responsive variations also exist for .d-flex and .d-inline-flex.

.d-flex
.d-inline-flex
.d-sm-flex
.d-sm-inline-flex
.d-md-flex
.d-md-inline-flex
.d-lg-flex
.d-lg-inline-flex
.d-xl-flex
.d-xl-inline-flex

Direction
---------

Use .flex-row to set a horizontal direction (the browser default), or .flex-row-reverse to start the horizontal direction from the opposite side.

Use .flex-column to set a vertical direction, or .flex-column-reverse to start the vertical direction from the opposite side.

Justify
--------

Use justify-content utilities on flexbox containers to change the alignment of flex items on the main axis (the x-axis to start, y-axis if flex-direction: column). Choose from start (browser default), end, center, between, or around.

Align
--------

Use align-items utilities on flexbox containers to change the alignment of flex items on the cross axis (the y-axis to start, x-axis if flex-direction: column). Choose from start, end, center, baseline, or stretch (browser default).


<style>
  div{
    border: 1px solid green;
  }
  section{
    background: #f1f1f1;
    height: 200px;
  }
</style>

<aside class="container">

  <section class="d-flex flex-row-reverse">
    <div class="p-4">One</div>
    <div class="p-4">Two</div>
    <div class="p-4">Three</div>
  </section>
</aside>

flex-row
flex-row-reverse



=============================================================================

Bootstrap  Containers
**********************

bootstrap provides fixed- and fluid-width containers.

The CSS classes, .containers and .container-fluid, are used to set up the base layout.

.container
===========

<head>
<link rel="stylesheet" href="../asset/css/bootstrap.min.css">
<title>Responsive product Store</title>
</head>
<body>
<div class="container"></div>
</body>

.container-fluid
================  

<head>
<link rel="stylesheet" href="../asset/css/bootstrap.min.css">
<title>Responsive product Store</title>
</head>
<body>
<div class="container-fluid"></div>
</body>


container vs container-fluid
*****************************
http://stackoverflow.com/questions/22262311/container-fluid-vs-container

Quick version: .container has one fixed width for each screen size in bootstrap (xs,sm,md,lg); .container-fluid expands to fill the available width.


The difference between container and container-fluid comes from these lines of CSS:

@media (min-width: 568px) {
.container {
width: 550px;
}
}
@media (min-width: 992px) {
.container {
width: 970px;
}
}
@media (min-width: 1200px) {
.container {
width: 1170px;
}
}

Depending on the width of the viewport that the webpage is being viewed on, the container class gives its div a specific fixed width. These lines don't exist in any form for container-fluid, so its width changes every time the viewport width changes.

So for example, say your browser window is 1000px wide. As it's greater than the min-width of 992px, your .container element will have a width of 970px. You then slowly widen your browser window. The width of your .container won't change until you get to 1200px, at which it will jump to 1170px wide and stay that way for any larger browser widths.

Your .container-fluid element, on the other hand, will constantly resize as you make even the smallest changes to your browser width.

===========================================================================================

navbar toggle
*************

with the following attributes, you the navbar toggle when your screen is resized smaller

data-toggle
this attribute has the value for the property of the effect, collapse in this case
data-toggle="collapse"

data-target
has the value for the target DOM element that will expand and collapse on click event:
data-target="#navbar"
===========================================================================================

jumbotron
*********

jumbotron - a large collout 

===========================================================================================

Bootstrap's JavaScript requires jQuery
**************************************

Make sure you are loading your libraries in proper order:

<script src="js/jquery-1.11.0.min.js"></script>
<script src="js/bootstrap.min.js"></script>
<script src="js/wow.min.js"></script>

==========================================================================================

navbar-fixed-top overlapping page content
*****************************************

http://stackoverflow.com/questions/11124777/twitter-bootstrap-navbar-fixed-top-overlapping-site

The answer is in the docs: http://getbootstrap.com/components/#navbar-fixed-top

Fixed to top
------------
Add .navbar-fixed-top and include a .container or .container-fluid to center and pad navbar content.

<nav class="navbar navbar-default navbar-fixed-top">
<div class="container">
...
</div>
</nav>

==> Body padding required <==

The fixed navbar will overlay your other content, unless you add padding to the top of the <body>. Try out your own values or use our snippet below. 

Tip: By default, the navbar is 50px high.

body { padding-top: 70px; }

Make sure to include this after the core Bootstrap CSS.

navbar-static-top
-----------------

For bootstrap 3, navbar-static-top instead of fixed prevents this issue, unless you need the navbar to always be visible.

==========================================================================================

  Push and Pull Classes
  *********************

pull and pash classes are for reordering content.
they are always relative to the left side of the browser.

Main use:

The main use of these classes is for reordering columns so that they stack
properly (i.e. in the right order) on smaller devices.


        Same principle: MOBILE FIRST

1. take bootstrap "mobile first" approach and create your content mobile first.
2. it is easier to pull/push columns on larger devices that it is on smaller.


Suppose you want your application

1. on mobile, stack in the following order
2. starting with "sm" (ipad and up), you want <section> in the middle, and 
first <aside> on the LEFT.

so, to make that happen, you would:

a) list your elements in the order you want them to appear stacked on the "xs" (mobile)
b) no "xs" classes means - the elements will take the whole width
c) provide column classes for "sm" and up
d) reorder columns starting with "sm" and up using push/pull classes:

<section class="col-sm-8    col-sm-push-2">
<aside   class="col-sm-2    col-sm-pull-8">
<aside   class="col-sm-2>


==========================================================================================
