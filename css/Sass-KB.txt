
	@@@@@@@@@@@@@
	
		SASS

	@@@@@@@@@@@@@


Resources:

	How to structure your Sass project
	http://thesassway.com/beginner/how-to-structure-a-sass-project

	Sass Playground
	online playground for Sass.js
	sass.js.org

	


================================================================================


stylesheets are getting larger, more complex and harder to maintain.
This is where a preprocessor can help...

Sass lets you use features that don't exist in CSS yet like variables, nesting, mixins, inheritance, etc..

Sass has two syntaxes:

	1. SCSS

		the new main syntax known as SCSS (for "Sassy CSS"), and is a superset (or extension) of CSS3's syntax.
		This means that every valid CCS3 stylesheet is a valid SCSS file with the same meaning.

	2. Sass 

		older syntax known as the indented syntax.		


http://sass-lang.com/guide

	Variables
	*********

	Nesting
	*******

	Partials
	*********

if you have a SCSS or Sass file that you want to import, but don't want to compile to a CSS file, you can add an underscore to the beginning of the filename.
This will tell Sass not to compile it to a normal CSS file.   You can then import these files without using the underscore.

For example, you might have _colors.scss. Then no _colors.css file would be created, and you can do

@import "colors";
and _colors.scss would be imported.



	Import
	*******

	Mixins
	******

	Extend/Inheritance
	******************

	Operators
	*********

================================================================================

	Using
	******





================================================================================

	libSass
	*******			

Sass was originally written in Ruby. libSass is a C/C++ port of the Sass engine. The point is to be simple, faster, and easy to integrate.

================================================================================

	node-sass Compilation 
	*********************

DOC: https://github.com/sass/node-sass#command-line-interface

https://www.jamesedwards.name/npm-compile-sass

node-sass

clean-css 
	npm package to minify and optimize the generated output after compiling SCSS into CSS.

1. you need an scss file

2. `npm init`

3. 

	$ npm install node-sass clean-css-cli --save-dev

4. compile Sass

	"compile-styles": "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 styles.scss dist/styles.css


--source-map true --source-map-contents true

 			source maps should be generated (for debugging purposes), 

--precision 6

 			the amount of decimal precision is capped at 6, and 


 the scss source file to process is styles.scss, 
 which will be processed and output to a file named styles.css 
 in a new folder named dist, located in the root of the project. 
 
5. Minify CSS with clean-css

    "scripts": {
        "compile-styles": "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 styles.scss dist/styles.css",
        "css-minify": "cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output dist/styles.min.css dist/styles.css"
      },

  run clean-css with a certain level of optimization, line break formatting, and to include source maps with the optimized output. The file to optimize is the styles.css file located in the dist folder that was generated by the compile-styles command, and the optimized output will be written to styles.min.css in the same folder.

 dist 

styles.css
styles.css.map
styles.min.css
styles.min.css.map


6. run npm scripts sequentially


     {
        "name": "npmcompilesass",
        "scripts": {
          "compile-styles": "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 styles.scss dist/styles.css",
          "css-minify": "cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output dist/styles.min.css dist/styles.css",
          "process-styles": "npm run compile-styles && npm run css-minify"
        },
        "devDependecies": {
          "clean-css-cli": "^4.3.0",
          "node-sass": "^4.12.0"
        }
      }   


   $ npm run process-styles

================================================================================

	import not found into sass/scss file  WebStorm error
	*************************************

http://stackoverflow.com/questions/13213631/how-to-add-compass-syntax-support-to-jetbrains-phpstorm	

_settings.scss

@import 'foundation/functions';

The problem here is because this file is in 'app' folder

	app/scss/

and foundation SCSS functions are  in:

	app/bower_components/foundation/scss/foundation
		- _functions.scss

so the solution is to cd into your app/scss directory using cmd with Admin privileges 

> cd <your-web-app>\app\scss

and create the link:

>mklink /d foundation ..\..\app\bower_components\foundation\scss\foundation

	symbolic link created for foundation <<===>> ..\..\app\bower_components\foundation\scss\foundation


================================================================================	

	Error: `libsass` bindings not found
	***********************************


C:\ws\0git\cjr8020\iskill-angular>grunt serve
Loading "sass.js" tasks...ERROR
>> Error: `libsass` bindings not found. Try reinstalling `node-sass`?
Warning: Task "sass" not found. Use --force to continue.

Aborted due to warnings.

https://github.com/yeoman/generator-webapp/issues/538

A:
	
	You probably updated the Node version since you last installed your deps, so libsass was built with the old version. Try rm -r node_modules and npm install.
R:
	Here is the steps:
		1. Used the code rm -r node_modules and npm install and run "grunt serve". It still has error: Local Npm module "grunt-sass" not found. Is it installed 
		2. So I tried npm install grunt-sass and it works.


> npm install grunt-sass 

	worked for me as well..


================================================================================

	set up simple node-sass project
	********************************

Node Sass example
In the following example, we create a simple web project that uses the node-sass module.

$ mkdir sass
$ mkdir public/css

In the project directory, we create three subdirectories. 
In the sass directory, we will have SCSS code. 
The SCSS code is translated into CSS and moved into the public/css directory.

$ nodejs -v

$ npm init

We initiate a new Node application.

$ npm install node-sass --save-dev

To compile:

    "sass": "node-sass -w scss -o public/css --recursive",
    
$ npm run sass
    
To test with `live-server`:
    
    "live-server": "npx live-server --open=public"

$ npm run live-server


package.json
------------

{
  "name": "sass-runner",
  "version": "1.0.0",
  "main": "index.js",
  "devDependencies": {
    "live-server": "^1.2.1"
  },
  "keywords": [
    "node",
    "sass"
  ],
  "author": "me",
  "license": "ISC",
  "description": "node-sass runner",
  "scripts": {
    "sass": "node-sass -w scss -o public/css --recursive",
    "live-server": "npx live-server --open=public"
  },
  "dependencies": {
    "node-sass": "^4.14.1"
  }
}




================================================================================