
	@@@@@@@@@@@@@
	
		SASS

	@@@@@@@@@@@@@


Resources:

	How to structure your Sass project
	http://thesassway.com/beginner/how-to-structure-a-sass-project

	Sass Playground
	online playground for Sass.js
	sass.js.org

	


================================================================================


stylesheets are getting larger, more complex and harder to maintain.
This is where a preprocessor can help...

Sass lets you use features that don't exist in CSS yet like variables, nesting, mixins, inheritance, etc..

Sass has two syntaxes:

	1. SCSS

		the new main syntax known as SCSS (for "Sassy CSS"), and is a superset (or extension) of CSS3's syntax.
		This means that every valid CCS3 stylesheet is a valid SCSS file with the same meaning.

	2. Sass 

		older syntax known as the indented syntax.		


http://sass-lang.com/guide

	Variables
	*********

	Nesting
	*******

	Partials
	*********

if you have a SCSS or Sass file that you want to import, but don't want to compile to a CSS file, you can add an underscore to the beginning of the filename.
This will tell Sass not to compile it to a normal CSS file.   You can then import these files without using the underscore.

For example, you might have _colors.scss. Then no _colors.css file would be created, and you can do

@import "colors";
and _colors.scss would be imported.



	Import
	*******


	At-Rules
	********

https://sass-lang.com/documentation/at-rules

@use 
	loads mixins, functions, and variables from other Sass stylesheets, and combines CSS from multiple stylesheets together.

@forward 
	loads a Sass stylesheet and makes its mixins, functions, and variables available when your stylesheet is loaded with the @use rule.

@import 
	extends the CSS at-rule to load styles, mixins, functions, and variables from other stylesheets.

@mixin and @include 
	makes it easy to re-use chunks of styles.

@function 
	defines custom functions that can be used in SassScript expressions.

@extend 
	allows selectors to inherit styles from one another.

@at-root 
	puts styles within it at the root of the CSS document.

@error 
	causes compilation to fail with an error message.

@warn 
	prints a warning without stopping compilation entirely.

@debug 
	prints a message for debugging purposes.

@if
@for
@each

	Flow control rules like @if, @each, @for, and @while control whether or how many times styles are emitted.




	Mixins
	******

Mixins are reusable chunks of code that are included, similar to calling a function, instead of copy/pasted.

Mixins have some nice features:

* Arguments just like functions.
* Arguments can have default values and optional values.
* Named arguments allow us to use optional and default arguments when the mixin is included.
* Variable arguments allow us to have a dynamic number of arguments when the mixin is included.
* The @content directive allow us to add additional styles when the mixin is included.

default argument value
-----------------------

	@mixin my-mixin($base-color: #abc123, $mix-color: #efg456) { ... }

if we want to use default values, we don't pass any arguments:

	.wolverine { @include my-mixin; }

and if you want to provide your own values:

	.rogue { @include my-mixin(#aaa222, #bbb333); }


	

example
-------

<div class="wolverine">
	<img src="images/wolverine-small.gif">
	<p class="wolverine-text">Wolverine</p>
</div>

.wolverine {
	text-align: center;
	background-image: linear-gradient($light-color, $base-color, $dark-color);

	&:hover { backgroun-image: linear-gradient($clc, $cbc, $cdc); }
	$:hover &-text { color: transparentize(mix($base-color, #fffaa6, 25%), .2); }

	&-text {
		...
	}

	img {
		...
	}
}

TO USE a mixin, create one 

	@mixin make-character {
		
	}

	.character {
		. . ,
	}

then import and use:

	.wolverine { @include make-character; }
	.rogue { @include make-character; }

and then add new characters to HTML:

	<div class="rogue character">
		<img src="images/rogue-small.gif">
		<p class="rogue-text">Rogue</p>
	</div>



	Extend/Inheritance
	******************




	Operators
	*********



	Functions
	*********

	http://sass-lang.com/documentation/Sass/Script/Functions.html


	$light-color: lighten($base-color, 20%);
	$dark-color: darken($base-color, 20%);

mix colors

	color: mix($base-color, yellow, 25%);  // default is 50%

	transparentize( . . . ); // decreases the opacity



================================================================================

	Using
	******





================================================================================

	Nesting
	*******

Basic nesting 

.parent {
  .child {}
}

compiles to

.parent .child {}

You can nest as deep as you like, but it's a good practice to keep it only 1-2 levels deep.

	==> TOO MUCH specificity is brittle


& = parent selector
-------------------

this comes in handy when you're nesting and you want to create a more specific
selector, like an element that has *both* of two classes like so:

	.some-class.another-class { }


	.some-class {
		&.another-class {}
	}

Or, think of it as shorthand

.parent {
	& .child {}
}

compiles to

	.parent .child {}


Using & with pseudo classes:
-----------------------------

.button {
  &:visited { }
  &:hover { }
  &:active { }
}

compiles to

.button:visited { }
.button:hover { }
.button:active { }






================================================================================

	libSass
	*******			

Sass was originally written in Ruby. libSass is a C/C++ port of the Sass engine. The point is to be simple, faster, and easy to integrate.

================================================================================

	node-sass Compilation 
	*********************

DOC: https://github.com/sass/node-sass#command-line-interface

https://www.jamesedwards.name/npm-compile-sass

node-sass

clean-css 
	npm package to minify and optimize the generated output after compiling SCSS into CSS.

1. you need an scss file

2. `npm init`

3. 

	$ npm install node-sass clean-css-cli --save-dev

4. compile Sass

	"compile-styles": "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 styles.scss dist/styles.css


--source-map true --source-map-contents true

 			source maps should be generated (for debugging purposes), 

--precision 6

 			the amount of decimal precision is capped at 6, and 


 the scss source file to process is styles.scss, 
 which will be processed and output to a file named styles.css 
 in a new folder named dist, located in the root of the project. 
 
5. Minify CSS with clean-css

    "scripts": {
        "compile-styles": "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 styles.scss dist/styles.css",
        "css-minify": "cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output dist/styles.min.css dist/styles.css"
      },

  run clean-css with a certain level of optimization, line break formatting, and to include source maps with the optimized output. The file to optimize is the styles.css file located in the dist folder that was generated by the compile-styles command, and the optimized output will be written to styles.min.css in the same folder.

 dist 

styles.css
styles.css.map
styles.min.css
styles.min.css.map


6. run npm scripts sequentially


     {
        "name": "npmcompilesass",
        "scripts": {
          "compile-styles": "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 styles.scss dist/styles.css",
          "css-minify": "cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output dist/styles.min.css dist/styles.css",
          "process-styles": "npm run compile-styles && npm run css-minify"
        },
        "devDependecies": {
          "clean-css-cli": "^4.3.0",
          "node-sass": "^4.12.0"
        }
      }   


   $ npm run process-styles

================================================================================


	Sass maps
	*********

holds a colletion of key-value pairs

$map: (
	"key1":value1,
	"key2":value2
);

@each loop can generate multiple classes from a Sass map


	$colors: (
		"green": #3ABB8D,
		"blue": #313C5A
	);

	@each $name, $value in $colors {
		.#{$name} {
			color: $value;
		}
	}




================================================================================

	import not found into sass/scss file  WebStorm error
	*************************************

http://stackoverflow.com/questions/13213631/how-to-add-compass-syntax-support-to-jetbrains-phpstorm	

_settings.scss

@import 'foundation/functions';

The problem here is because this file is in 'app' folder

	app/scss/

and foundation SCSS functions are  in:

	app/bower_components/foundation/scss/foundation
		- _functions.scss

so the solution is to cd into your app/scss directory using cmd with Admin privileges 

> cd <your-web-app>\app\scss

and create the link:

>mklink /d foundation ..\..\app\bower_components\foundation\scss\foundation

	symbolic link created for foundation <<===>> ..\..\app\bower_components\foundation\scss\foundation


================================================================================	

	Error: `libsass` bindings not found
	***********************************


C:\ws\0git\cjr8020\iskill-angular>grunt serve
Loading "sass.js" tasks...ERROR
>> Error: `libsass` bindings not found. Try reinstalling `node-sass`?
Warning: Task "sass" not found. Use --force to continue.

Aborted due to warnings.

https://github.com/yeoman/generator-webapp/issues/538

A:
	
	You probably updated the Node version since you last installed your deps, so libsass was built with the old version. Try rm -r node_modules and npm install.
R:
	Here is the steps:
		1. Used the code rm -r node_modules and npm install and run "grunt serve". It still has error: Local Npm module "grunt-sass" not found. Is it installed 
		2. So I tried npm install grunt-sass and it works.


> npm install grunt-sass 

	worked for me as well..


================================================================================

	set up simple node-sass project
	********************************

Node Sass example
In the following example, we create a simple web project that uses the node-sass module.

$ mkdir sass
$ mkdir public/css

In the project directory, we create three subdirectories. 
In the sass directory, we will have SCSS code. 
The SCSS code is translated into CSS and moved into the public/css directory.

$ nodejs -v

$ npm init

We initiate a new Node application.

$ npm install node-sass --save-dev

To compile:

    "sass": "node-sass -w scss -o public/css --recursive",
    
$ npm run sass
    
To test with `live-server`:
    
    "live-server": "npx live-server --open=public"

$ npm run live-server


package.json
------------

{
  "name": "sass-runner",
  "version": "1.0.0",
  "main": "index.js",
  "devDependencies": {
    "live-server": "^1.2.1"
  },
  "keywords": [
    "node",
    "sass"
  ],
  "author": "me",
  "license": "ISC",
  "description": "node-sass runner",
  "scripts": {
    "sass": "node-sass -w scss -o public/css --recursive",
    "live-server": "npx live-server --open=public"
  },
  "dependencies": {
    "node-sass": "^4.14.1"
  }
}




================================================================================


	Creating a Living Style Guide with Sass and Vanilla JavaScript
	--------------------------------------------------------------

	https://app.pluralsight.com/library/courses/creating-living-style-guide-sass-vanilla-javascript/table-of-contents


Building blocks of Design

Creating a lightweight style guide

Using globals 

Biulding Components 

Adding stateful styles


What is a style guide?
-----------------------

Book that documents design in code.
Goto document for globals and components.



Custom vs. style guide generators


	No JS libs or server-side deps 	| 	usually require SS or f/e deps
	Highly customizable             |   Highly opinionated by design
	Document code as you see fit	  |   document code to fit the style guide



Style Guide Fundamentals
-------------------------

	Analyze design
	Identify patterns and collections of objects
	Globals like colors and spacing
	HTML elements should be easily identifiable as shared styles
	Components
	States




Style Guide for Adopt-a-Tree
-----------------------------



	Style Guilde: Patterns


globals 									HTML Elements 									Components

 Logos 										Typography (headings)						Banner
 colors                                                   Progress Bars
 Icons   								  Buttons													Styled List

 Grids 																										Carousels
 Media Queries																						Cards
 Spacing																									Content Block
 Alignment								Forms    												Avatars
 																													Tabs


Organize colors by
------------------

Brand
	hyphenated names 
	prefixed by brand prefix

Warm colors
Cool colors
Gray colors
Social Media
State (error, disabled, warning .. )

	brand-1-blue
	brand-1-primary

	gray-cement
	red-cherry

	color-link
	color-font



Globals Styles
---------------

Colors
Spacing
Media queries and grids
Alighnment
Icons
Typography helpers


Practices and Conventions
--------------------------

use 2 spaces for indentation

link parent and children with common word

	<ul class="list-block"
		<li class="list-each"

use single hyphen with the exception of modifier classes

	class="list-block list-block--profile "


Spacing
----------------------

white space or negative space allows the page to breathe
and sets visual boundaries for elements and components


Grid Anatomy
--------------

Grid starts with a container which provides horizontal padding and 
maximum width.

Row uses a flex box and negative margins for allignment and offsetting column gutters.
Column use horizontal padding as gutters


<div class="container">
	<div class="row flex flex-wrap">
		<div class="col col-12 col-6-sm col-3-lg">

		</div>
		<div class="col col-12 col-6-sm col-3-lg">

		</div>
	</div>
</div>


Container mixin has two parameters to set the container width and the size of the gutters:

@mixin container ($max-width: $media-lg, $grid-gutter: $grid-gutter) {
  @if $max-width {
    max-width: $max-width;
  }
  margin-left: auto;
  margin-right: auto;
  padding-left: $spacing-2;
  padding-right: $spacing-2;
}


Icons
-----------------------------

Logo

Arrows

Tree Planting

App



HTML Elements
-----------------------------

Layout
Typography
Forms
Media & Embeds
Tables




================================================================================