	CSS Grid

*************



================================================================================

CSS Grid
********

References:

https://moderncss.dev/container-query-solutions-with-css-grid-and-flexbox/#solutions

https://css-tricks.com/introduction-fr-css-unit/  


fr  CSS length unit
-------------------

https://css-tricks.com/introduction-fr-css-unit/
https://gridbyexample.com/video/series-the-fr-unit/

benefits: more legible and maintainable code

the `fr` unit is a fraction, can be used like any other CSS length, like  %,  px  or  em


	.grid-container {
		display: grid;
		grid-template-columns: repeat(4, 1fr);  <-- fixes overflow
		grid-column-gap: 10px;  
	}

1fr takes that 10px into account automatically and subtracts it from the total width available for each column.


or in a different scenario:
let’s say we want our navigation on the left followed by a twelve column grid


without `fr` we have to perform the following caculation:

	the width of each column = ((width of viewport - width of nav) / number of columns) * 1%

but with `fr`

	.grid {
	  display: grid;
	  grid-template-columns: 250px repeat(12, 1fr);
	  grid-column-gap: 10px;
	}


What we’re doing here is setting a fixed width in pixels (250px) for the first column and then creating twelve separate columns which are set at one “fraction of the free space” (literally how the spec phrases it). 


Main and Sidebar
-----------------

When you have a sidebar and Main, CSS grid is a perfect solution for building them.


<div class="wrapper">
  <aside>Sidebar</aside>
  <main>Main</main>
</div>


@media (min-width: 800px) {
  .wrapper {
    display: grid;
    grid-template-columns: 200px 1fr;
    grid-gap: 16px;
  }

  aside {
    align-self: start;
  }
}


Cards Grid
-----------


Grid Container contains Grid Items

Grid Lines   column axis and row axis  =  Grid Tracks (aka grid rows or columns)

Grid Cells is where grid lines intersect.


Grid Areas
	any prortion of the grid contained within 4 lines




grid container
---------------

	display: grid;
					 insline-grid;  // grid items will take only as much space as they require.


	To define columns

		grid-template-columns: width width width width width;

	To define rows

		grid-template-rows: height height height height height;


or combine

		grid:  column column / row row;


use `repeat`:

		grid-template-columns: repeat(4, 6em);



Custom named grid lines and grid areas
--------------------------------------------------------------------------------

	grid-template-columns: [name1] [name2] [name3]; 

	grid-template-rows: [name1] [name2] [name3];



.grid-container {
    display: grid;
    height: calc(100vh - 2em);
    grid-template-rows: 6em 1em 1fr;
    grid-template-columns:
      [main-content-start] 1fr
      [main-content-end] 1em
      [sidebar-start] 25%
      [sidebar-end];
}

.grid-item-content {
    background-color: #9BC850;
    grid-row: 3 / 4;
    grid-column: main-content-start / main-content-end;
}

.grid-item-sidebar {
    background-color: #9BC850;
    grid-row: 3 / 4;
    grid-column: sidebar-start / sidebar-end;
}

.grid-item-header {
    background-color: #A62E5C;
    grid-row: 1 / 2;
    grid-column: main-content-start / sidebar-end;
}

.grid-item {
	color: #fff;
    box-sizing: border-box;
	font-size: 1.2em;
	padding: 1em;
    overflow: hidden;
	text-align: center;
}

.grid-item strong {
	display: block;
	font-size: 130%;  
}		



Named Grid Areas
--------------------------------------------------------------------------------

.media-item-title {
	grid-area: title;
}


.media-container {
    display: grid;

    grid: auto auto / 8em 1fr;
    grid-template-areas:
        "title title"        <--  we repeat the grid-area name twice for each column - so it spans
        "thumbnail content";
    gap: 1em;

    grid: auto 1em auto / 8em 1.5em 1fr;
    grid-template-areas:
        "title title title"
        ". . ."              <--  row for spacing
        "thumbnail . content";
}


--------------------------------------------------------------------------------


Placing Grid Items
-------------------


	grid-column-start
	grid-column-end
	grid-row-start
	gird-row-end


	.grid-item {
		grid-column-start: 1; 
		grid-column-end: 3;
	}

or to combine


	grid-row: row-start / row-end;

	grid-column:  column-start / column-end;


or combine in `grid-area`


	grid-area: row-start / column-start / row-end / column-end;


you can also use `span`:


	grid-column: 2 / span 2;
	grid-row: 2 / span 1;




Gap
---------------

	same as with flexbox


	.grid-container {
		display: grid;

		/*gap: 1em;*/
		row-gap: 1em;
		column-gap: 1.5em;
	}



Auto features
----------------------------

.grid-container {
	

}

Implicit grid lines are created when items are added beyond explicitly defined
rows and columns



Responsive CSS grid
----------------------------

https://css-tricks.com/look-ma-no-media-queries-responsive-layouts-using-css-grid/





CSS Grid Layout: The Fr Unit
----------------------------

https://www.digitalocean.com/community/tutorials/css-css-grid-layout-fr-unit


Fr is a fractional unit and 1fr is for 1 part of the available space.


.container {
  display: grid;

  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: 100px 200px 100px;

  grid-template-areas:
        "head head2 . side"
        "main main2 . side"
        "footer footer footer footer";
}


The 4 columns each take up the same amount of space.





================================================================================
================================================================================


Combining CSS Grid And Flexbox
------------------------------


	A list of cards.
	Grid is used to lay out the cards, and flexbox is used for the card component itself.


	Here are the requirements for the layout:

The height of the cards for each row should be equal
The read more link should be positioned at the end of the card, no matter its height.
The grid should use minmax() function


<div class="wrapper">
  <article class="card">
    <img src="sunrise.jpg" alt="" />
    <div class="card__content">
      <h2><!-- Title --></h2>
      <p><!-- Desc --></p>
      <p class="card_link"><a href="#">Read more</a></p>
    </div>
  </article>
</div>


@media (min-width: 500px) {
  .wrapper {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    grid-gap: 16px;
  }
}

.card {
  display: flex; /* [1] */
  flex-direction: column; /* [2] */
}

.card__content {
  flex-grow: 1; /* [3] */
  display: flex; /* [4] */
  flex-direction: column;
}

.card__link {
  margin-top: auto; /* [5] */
}


================================================================================
