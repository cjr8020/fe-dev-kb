
    *************************

        ubuntu

    *************************


Most useful
***********

1. launch terminal  Ctrl+Alt+T


install deb package
-------------------


check whether package is installed
----------------------------------

$ whereis <package-name>

$ dpkg -l | grep <package-name> | awk '{print $2, $3}'

$ dpkg --get-selections | grep chromium


list installed packages
-----------------------

	$ apt --installed list | grep <string>


uninstall package
------------------

$ sudo apt-get remove <package-name>
$ whereis <package-name>



===============================================================

  apt vs dpkg
  ************

when you use apt to install a package, internally it uses 'dpkg'.
when you install a package using apt, it first creates a list of all the 
dependencies and downloads it from the repository.  

if you have a .deb file:

To install using

  $ sudo dpkg -i /path/to/file
  $ sudo apt-get install -f

You can also install .deb file using `apt-get install package-name`, but first 
move your deb file to /var/cache/apt/archives/ directory.   The command will
automatically download all dependencies.

===============================================================


Nautilus
	default ubuntu file manager.

Unity
	graphical shell for the GNOME desktop environment

Xfce
	another desktop environment that is relatively light-weight

Xubuntu
	a version of ubuntu that comes with Xfce as default

===============================================================


	@@@@@@@@@@@@@

		Xfce4

	@@@@@@@@@@@@@

Gnome and KDE may be the preferred desktop environment for most Linux users, but for those who prefer something that is not resource intensive, XFCE is a great alternative. XFCE is lightweight, fully customizable and is almost like the good old Gnome 2.x that everyone misses.


Post installation Steps
***********************


Incomplete Language Support
------------------------------
Active internet connection is required.
To install missing components at a later time, please use Language Support
click the icon at the very right of the top bar and select
"System Settings.. -> Language Support"


Proxy settings
--------------

http://askubuntu.com/questions/531906/virtualbox-proxy-settings-with-14-04

NOTE: at Standard, on my xubunty VM, all the settings below are without "username:password".


Open a terminal.Ctrl + Alt + T

Run it:

$ sudo -i
# nano /etc/bash.bashrc
Put the following lines in the file:

export http_proxy=http://username:password@proxyserver.net:port/
export https_proxy=https://username:password@proxyserver.net:port/
export ftp_proxy=http://username:password@proxyserver.net:port/
export no_proxy="localhost,127.0.0.0/8,*standard.com,192.168.0.0/16,172.16.0.0/12,10.0.0.0/8"

Ctrl + O, save file. Ctrl + X, close nano.

$ sudo -i
# nano /etc/environment

Put the following lines in the file

http_proxy=http://username:password@proxyserver.net:port/
https_proxy=https://username:password@proxyserver.net:port/
ftp_proxy=http://username:password@proxyserver.net:port/
no_proxy="127.0.0.0/8,localhost,*.standard.com,192.168.0.0/16,172.16.0.0/12,10.0.0.0/8"

Ctrl + O, save file. Ctrl + X, close nano.

$ sudo -i
# nano /etc/apt/apt.conf
Put the following lines in the file:

Acquire::http::Proxy "http://username:password@proxyserver.net:port";
Acquire::https::Proxy "https://username:password@proxyserver.net:port";
Acquire::ftp::Proxy "http://username:password@proxyserver.net:port";

Ctrl + O, save file. Ctrl + X, close nano.


apt-get
-------

$ sudo apt-get update


intel_rapl: no valid rapl domains found in package 0
----------------------------------------------------

Error message at boot time in Ubuntu VM.

The VM appears to hang during first reboot after install.

add to the end of
/etc/modprobe.d/blacklist.conf

blacklist intel_rapl

I tried to enable PAE/NX in VirtualBox settings.. but no luck...
Blacklisting got rid of the message..

===============================================================

	ntp time service
	****************

$ sudo apt-get install ntp
$ sudo service ntp start
$ timedatectl

      Local time: Fri 2017-08-18 19:24:22 PDT
  Universal time: Sat 2017-08-19 02:24:22 UTC
        RTC time: Mon 2017-07-31 13:42:21
       Time zone: America/Los_Angeles (PDT, -0700)
 Network time on: yes
NTP synchronized: yes

note: ntpdate is deprecated in favor of timedatectl

===============================================================

	enable workspaces or virtual desks
	**********************************

To enable additional workspaces:

open the System / Settings window
Workspaces

===============================================================

	installing docky
	----------------

To use the Docky Stable PPA, for Ubuntu 10.04 (Lucid Lynx) and later:

  sudo add-apt-repository ppa:docky-core/stable
  sudo apt-get update
  sudo apt-get install docky

I'm using settings:
- transparent
- hiding: window dodge
- icon size: 25
- zoom 200%

When you open docky settings, it will offer "drag to reposition" handle.

To create new launchers, you can just r-click on desktop and create a new launcher, then just drag it over to docky.



===============================================================

	install Xfce alongside Unity
	****************************

!!! NOTE: or just install xubuntu distribution!!!	

http://askubuntu.com/questions/223536/how-can-i-install-xfce-along-side-unity

There are no conflicts between Xfce and Unity.
If you wish to install Xfce in Ubuntu, install either
- xubuntu-desktop (for Xfce and Xubuntu branding and all Xubuntu default apps), or
- just Xfce by itself

$ sudo apt-get install xubuntu-desktop

or

$ sudo apt-get install -y xfce4 xfce4-goodies

I've found that Xubuntu boots and runs much more quickly than Ubuntu

===============================================================

	Customizing Xfce4
	*****************

Managing Panels
---------------

Xfce is similar to Gnome 2.x - it comes with panels where you can customize and place your applications/applets on it.

To customize panels:

r-click, Panel > Panel Prefs

Preferred Applications
----------------------apt

Whisker Menu > Settings > Preferred  Applications
Default:
Web Browser: Firefox
File Manager: Thunar
Terminal Emulator: Xfce Terminal


System monitoring
-----------------

	indicator-multiload (System Load Indicator)

$ sudo apt-get install indicator-multiload

Use dash or launch from command-line. It will run in the taskbar.

In Dash, it is under System > System Load Indicator

	gnome-system-monitor (System Monitor)

$ gnome-system-monitor


Cycle thru tabs in xfce4-terminal
----------------------------------

CTRL-PgUp/PgDown - to cycle

Alt-N goes to the tab # (where N is the tab ordinal number)


===============================================================

	creating xfce program launchers
	*******************************

http://unix.stackexchange.com/questions/75902/how-to-run-xfce-terminal-with-different-commands-per-tab-and-keep-using-the-tabs

If you want to start a command as a job of an interactive shell 
in the xfce4-terminal terminal emulator and keep the shell running and 
use it interactively after the application has exited, with bash, 
you can make use of the $PROMPT_COMMAND environment variable, 
to have xfce-terminal start an interactive shell that starts the given command 
just before the first prompt.

xfce4-terminal \
  -T eclipse \
  --working-directory=/home/stefan/oximity \
  -e 'env PROMPT_COMMAND="unset PROMPT_COMMAND; /opt/eclipse/eclipse" bash' \
  \
  --tab -T arandr \
  --working-directory=/home/stefan/oximity \
  -e 'env PROMPT_COMMAND="unset PROMPT_COMMAND; arandr /home/stefan/.screenlayout/oximity.sh" bash' \
  \
  --tab -T bash \
  --working-directory=/home/stefan/oximity \
  ...

That way, the commands are jobs of that shell which means you can suspend them 
with Ctrl-Z and resume them later with fg/bg as if you had entered them at the 
prompt of that interactive shell.

That assumes though that you don't set the $PROMPT_COMMAND in your ~/.bashrc. 
Also note that the exit status of the command will not be available in $?.

To make it even more like the command was entered at the shell prompt, 
you can even add it to the history list:

xfce4-terminal -T /etc/motd -e 'env PROMPT_COMMAND="
  unset PROMPT_COMMAND
  history -s vi\ /etc/motd
  vi /etc/motd" bash'


That way, once you exit vi, you can press the Up key to recall that same vi command.

An easier way to write it:

PROMPT_COMMAND='unset PROMPT_COMMAND; history -s "$CMD"; eval "$CMD"' \
  xfce4-terminal \
          -T /etc/motd -e 'env CMD="vi /etc/passwd" bash' \
    --tab -T top -e 'env CMD=top bash'

===============================================================

	atom on ubuntu
	**************

$ sudo add-apt-repository ppa:webupd8team/atom
$ sudo apt-get update
$ sudo apt-get install atom


===============================================================

	vi / vim on xubuntu
	*******************
vi is really vim

However, the default may not support clipboard and xtermclipboard features.
For that, you need to install the vim GUI packages (vim-gnome, vim-gtk, vim-athena)


$ sudo apt-get install vim-gtk

Now, you should be able to use clipboard registers (* and +):

E.g. select what you want using the mouse, then 

	"+y

to paste to vim from clipboard, type:

	"+p  

shift+insert should also work to paste.	


===============================================================

	Customize path
	***************

.profile


	Customize bash prompt
	*********************
https://help.ubuntu.com/community/CustomizingBashPrompt

$ vi .bashrc
Find PS1 and modify it.


	change default terminal emulator
	********************************

Run from terminal (Ctrl+Alt+T):

$ exo-preferred-applications

You may need to install it first:

$ sudo apt-get install exo-utils

Under utilities tab, you can change Terminal Emulator to "Xfce Terminal"

===============================================================
  xfce4-terminal corner grabbing resizing handles accuracy

To resize, use Alt-rclick and drag.
===============================================================

  git config
  **********
  
  [user]
          name = Your Name
          email = yourname@yourdomain.com
  [core]
          editor = vim
          safecrlf = false
          autocrlf = input
          ignorecase = false
  [http]
          sslVerify = false
  [status]
          submoduleSummary = true
  [diff]
          submodule = log
  [push]
          default = simple
  [credential]
  	helper = cache --timeout=86400



===============================================================

	Installing Google Chromme
	*************************
http://askubuntu.com/questions/510056/how-to-install-google-chrome

1. Add Key:

wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -

2. Set repository:

sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'

3. Install package:

sudo apt-get update
sudo apt-get install google-chrome-stable


  google-chrome proxy
  *******************

You cannot configure proxy via chrome UI - google-chrome will pickup your environment (see proxy section)


============================================================

  Install Sublime on Ubuntu
  *************************

Install Sublime Text 3 via the official apt repository:

1. Open terminal via Ctrl+Alt+T or by searching for “Terminal” from desktop app launcher. When it opens, run command to install the key:

wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -


Ensure apt is set up to work with https sources:

  sudo apt-get install apt-transport-https


2. Then add the apt repository via command:

echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list

3. Finally check updates and install sublime-text via your system package manager:

  sudo apt-get update

  sudo apt-get install sublime-text

4. launch with 

  $ subl

============================================================

	install Meld Merge
	******************

Meld is a visual diff and merge tool.
Allows you to compare files, diretories and version controlled projects.

	$ sudo apt-get install meld

If it installs an old version, you can install manually from git repo:

	$ sudo apt-get install intltool itstool gir1.2-gtksource-3.0 libxml2-utils

	$ git clone https://git.gnome.org/browse/meld

	$ cd meld

run the following command to install latest meld version:

	$ sudo python setup.py install


============================================================

WARNING: i think installing Opera messed by other two browsers video playback.

	Installing Opera
	****************

To install opera via PPA on Ubuntu, run these commands

	Setup key with:

	wget -O - http://deb.opera.com/archive.key | sudo apt-key add -
	Setup repository with:

	sudo sh -c 'echo "deb http://deb.opera.com/opera-stable/ stable non-free" >> /etc/apt/sources.list.d/opera.list'
	Setup package with:

	sudo apt-get update
	sudo apt-get install opera

Source

	Alternatively, you can install the .deb via a terminal with

	sudo dpkg -i path/to/your/deb
	It already contains the PPA

============================================================

  Personal Package Archives (PPA)
  *******************************

PPA
  is the only way to get your software updated in Ubuntu between distro releases.
  a special software repository for uploading source packages to be built and pulished as an APT repository by Launchpad.

============================================================

	Ubuntu 16.04 Utilities and Configuration
	****************************************
http://linuxsagas.digitaleagle.net/2016/05/15/ubuntu-16-04-utilities-and-configuration/


xfce4-taskmanager
-----------------


MenuLibre
---------
	The MenuLibre tool makes it easy to add shortcuts that allow you to launch programs from the Unity menu. It is a must have if you install anything manually without using a deb pacakge.

	Install:

	sudo apt-get install menulibre

Compression
------------

I use the File Roller application usually. But, I wanted the 7zip and rar libraries available:

sudo apt-get install p7zip-full p7zip-rar

Monitor Settings
----------------
For my dual screen setup at my desk, I have a few tweaks that I like to make. I can open the “Displays” settings app to make these changes:
	Sticky edges: off
	Launcher placement: only 1 screen

Package Managing Tools
------------------------
With as much trouble as I am having with the Ubuntu Software app, I want the power of Synaptic.

	sudo apt-get install synaptic

Another tool is the Y PPA Manager from Web Upd8:

	sudo add-apt-repository ppa:webupd8team/y-ppa-manager
	sudo apt-get update
	sudo apt-get install y-ppa-manager


Caffeine
------------
	A status bar application able to temporarily prevent the activation of both the screen saver and the "sleep" powersaving mode.

	You can install it from the PPA:
	https://launchpad.net/~caffeine-developers/+archive/ppa
	or download a deb or tarball on the downloads page.

	However this works on 16.04

	$ sudo apt-get install caffeine

	It is now fully automatic ...

	Ubuntu 16.04 Programming tools
	******************************

http://linuxsagas.digitaleagle.net/2016/06/07/ubuntu-16-04-programming-tools/


sudo apt-get install \
    vim \
    vim-gnome \
    git-cola \
    meld \
    nautilus-compare


Git-Cola is git GUI client
Meld - compare tool like Beyond Compare.

Web Dev
-------

Brackets: I used WebUpd8’s repository to install Brackets:

sudo add-apt-repository ppa:webupd8team/brackets
sudo apt-get update
sudo apt-get install brackets

Brackets plugins:
	Brackets Bower
	brackets-file-tree-exclude
	Grunt for Brackets
	Brackets Git
	Brackets TypeScript (François de Campredon)
	Brackets-Gulp

Node JS, the NPM installer, Bower, and Protractor

sudo apt-get install nodejs
sudo ln -s /usr/bin/nodejs /usr/bin/node
sudo apt-get install npm
sudo npm install bower -g
sudo npm install -g protractor
sudo npm install -g gulp

$ npm -g ls --depth=0
/usr/local/lib
├── bower@1.7.9
├── gulp@3.9.1
├── jspm@0.16.35
├── protractor@3.3.0
├── typescript@1.8.10
└── typings@1.0.4

Java
-------
 I just used Web Upd8’s repository.

sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer

Soap UI
--------
I downloaded Soap UI from their website.

I just ran the shell script without sudo/root access.

sh SoapUI-x64-5.2.1.sh


Media Programs
=========================

Screenshot or Shutter for screeshots
----------------------

Visual
---------
Gimp: for editing photos
Inkscape: vector-based drawing
Xournal: has features that allow marking up a PDF
sudo apt-get install \
    gimp \
    gimp-data-extras \
    inkscape \
    xournal
For the scanner to work over the network, I had to put in the IP address into /etc/sane.d/net.conf.

Audio
------------
Audacity: sound editing
	$ sudo apt-get install audacity
MuseScore: sheet music editor
soundconverter: converting audio between formats
winff: Front end to ffmpeg

Video
-------------
mplayer – nice general video/music player from the command line
mplayer-gui
gnome-mplayer
vlc – video player
kdenlive – video editor
openshot – video editor
cheese – nice for testing to make sure the webcam works (already installed)
EasyTAG
YouTube Downloader — downloads videos from Youtube
sudo apt-get install \
    gnome-mplayer \
    vlc \
    kdenlive \
    openshot \
    youtube-dl

Then, I installed the codecs for videos:

sudo apt-get install \
    libdvdnav4 \
    libdvdread4 \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    ubuntu-restricted-extras

================================================================================

	Remap Ubuntu keyboard shortcuts
	*******************************

Intellij IDEA/WebStorm conflicts with ubuntu window manager shortcuts.
Here is how to remap them

	Settings > Window Manager > Keyboard tab


================================================================================

	Python PIP
	**********

install python pip

	$ sudo apt-get install python-pip
	$ pip -V

using pip
---------

	$ pip search package_name

install
-------

	$ pip install package_name

uninstall 

	$ pip uninstall package_name

	$ pip --help




================================================================================

	powerline shell
	***************

Download and install powerline-shell
------------------------------------

cd ~
git clone https://github.com/banga/powerline-shell.git
cd cd powerline-shell/
cp config.py.dist config.py
./install.py 

Installing powerline-shell script to ~/.local/bin



Font installation
------------------
https://github.com/powerline/fonts

	# clone
	git clone https://github.com/powerline/fonts.git --depth=1
	# install
	cd fonts
	./install.sh
	Copying fonts...
	Resetting font cache, this may take a moment...
	Powerline fonts installed to ~/.local/share/fonts


	# clean-up a bit
	cd ..
	rm -rf fonts	

Generate config
---------------

$ .config/bin/powerline-shell --generate-config > ~/.powerline-shell.json

{
  "segments": [
    "virtual_env",
    "username",
    "hostname",
    "ssh",
    "cwd",
    "git",
    "hg",
    "jobs",
    "root"
  ]
}

another option

{
  "segments": [
    "virtual_env",
    "time",
    "hostname",
    "ssh",
    "cwd",
    "git",
    "jobs",
    "set_term_title",
    "newline",
    "root"
  ],
  "mode": "flat",
  "cwd": {
    "mode": "plain"
  },
  "theme": "default"
}

================================================================================


Powerline pip installation option for Linux
--------------------------------------------


1. Install Python 3.2+, Python 2.6+ or PyPy and pip with setuptools. This step is distribution-specific, so no commands provided.

2. Install Powerline using one of the following commands:

	pip install --user powerline-status

will get the latest release version and

	pip install --user git+git://github.com/powerline/powerline

will get the latest development version.



powerline-gitstatus installation
--------------------------------

https://github.com/jaspernbrouwer/powerline-gitstatus


	$ pip install --user powerline-gitstatus

You will need to add colorschemes to 

	.config/powerline/config_files/colorschemes/default.json:

    "gitstatus":                 { "fg": "gray8",           "bg": "gray2", "attrs": [] },
    "gitstatus_branch":          { "fg": "gray8",           "bg": "gray2", "attrs": [] },
    "gitstatus_branch_clean":    { "fg": "green",           "bg": "gray2", "attrs": [] },
    "gitstatus_branch_dirty":    { "fg": "gray8",           "bg": "gray2", "attrs": [] },
    "gitstatus_branch_detached": { "fg": "mediumpurple",    "bg": "gray2", "attrs": [] },
    "gitstatus_tag":             { "fg": "darkcyan",        "bg": "gray2", "attrs": [] },
    "gitstatus_behind":          { "fg": "gray10",          "bg": "gray2", "attrs": [] },
    "gitstatus_ahead":           { "fg": "gray10",          "bg": "gray2", "attrs": [] },
    "gitstatus_staged":          { "fg": "green",           "bg": "gray2", "attrs": [] },
    "gitstatus_unmerged":        { "fg": "brightred",       "bg": "gray2", "attrs": [] },
    "gitstatus_changed":         { "fg": "mediumorange",    "bg": "gray2", "attrs": [] },
    "gitstatus_untracked":       { "fg": "brightestorange", "bg": "gray2", "attrs": [] },
    "gitstatus_stashed":         { "fg": "darkblue",        "bg": "gray2", "attrs": [] },
    "gitstatus:divider":         { "fg": "gray8",           "bg": "gray2", "attrs": [] }

Now, add your segment to config.json

"show_tag" will take an extra git call, so may not want it

			{
			    "function": "powerline_gitstatus.gitstatus",
			    "priority": 40,
			    "args": {
			    	"show_tag": true
			    }
			}	



Fonts installation
------------------

Fontconfig
	
	This method only works on Linux. It’s the second recommended method if terminal emulator supports it as patching fonts is not needed, and it generally works with any coding font.

1. Download the latest version of the symbol font and fontconfig file:

	wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf
	wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf

2. Move the symbol font to a valid X font path. Valid font paths can be listed with xset q:

	mv PowerlineSymbols.otf ~/.local/share/fonts/

3. Update font cache for the path the font was moved to (root priveleges may be needed to update cache for the system-wide paths):

	fc-cache -vf ~/.local/share/fonts/

4. Install the fontconfig file. For newer versions of fontconfig the config path is ~/.config/fontconfig/conf.d/, for older versions it’s ~/.fonts.conf.d/:

	mv 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/

If custom symbols still cannot be seen then try closing all instances of the terminal emulator. Restarting X may be needed for the changes to take effect.

If custom symbols still can’t be seen, double-check that the font have been installed to a valid X font path, and that the fontconfig file was installed to a valid fontconfig path. Alternatively try to install a patched font.


Repository Root
----------------

http://powerline.readthedocs.io/en/master/installation.html#repository-root

When using pip {repository_root} directory referenced in documentation may be found using pip show powerline-status. 

	 $  pip show powerline-status
	---
	Metadata-Version: 2.0
	Name: powerline-status
	Version: 2.6
	Summary: The ultimate statusline/prompt utility.
	Home-page: https://github.com/powerline/powerline
	Author: Kim Silkebaekken
	Author-email: kim.silkebaekken+vim@gmail.com
	Installer: pip
	License: MIT
	Location: /home/<username>/.local/lib/python2.7/site-packages
	Requires: 
	Classifiers:
	  Development Status :: 5 - Production/Stable
	  Environment :: Console
	  Environment :: Plugins
	  Intended Audience :: End Users/Desktop
	  License :: OSI Approved :: MIT License
	  Natural Language :: English
	  Operating System :: Microsoft :: Windows
	  Operating System :: POSIX
	  Programming Language :: Python :: 2.6
	  Programming Language :: Python :: 2.7
	  Programming Language :: Python :: 3.2
	  Programming Language :: Python :: 3.3
	  Programming Language :: Python :: 3.4
	  Programming Language :: Python :: Implementation :: CPython
	  Programming Language :: Python :: Implementation :: PyPy



In the output of pip show there is a line like Location: {path}, that {path} is {repository_root}. Unless it is --editable installation this is only applicable for {repository_root}/powerline/… paths: something like {repository_root}/scripts/powerline-render is not present.

When using other packages referenced paths may not exist, in this case refer to package documentation.



Bash prompt
-----------
http://powerline.readthedocs.io/en/latest/usage/shell-prompts.html#bash-prompt


Add the following line to the bashrc, where {repository_root} is the absolute path to the Powerline installation directory (see repository root):

. {repository_root}/powerline/bindings/bash/powerline.sh

Note

Since without powerline daemon bash bindings are very slow PS2 (continuation) and PS3 (select) prompts are not set up. Thus it is advised to use

	powerline-daemon -q
	POWERLINE_BASH_CONTINUATION=1
	POWERLINE_BASH_SELECT=1
	. {repository_root}/powerline/bindings/bash/powerline.sh

Got the following error:

The program 'powerline-daemon' is currently not installed. You can install it by typing:

	sudo apt install powerline

No problem after that.. 

#----------------------------------------------
# disabled powerline activation
#----------------------------------------------

#function _update_ps1() {
#    PS1="$(~/.local/bin/powerline-shell $?)"
#}
#
#if [ "$TERM" != "linux" ]; then
#    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
#fi

#----------------------------------------------
# active powerline activation
#----------------------------------------------
export POWERLINE_ROOT=/home/craiskin/.local/lib/python2.7/site-packages


powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
. ${POWERLINE_ROOT}/powerline/bindings/bash/powerline.sh






Configuration
-------------

Powerline is configured with one main configuration file, and with separate configuration files for themes and colorschemes. All configuration files are written in JSON, with the exception of segment definitions, which are written in Python.

Powerline provides default configurations in the following locations:

Main configuration

	powerline/config.json

Colorschemes

	powerline/colorschemes/name.json, 
	powerline/colorschemes/extension/__main__.json, 
	powerline/colorschemes/extension/name.json

Themes

	powerline/themes/top_theme.json, 
	powerline/themes/extension/__main__.json, 
	powerline/themes/extension/default.json


Here {powerline} is one of the following:

1. The default configuration directory located in the main package: 

	powerline_root/powerline/config_files. 

May be absent in some packages (e.g. when installing via Gentoo ebuilds).

2. If variable $XDG_CONFIG_DIRS is set and non-empty, then to any 
directory/powerline where {directory} is a directory listed in a colon-separated $XDG_CONFIG_DIRS list. 
Directories are checked in reverse order.
Here's what it's set to on ubuntu 16.04:

	XDG_CONFIG_DIRS=/etc/xdg/xdg-xubuntu:/usr/share/upstart/xdg:/etc/xdg:/etc/xdg


3. User configuration directory located in $XDG_CONFIG_HOME/powerline. 

	This usually corresponds to ~/.config/powerline on all platforms.

	$ mkdir ~/.config/powerline


	Quick Setup Guide

Look at configuration in powerline_root/powerline/config_files. If you want to modify some file you can create ~/.config/powerline directory and put modifications there: all configuration files are merged with each other.

	Existing multiple configuration files that have the same name, but are placed in different directories, will be merged. Merging happens in the order given in the above list of possible {powerline} meanings.






================================================================================