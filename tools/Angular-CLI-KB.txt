
  @@@@@@@@@@@@@@@@

    Angular-CLI

  @@@@@@@@@@@@@@@@


See `ng update` notes at the bottom.


Update nodejs on ubuntu:
------------------------

$ sudo npm cache clean -f
$ sudo npm install -g n
$ sudo n stable

# note the link below may not be need - n manages /usr/local/bin/node instead
$ sudo ln -sf /usr/local/n/versions/node/<VERSION>/bin/node /usr/bin/node

To switch node versions:

$ n               # to display installed versions
$ sudo n 7.6.0    # to switch to that version


Updating typescript
-------------------

  $ tsc --version

To install the latest stable 

  $ sudo npm install -g typescript

or 

  $ sudo npm install -g typescript@latest

or 'next'

  $ sudo npm install -g typescript@next  




Updating angular-cli
--------------------

$ sudo npm uninstall -g @angular/cli
$ sudo npm cache clean -f
$ sudo npm install -g @angular/cli@latest

Local project package:

  $ rm -rf node_modules dist tmp
  $ npm install --save-dev angular-cli@latest
  $ ng init

NOTE: angular-cli install on RHEL 6
was failing on node-sass installation using /usr/bin/gcc [v 4.4.7]
needed to use gcc v4.8.2 which was installed with devtoolset-2
you should have the following in your .bashrc or .bash_profile

  source /opt/rh/devtoolset-2/enable


12/2017 - 01/2018 angular/cli installation issue
-------------------------------------------------

https://github.com/angular/angular-cli/issues/8402

after updating node/npm and removing cli,
  $ sudo npm install -g @angular/cli@latest 
fails with recurring message:

  gyp WARN EACCES user "root" does not have permission to access the dev dir "/usr/local/lib/node_modules/@angular/cli/node_modules/node-sass/.node-gyp/8.9.1"

node: 8.9.4


Fixing permissions did not work on Ubuntu 16.04

  $ sudo chown -R $(whoami) /usr/local/lib/node_modules

npm --allow-root  DID NOT WORK

  $ sudo npm install -g @angular/cli --allow-root

--unsafe-perm (THIS INSTALLED angular/cli)

  $ sudo npm install --unsafe-perm -g @angular/cli


================================================================================  

List currently installed version
--------------------------------

$ npm list -g --depth=0 | grep angular-cli

typescript
----------

$ sudo npm install -g typescript@next
$ tsc --version
Version 2.1.0-dev.20161003

  

================================================================================  
  update node and npm
  *******************

nodejs
------

$ sudo npm cache clean -f
$ sudo npm install -g n
$ sudo n stable

$ sudo ln -sf /usr/local/n/versions/node/<VERSION>/bin/node /usr/bin/node

To upgrade to the latest version (not the current stable):

$ sudo n latest

To undo:

  sudo apt-get install --reinstall nodejs-legacy     # fix /usr/bin/node
  sudo n rm 6.0.0     # replace number with version of Node that was installed
  sudo npm uninstall -g n

npm
----

$ sudo npm install npm -g

==============================================================================  

NOTE: angular-cli@1.0.0-beta.11-webpack.8 does NOT work with typescript@2.0.2
so for now when you run 
  $ ng new blah
change "typescript": "^2.0.0" to "typescript": "2.0.0" in packages.json
then
  $ rm -rf node_modules dist tmp typings
  $ npm install --save-dev angular-cli@webpack  

================================================================================  

  ngc as drop-in replacement for tsc
  **********************************

https://angular.io/guide/aot-compiler#compile-with-aot

  $ ngc --project ./tsconfig.json

ngc is a drop-in replacement for tsc and is configured in the same way.
it requires its own tsconfig.json with AOT-oriented settings.

================================================================================  

	ng new 
	******

  $ ng new <project-name>

To create project in a directory named differently

  $ ng new <project-name> -dir <dir-name>

To create all component with a particular prefix

  $ ng new <project-name> --prefix <prefix-name>



To create a routing module 
---------------------------


  $ ng new <project-name> --routing

  will create 'app-routing.module.ts' when you create project


module

  $ ng g m <module-name> --module=app [--routing]

Other ioptions:

  --spec   specifies if a spec file is generated
  --routing (boolean) if a routing module file should be generated

  Example:

    $ ng g m hero --module=app --routing
    installing module
      create src/app/hero/hero-routing.module.ts
      create src/app/hero/hero.module.ts
      update src/app/app.module.ts

NOTE: --module  options is to indicate where the module should be imported.

  with --routing option, angular/cli imports the feature routing module into
  root module, but the feature module itself needs to be imported.

  1. if you
      specify '--module=app' and
      don't specify '--routing', 
      then your HeroModule will be imported in app.module.ts in "imports:"

  2. if you
      specify '--module=app' and 
      specify '--routing'
      then your HeroRoutingModule will be imported into your app.module.ts:

      imports: [
        BrowserModule,
        FormsModule,
        HttpModule,
        AppRoutingModule,
        DashboardModule,
        HeroRoutingModule
      ],

    but .. angular-cli does not import HeroModule into app.module .. and
    importing the hero routing module alone is not enough.

      imports: [
        ...,
        HeroModule,
        HeroRoutingModule  // in fact, if you import HeroModule, this isn't needed.. 

      ]



    the routing file includes an empty 'Routes' object that you can fill
    with routes to different components and/or modules.

    NOTE:  MAKE SURE TO ADD YOUR MODULE files:
    e.g.:
      if 
        you add dashboard/dashboard.module.ts
      then
1.        you need to import it in your app.module.ts:

          @NgModule({
            imports: [
              DashboardModule,
              AppRoutingModule
            ],
            providers: [ <services> ],
            declarations: [ <components-not-part-of-dashboard-module> ],
            bootstrap: [ AppComponent ]
          })
          export class AppModule { }

2.      and in your dashboard.module.ts
        - import your dashboard-routing.module.ts



Create angular2 project in existing directory
---------------------------------------------

  $ mkdir <project-name>
  $ ng init --name <project-name> --prefix <prefix-name>


=====================================================================

  create and wire new component
  ----------------------------


Create `crisis-center` component in the `crisis-center` module and 
declare in `crisis-center.module.ts`

  $ ng g c crisis-center/crisis-center --flat -is -it -m crisis-center
  installing component
    create src/app/crisis-center/crisis-center.component.spec.ts
    create src/app/crisis-center/crisis-center.component.ts
    update src/app/crisis-center/crisis-center.module.ts

creates a declaration in crisis-center module:

  @NgModule({
    imports: [
      CommonModule,
      CrisisCenterRoutingModule
    ],
    declarations: [CrisisCenterComponent]
  })
  export class CrisisCenterModule { }





Destroy Component
-----------------

  $ ng destroy component books

this will remove the 5 files that were auto-gen'ed by angular-cli, however
modifications to the following files:
  app.module.ts
  app.component.ts
  app.component.html
  and the folder 'books' 
will have to be manually removed




Generate a new component with flat structure, inline styles and template

  $ ng g c <component-name> --flat -it -is


Generate new component in main 'app' module without a spec:

  $ ng g c page-not-found --flat -is -it -m app --spec false
  installing component
    create src/app/page-not-found.component.ts
    update src/app/app.module.ts



=====================================================================

  create service
  **************

note: make sure NOT to include "service" into <service-name> - it will be added.

  $ ng g s <service-name> --flat --spec 

    --flat (default: true)

  examples:

  1. 
  
    src/app $ ng g s in-memory-data --flat

      creates the service in src/app/ folder

  2. create service in shared folder:

    $ mkdir src/app/shared
    $ ng g s shared/config

      creates config.service.ts in src/app/shared/ folder



create config service
---------------------
$ mkdir src/app/shared
craiskin@xubi-one:~/ws/standard/iam/iam-demo-ng2-product-app $ ng g s shared/Config
installing service
  create src/app/shared/config.service.spec.ts
  create src/app/shared/config.service.ts
  WARNING Service is generated but not provided, it must be provided to be used

create mdm product service
$ ng g s MdmProduct
installing service
  create src/app/mdm-product.service.spec.ts
  create src/app/mdm-product.service.ts
  WARNING Service is generated but not provided, it must be provided to be used


create ConfigService
--------------------

import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';

@Injectable()
export class ConfigService {
  public production: boolean = environment.production;
  public mdmProductServer: string = environment.MDM_PRODUCT_SERVER;
  public mdmProductApi: string = environment.MDM_PRODUCT_API;

  public mdmProductApiURL(): string {
    return this.mdmProductServer + this.mdmProductApi;
  }
}


Provide ConfigService in @NgModule AppModule:
---------------------------------------------

import { AppComponent } from './app.component';
import { environment } from '../environments/environment';
import { ConfigService } from './shared/config.service';


@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule,
    AlertModule
  ],
  providers: [ ConfigService ],
  bootstrap: [AppComponent]
})
export class AppModule {

  constructor() { }
}

use ConfigService in MdmProductService
--------------------------------------

import { Injectable } from '@angular/core';
import { ConfigService } from './shared/config.service';

@Injectable()
export class MdmProductService {

  constructor(private configService: ConfigService) { 
    console.log(`
      I'm MdmProductService, and I'm configured with ConfigService
      ConfigService.mdmProductServer: ${configService.mdmProductApiURL()}
    `);
  }

}



================================================================================
================================================================================
================================================================================

  angular-cli project folder structure
  ************************************

Angular 6
*********

.angular-cli.json -->  angular.json

Angular Workspace
-----------------

	directory generated by angular cli 
	able to contain multiple projects or libraries
	that derive configuration from a single file - angular.json


$schema

	The $schema property refers to the Angular CLI implementation file for JSON Schema.


version

	The version property specifies what’s the Angular Workspace schema version 
	which is currently in use.

schematics

	a workflow tool, as part of Angular DevKit, which lets us transform, generate or update our project development workflow. Just for the record - Angular CLI uses Schematics under the hood in order to perform its job and the truth is that Angular Schematics packages have been derived and created from the CLI’s core.

	The schematics property provides us an ability to configure the options of Schematics packages in the root level of our workspace.


cli - configuration for angular cli in this workspace

	defaultCollection
	packageManager
	warnings


newProjectRoot

	The newProjectRoot property specifies where’s the place that new internal applications and libraries (as long as these are generated by the CLI) will be placed

	the `default` is "projects".

projects

	the `projects` property includes the configuration for any project in our 
	workspace.

	by default,  there is another project alongside the main project - a project
	with e2e tests:

	each project will be configured with the following:

		root
		
			specifies the main directory with all project files.
			probably empty value "" for the main project of the workspace, but
			indicates specific value for all the projects within the main one.

		sourceRoot

			specifies where the sources are placed.

		projectType = application | library

			using `ng generate` you can now create internal projects within the 
			main project.  these projects can be generated as "internal app" or
			"library".

		prefix

			custom prefix to be applied when generating components or directives
			using angular cli to prevent collisions.

		schematics

		architect

			architect targets

			any project in a workspace is able to contain and customize 
			automatic taks commands - test, lint, serve, etc..
			these are based on prebuilt targets called "Architect Targets"


defaultProject

	represents the name that shows up while using some Angular CLI commands.									


angular.json
--------------	

{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "example-ng6-lib-test-app": {
      "root": "",
      "sourceRoot": "src",
      "projectType": "application",
      "prefix": "app",
      "schematics": {},
      "architect": {
        "build": {
        	...
        },
        "serve": {
        	...
        },
        "extract-i18n": {
			...
        },
        "test": {
        	...
        },
        "lint": {
        	...
        }
      }
    },
    "example-ng6-lib-test-app-e2e": {
      "root": "e2e/",
      "projectType": "application",
      "architect": {
        "e2e": {
        	...
        },
        "lint": {
        	...
        }
      }
    },
    "example-ng6-lib": {
      "root": "projects/example-ng6-lib",
      "sourceRoot": "projects/example-ng6-lib/src",
      "projectType": "library",
      "prefix": "enl",
      "architect": {
        "build": {
        	...
        },
        "test": {
        	...
        },
        "lint": {
        	...
        }
      }
    }
  },
  "defaultProject": "example-ng6-lib-test-app"
}



================================================================================

	Architect commands with multiple targets 
	****************************************

ERROR:  Architect commands with multiple targets cannot specify overrides.
		'test' would be run on the following projects: ng-app-state-monorepo,ng-app-state
	

https://github.com/angular/angular-cli/issues/10765

ng test now supports running test across multiple projects. Currently the name of the project needs to be specified to allow the use of additional options. This will be expanded in the future to provide for more flexibility.


	ng test [project_name] --browsers=ChromeHeadless --watch=false --progress=false --sourceMap=false

e.g. package.json

"scripts": {
	
    "test-lib": "ng test example-ng6-lib --browsers ChromeHeadless --watch=false --code-coverage=true --sourceMap=true",
    "test-app": "ng test example-ng6-lib-test-app --browsers ChromeHeadless --watch=false --code-coverage=true",

}
================================================================================
================================================================================
================================================================================


  Installing 3rd party libraries
  ******************************

Q: how to add or bundle external js files?
http://stackoverflow.com/questions/38855891/angular-cli-webpack-how-to-add-or-bundle-external-js-files

A:
https://github.com/angular/angular-cli#3rd-party-library-installation
https://coryrylan.com/blog/angular-2-cli-adding-third-party-libraries

First, install your library with npm:

  $ npm install d3 --save

Next, install the TypeScript definitions to allow our code to have better
autocompletion and dev experience. Note: if you use a library that was written
in TS such as RxJS, you don't have to worry about installing the type 
definitions).

  $ npm install @types/d3 --save-dev

  [ look at the difference between '--save-dev' and '--save' options ]

Now that the library is installed, import it into any file in your app:

  import * as _ from 'lodash';


Global installation
-------------------

Some js libraries need to be added to the global scope and loaded as if they
were a script tag.  This is done via angular-cli.json

bootstrap4 example:

  $ npm install bootstrap@next

Then add the needed script files to apps[0].scripts:

  "scripts": [
    "../node_modules/jquery/dist/jquery.js",
    "../node_modules/tether/dist/js/tether.js",
    "../node_modules/bootstrap/dist/js/bootstrap.js"
  ],    

Finally, add the Bootstrap CSS to the apps[0].styles array:

  "styles": [
    "styles.css",
    "../node_modules/bootstrap/dist/css/bootstrap.css"
  ],

Restart 'ng serve' if you're running it, and bootstrap 4 should be working.

================================================================================

ng2-bootstrap
*************

contains all core (and not only) Bootstrap components powered by Angular2.
So you don't need to include original JS components, but we are using markup
and CSS provided by Bootstrap.


https://ng-bootstrap.github.io/#/getting-started

installation:

$ npm install ng2-bootstrap --save
You will need to bootstrap styles:

<!-- index.html -->
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">


To use ng2-bootstrap with Angular CLI
-------------------------------------
https://github.com/valor-software/ng2-bootstrap/blob/development/docs/getting-started/ng-cli.md

$ ng new my-app
$ cd my-app
$ ng serve

Adding bootstrap: 

1. install ng2-bootstrap and bootstrap

  $ npm install ng2-bootstrap bootstrap --save


--> NOTE: ng2-bootstrap 1.1.16-9  changes:

  Now, 'AlertModule' alone is not sufficient for the example below.
  You will get 
    "Error in ./AppComponent class AppComponent - inline template:3:4 caused by: 
    No provider for AlertConfig!"

  So, will also need to add AlertConfig as provider in
  app.module.ts:

      providers: [ 
        AlertConfig,            // ng2-bootstrap
      ]


2. open src/app/app.module.ts and add:

import { AlertModule, AlertConfig } from 'ng2-bootstrap';
...

@NgModule({
   ...
   imports: [AlertModule, ... ],
   providers: [ 
       AlertConfig,            // ng2-bootstrap
   ]
})

3. open angular-cli.json and insert a new entry into the styles array

      "styles": [
        "styles.css",
        "../node_modules/bootstrap/dist/css/bootstrap.min.css"
      ],


4. to validate, open src/app/app.component.html and add:

<alert type="success">hello</alert>        



==============================================================


  Applications Styles
  *******************

When we add styles to a component, we're keeping everything a component needs -
HTML, the CSS, the code - together in one convenient place.

We can also create styles at the application level outside of any component.

angular-cli provides styles.css at the index.html level and it's already 
integrated into the project via 

angular-cli.json:

      "styles": [
        "styles.css"
      ],

styles.css - allows users to add global styles and supports CSS imports

  if the project is created with the --style=sass option, this will be a
  .sass file instead and the same applies to scss/less/style.

You can add more global styles via the apps[0].styles property in
angular-cli.json


=========================================================================

  run local webpack server with SSL
  *********************************

$ sudo openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout self-signed.key -out self-signed.crt  

"serve-ssl": "ng serve --ssl true --ssl-key './self-signed.key' --ssl-cert './self-signed.crt' --disableHostCheck --proxy-config proxy.conf.json",


=========================================================================


  No binary for Chrome browser on your platform
  *********************************************

$ ng t --watch false
Could not start watchman; falling back to NodeWatcher for file system events.
Visit http://ember-cli.com/user-guide/#watchman for more info.
28 10 2016 12:59:56.042:INFO [karma]: Karma v1.2.0 server started at http://localhost:9876/
28 10 2016 12:59:56.043:INFO [launcher]: Launching browser Chrome with unlimited concurrency
28 10 2016 12:59:56.096:INFO [launcher]: Starting browser Chrome
28 10 2016 12:59:56.097:ERROR [launcher]: No binary for Chrome browser on your platform.
  Please, set "CHROME_BIN" env variable.


==============================================================


  Running tests with headless browser
  ***********************************


  Headless Chrome
  ***************

Chrome now has the ability to run in headless mode since version 59, so you can use it to run tests without needing to install any additional packages and with a more standard environment.

To use Chrome in headless mode, you need to add the following section to your karma.conf.js

    browsers: ['Chrome','ChromeHeadless'],
    singleRun: false,
    customLaunchers: {
      ChromeHeadless: {
        base: 'Chrome',
        flags: [
          '--headless',
          '--disable-gpu',
          // without a remote dubugging port, Google Chrome exits immediately
          '--remote-debugging-port=9222',
        ],
      }
    }

Now you need to replace the existing browser or add 'ChromeHeadless' option:

    browsers: ['Chrome','ChromeHeadless'],

in the same file.

Now, if you added a 2nd browser, you can say:

  $ ng test --browsers ChromeHeadless --watch=false

or just 

  $ ng test

if you only have one browser option.    

You can also create 'npm run' aliases in your package.json

e.g.:

  "scripts": {
    ... 
    "test": "ng test --browsers ChromeHeadless --watch=false --code-coverage=true",
    "test-debug": "ng test --browsers Chrome",    
  },

and then run as:

  $ npm run test 
and
  $ npm run test-debug


==============================================================

  Puppeteer provided Chromium for testing
  ***************************************

https://github.com/karma-runner/karma-chrome-launcher#headless-chrome-with-puppeteer

Chrome team made Puppeteer. It will automatically install Chromium for all platforms, so you can easily use it within your CI. Everything that you need, it's to install package and update your Karma config.

add these to karma.conf.js
             -------------

const ChromiumRevision = require('puppeteer/package.json').puppeteer.chromium_revision;
const Downloader = require('puppeteer/utils/ChromiumDownloader');
const revisionInfo = Downloader.revisionInfo(Downloader.currentPlatform(), ChromiumRevision);
process.env.CHROME_BIN = revisionInfo.executablePath;

karma.conf.js
-------------

// Karma configuration file, see link for more information
// https://karma-runner.github.io/0.13/config/configuration-file.html

const ChromiumRevision = require('puppeteer/package.json').puppeteer.chromium_revision;
const Downloader = require('puppeteer/utils/ChromiumDownloader');
const revisionInfo = Downloader.revisionInfo(Downloader.currentPlatform(), ChromiumRevision);
process.env.CHROME_BIN = revisionInfo.executablePath;

module.exports = function (config) {
  config.set({
    basePath: '',
    frameworks: ['jasmine', '@angular/cli'],
    plugins: [
      require('karma-jasmine'),
      require('karma-chrome-launcher'),
      require('karma-jasmine-html-reporter'),
      require('karma-coverage-istanbul-reporter'),
      require('@angular/cli/plugins/karma'),
      require('karma-mocha-reporter')
    ],
    client:{
      clearContext: false // leave Jasmine Spec Runner output visible in browser
    },
    coverageIstanbulReporter: {
      reports: [ 'html', 'lcovonly' ],
      fixWebpackSourcePaths: true
    },
    angularCli: {
      environment: 'dev'
    },
    reporters: config.angularCli && config.angularCli.codeCoverage
      ? ['mocha', 'coverage-istanbul']
      : ['mocha', 'kjhtml'],
    port: 9876,
    colors: true,
    logLevel: config.LOG_INFO,
    browsers: ['ChromeHeadless'],
    singleRun: false
  });
};

Available browsers
-------------------
Chrome
ChromeCanary
Chromium
ChromeHeadless (only on Chrome >= 59)
ChromeCanaryHeadless (only on Chrome >= 59)
Dartium





==============================================================

  TSLint Codelyzer
  ****************
                                         prefix

"directive-selector": [true, "attribute", "app", "camelCase"],
"component-selector": [true, "element",   "app", "kebab-case"],



==============================================================

  Angular AOT compiler
  ********************

Angular "ahead-of-time" compiler.
https://angular.io/docs/ts/latest/cookbook/aot-compiler.html
The Angular2 Compiler - Tobias Bosch
https://www.youtube.com/watch?v=kW9cJsvcsGo

Angular2 AOT with Webpack and Lazy Loading
http://www.dzurico.com/angular-aot-webpack-lazy-loading/

With AoT, the compiler runs once at build time using one set of libraries.
With JiT, it runs every time for every user at runtime using a different set
of libraries.

JIT compilation, also known as dynamic translation, is compilation done 
during execution of a program - at run time. When the user opens the browser,
the following steps are performed:

1. download the JS assets
2. angular bootstraps
3. angular goes thru the JiT compilation generating all the JS for each component
   of the application
4. the application gets rendered

In AoT, we prepare everything before and we don't need anything else to dynamically
compile the template:

-faster rendering
-fewer async requests
-smaller angular framework download size
-better security


================================================================================


  deploying with angular-cli
  **************************

ng build can specify both a build target (--target=production or --target=development) 
and an environment file to be used with that build (--environment=dev or --environment=prod). 
By default, the development build target and environment are used.

The mapping used to determine which environment file is used 
can be found in angular-cli.json:

"environments": {
  "source": "environments/environment.ts",
  "dev": "environments/environment.ts",
  "prod": "environments/environment.prod.ts"
}

These options also apply to the serve command. If you do not pass a value for environment, it will default to dev for development and prod for production.


# these are equivalent
ng build --target=production --environment=prod
ng build --prod --env=prod
ng build --prod  

================================================================================


## Deploying to Apache
   *******************

Suppose, you're about to deploy this app to an apache 2.2 instance to an 
Alias'ed path:

```
Alias /ng/ "/apps/angular-apps/"
<Directory /apps/angular-apps>
  Order allow,deny
  Allow from all
  AllowOverride All
</Directory>
```
Angular2 Router supports two techniques for managing browser's location and history:

1. PathLocationStrategy - the default "HTML 5 pushState" style
2. HashLocationStrategy - the "hash URL" style (for real old browsers)

To make `PathLocationStrategy` work on Apache, you will need to create an
`.htaccess` file in the same location as your index.HTML

Taking into consideration the above httpd.conf snippet, here's the `.htaccess` 
file content:

```
<IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteBase /ng/tour-of-heroes/
  RewriteRule ^index\.html$ - [L]

  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d

  # do not rewrite css, js and images
  RewriteCond %{REQUEST_URI} !\.(?:css|js|map|jpe?g|gif|png)$ [NC]

  RewriteRule . /ng/tour-of-heroes/index.html [L]
</IfModule>
```

Finally, generate the `prod` distribution for this application to be deployed
on the apache server using the following command:

```
$ ng build --prod --base-href /ng/tour-of-heroes/
```
This will ensure that the generated `index.html` file has `base href` that 
matches our target server configuration:

```
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Ng2TourOfHeros</title>
  <base href="/ng/tour-of-heroes/">

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
<link href="styles.622c1e2152786c612d9feac19a219d0e.bundle.css" rel="stylesheet"></head>
<body>
  <app-root>Loading...</app-root>
<script type="text/javascript" src="inline.d41d8cd98f00b204e980.bundle.js"></script>
<script type="text/javascript" src="styles.b2328beb0372c051d06d.bundle.js"></script>
<script type="text/javascript" src="main.19929f08046e175b7224.bundle.js"></script>
</body>
</html>
```
================================================================================

  exclude folder from code coverage
  *********************************

  "test": {
    "karma": {
      "config": "./karma.conf.js"
    },
    "codeCoverage": {
      "exclude": [
        "src/test/**/*"
      ]
    }
  },  


================================================================================

  use 'npm link' with angular-cli
  *******************************

either run 

  $ ng serve --preserve-symlinks

or update .angular-cli.json

  ...
  "defaults": {
    "styleExt": "scss",
    "component": {},
    "build": {
      "preserveSymlinks": true
    }
  }

if you have symlinks in the source tree.

Starting with Angular 5, you also need to include your linked library in 
tsconfig.json


  "include": [
    "src/**/*",
    "node_modules/your-library/index.ts",
  ]


**update**
according to this [issue](https://github.com/angular/angular-cli/issues/8284) the need to include your uncompiled TS library is not limited to symlinks or `npm link` use cases.   

This [angular blog](https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced) mentions angular 5 implementing stricter TypeScript standards: 

*"Previously if we detected a lazy loaded route and you were manually specifying a list of files or include in your tsconfig.json, we would automatically add these routes, but we now follow the TypeScript specification and no longer do this."*

The `tsconfig` files is what determines what TS files are compiled.  By default `./src/tsconfig.app.json` will only pick up files inside `src/`.   If you have a file outside source (like an included library of uncompiled TS source), it won't be picked up automatically by angular 5 cli.  Therefore, you need to add them explicitly to your tsconfig.

You can add your includes in either `./tsconfig.json`
or
to one or both (depending your need)
```
./src/tsconfig.app.json
./src/tsconfig.spec.json
```



================================================================================

  application paths
  ******************

Typescript has this `path mapping` feature
https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping

Loaders use mapping configurations to map module names to files at runtime.

tsconfig.json
-------------

Typescript supports the declaration of such mappings using "paths" property
in tsconfig.json.

{
  "compilerOptions": {
    "baseUrl": ".", // This must be specified if "paths" is.
    "paths": {
      "jquery": ["node_modules/jquery/dist/jquery"] // This mapping is relative to "baseUrl"
    }
  }
}

NOTE: "baseUrl" must be specified when using "paths" b/c this mapping 
is relative to "baseUrl".

This TypeScript feature allows us to avoid relative paths to create 
reference pointers that can be resolved for each application in their
tsconfig.json:


{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "@environment": [
        "./environments/environment.ts"
      ],
      "@services/*": [
        "./app/services/*"
      ]
    }
  }
}


With this in place, you can absolutely import from `@environment`:

import {environment} from '@environment';


Another example:

"compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "@directives/*": ["app/shared/directives/*"],
      "@services/*": ["app/shared/services/*"],
      "@models/*": ["app/shared/models/*"],
      "@assets/*": ["assets*"],
      "@components/*": ["app/components/*"]
    },
...
Example:
import { ShoppingItem } from "@models/shopping-item.model";


tsconfig.app.json
-----------------

There is just one more thing to do in an angular-cli project -- remove baseUrl 
from tsconfig.app.json which extends tsconfig.json and overwrites the baseUrl 
we've just provided in our tsconfig.json above thus breaking our pointers.

baseUrl is required if you use paths,.. and since currently there are no paths 
in tsconfig.app.json, removing baseUrl has no effect and solves the webpack 
build error:

ERROR in src/app/component-library/footer/footer.component.ts(2,29): error TS2307: Cannot find module '@environment'.
src/app/component-library/footer/footer.component.ts(3,25): error TS2307: Cannot find module '@deploy/build-info'.
src/environments/environment.ts(2,27): error TS2307: Cannot find module '@deploy/build-info'.

================================================================================

	ng update
	**********


5 -> 6
==========

https://stackoverflow.com/questions/48970553/want-to-upgrade-project-from-angular-v5-to-angular-v6
https://update.angular.io


Step 1: make sure node 8.9+ is installed
----------------------------------------

Step 2: install @angular/cli 6 globally
----------------------------------------

$ npm install -g @angular/cli@latest

	Angular CLI: 6.0.8
	Node: 8.11.3
	OS: linux x64
	Angular: 6.0.7

Step 3:  Install @angular/cli locally 
----------------------------------------

  If i'm on angular 5 project, my angular/cli version is probably somewhere here:

    "@angular/cli": "1.6.3",
    "@angular/compiler-cli": "^5.0.0",

  and for angular 6, I need it here:

    "@angular/compiler-cli": "^6.0.3",
    "@angular-devkit/build-angular": "~0.6.8",
    "typescript": "~2.7.2",
    "@angular/cli": "~6.0.8",

  So, before I run `npm install`, I modify package.json to the above and then run:    

	$ npm install @angular/cli


Step 4: migrate the old .angular-cli.json to new angular.json
---------------------------------------------------------------

	$ ng update @angular/cli


Step 5: update your angular framework packages to v6
----------------------------------------------------

	$ ng update @angular/core

Update Angular Material if you use it:

	$ ng update @angular/material


Other DEV dependencies:

  angular 5 project has the following dev dependencies:

    "@types/jasmine": "~2.5.53",
    "@types/jasminewd2": "~2.0.2",
    "@types/node": "~6.0.60",
    "codelyzer": "^4.0.1",
    "jasmine-core": "~2.6.2",
    "jasmine-spec-reporter": "~4.1.0",
    "karma": "~1.7.0",
    "karma-chrome-launcher": "~2.1.1",
    "karma-cli": "~1.0.1",							// gone in angular 6
    "karma-coverage-istanbul-reporter": "^1.2.1",
    "karma-jasmine": "~1.1.0",
    "karma-jasmine-html-reporter": "^0.2.2",
    "protractor": "~5.1.2",
    "ts-node": "~3.2.0",
    "tslint": "~5.7.0",

  angular 6 project bootstraped with `ng new` as of 7-4-2018:

    "@types/jasmine": "~2.8.6",
    "@types/jasminewd2": "~2.0.3",
    "@types/node": "~8.9.4",
    "codelyzer": "~4.2.1",
    "jasmine-core": "~2.99.1",
    "jasmine-spec-reporter": "~4.2.1",
    "karma": "~1.7.1",
    "karma-chrome-launcher": "~2.2.0",
    "karma-coverage-istanbul-reporter": "~2.0.0",
    "karma-jasmine": "~1.1.1",
    "karma-jasmine-html-reporter": "^0.2.2",
    "protractor": "~5.3.0",
    "ts-node": "~5.0.1",
    "tslint": "~5.9.1"       

  so you can update the project accordingly


Check
----------------------------------------

  At this point, your app may be able to run 

  	$ ng serve


Step 6: update RxJS
----------------------------------------

	RxJS v6 has major changes from v5.
	v6 brings backwards compatibility package rxjs-compat that will keep
	your applications working, but you should refactor your TS code so that
	it does not depend on rxjs-compat.

	To refactor TS code, run the following:

	$ sudo npm install -g rxjs-tslint
	$ rxjs-5-to-6-migrate -p src/tsconfig.app.json

  Once all of your dependencies have updated to RxJS 6, remove `rxjs-compat`
  as it increases the bundle size

  	$ npm uninstall rxjs-compat

  See RxJS Upgrade Guide
  https://github.com/ReactiveX/rxjs/blob/master/docs_app/content/guide/v6/migration.md


Finally: `ng serve`
-----------------------------------------




================================================================================
