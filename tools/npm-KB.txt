
	@@@@@@@@@@@

		npm

	@@@@@@@@@@@

================================================================================

	npm outdated

$ npm outdated

$ npm ls

$ npm-check-updates


difference between npm `install` and `update`
----------------------------------------------

npm install ignores an already-installed module with fuzzy versioning whereas npm update updates it.

Also, devDependencies are handled differently:

npm install installs or updates devDependencies unless the --production flag is added.
npm update will ignore devDependencies unless the -- dev flag is added.


================================================================================

	Getting NPM
	************

	Install nodejs on Ubuntu 16.04
	*************************

Use Current Release: At te last update of this tutorial, Node.js 8.0 is the current Node.js release available.

  $ sudo apt-get install python-software-properties
  $ curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
  $ sudo apt-get install nodejs
  $ node -v 
    v8.0.0
  $ npm -v 
    5.0.0


	updating
	********

Upgrading node first:

To upgrade node on ubuntu:

	$ sudo npm cache clean -f
	$ sudo npm install -g n
	$ sudo n stable | latest | lts  # (lts = long-term support)
	$ sudo ln -sf /usr/local/n/versions/node/<VERSION>/bin/node /usr/bin/node

if a newer minor `npm` version is available:

	$ sudo npm install -g npm


or specific version of npm

	$ npm install -g npm@x.x



	configuring
	***********


.npmrc
------

loglevel=info
registry=https://nexus-dev.domain.com:8443/nexus/content/groups/npm-all/
strict-ssl=false

To list config:

	$ npm config list -l



==============================================================================

	npmrc
	*****

https://www.npmjs.com/package/npmrc


Installing 
----------

$ npm install - g npmrc


Activate
---------

$ npmrc  // creates ~/.npmrcs/  directory and copies your current ~/.npmrc as `default` profile.


Creating new profile
---------------------

$ npmrc -c newprofile


==============================================================================

	Using NPM
	*********

==============================================================================



list installed packages
************************

	$ npm list -g --depth=0 [ | grep <package-name> ]

or 
	$ sudo npm list -g --depth=0 [..] # then npm check update will succeed

if you get `npm ERR! extraneous: ...` at the tail-end of npm list output
run
	$ sudo npm -g update
that fixed `extraneous` errors.


using npm-check-updates
-----------------------

$ sudo npm install npm-check-updates -g


Check which dependencies can be updated:

	$ npm-check-updates
	$ ncu

To only see certain dependencies:

	$ ncu -f gulp-sass	

to update package.json

	$ ncu -u

show version for a particular npm package:

	$ npm view <package-name> versions

	$ npm show <package-name> version

==============================================================================

	installing packages with npm
	*******************

npm Security
-----------------------------------

http://books.sonatype.com/nexus-book/reference3/npm.html#npm-security

By default any anonymous user has read access to the repositories and repository 
groups.

If anonymous access is disabled or write access is required for publishing a package, the user needs to authenticate to the repository manager. There are two methods to authenticate npm with your repository manager. 

!!!!===> Only one should be used at a time <===!!!!
***************************************************

    Option 1 - auth using Realm and Login
    -------------------------------------

  This authentication method requires the npm Bearer Token Realm. Simply add the realm to the active realms in the Realms feature of the Security menu from the Administration menu to activate it as documented in Section 6.2, “Realms”.

  Once the realm is activated, a user can establish the auth to repository with the
  npm login command:

    $ npm login --registry=https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/

  Provide your repository manager username and password as well as your email address when prompted. 

  Upon successful completion, a line for authentication of this combination is automatically added to your .npmrc configuration file for the specific repository.

  Further details on npm login can be found on the npm website:
  https://docs.npmjs.com/cli/adduser


Example:

$ npm login --registry=https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/

	npm info it worked if it ends with ok
	npm info using npm@4.1.2
	npm info using node@v7.6.0
	Username: (craiskin) 
	Password: (or leave unchanged) 
	Email: (this IS public) user@domain.com
	npm info attempt registry request try #1 at 11:26:51 AM
	npm http request PUT https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/-/user/org.couchdb.user:craiskin
	npm http 201 https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/-/user/org.couchdb.user:craiskin
	npm info adduser Authorized user craiskin
	Logged in as craiskin on https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/.
	npm info ok 


$ cat ~/.npmrc 

	loglevel=info
	strict-ssl=false
	registry=https://nexus.domain.com:8443/nexus/repository/npm-all/
	//nexus.domain.com:8443/nexus/repository/npm-thirdparty/:_authToken=5ee42ad0-435d-3c69-8fcb-f814058dba9a



    Option 2 - auth using Basic Auth
    --------------------------------

  In some instances you cannot use the realm and login method, for example if you have a username which includes capital letters (disallowed by npm login).

  In these you can still use npm by configuring it to use basic auth with your repository manager. This authentication method involves editing the .npmrc configuration file adding an encoded username and password as well as configuring authentication to always occur. It is considered the less flexible of the methods supported.

  The _auth variable has to be generated by base64-encoding the string of username:password. You can create this encoded string with the command line call to openssl e.g. for the default admin user:

    $ echo -n 'myuser:mypassword' | openssl base64

  Optionally you can generate a longer string on one line with the command:

    $ echo -n 'username:password' | openssl base64 -A  

  Other tools for the encoding are uuencode or, for Windows users, certutil. 
  See more at 
  http://books.sonatype.com/nexus-book/reference3/npm.html#npm-security

================================================================================

Publishing npm Packages
***********************


The npm publish command uses a registry configuration value to know where to publish your package. 
There are several ways to change the registry value to point at your hosted npm repository.


1. use npm config to set the registry globally:

	npm config set registry http://nexus.dsv.myhost/nexus/repository/npmjs


2. use npm config to set the registry for the package scope:

	npm config set @<your scope here>:registry http://nexus.dsv.myhost/nexus/repository/


3. configure your package.json with a publish config:

	{
	  ...
	  "publishConfig": {
	    "registry": "http://nexus.dsv.myhost/nexus/repository/npmjs"
	  },
	  ...
	}

4. use npmrc to configure the registry

	registry=http://nexus.dsv.myhost/nexus/repository/npmjs




Since .npmrc typically contains the group containing multiple npm registries...

a simple way to override this value is to provide a registry to the publish command:

  $ npm publish --registry https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/

Alternately, you can edit your package.json file and add a publishConfig section:

  "publishConfig" : {
    "registry" : "https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/"
  },

Detailed info about package creation at:

  https://docs.npmjs.com/cli/publish


Example:

 $ npm publish

npm info it worked if it ends with ok
npm info using npm@4.1.2
npm info using node@v7.6.0
npm info lifecycle cloudentityjs@1.1.1~prepublish: cloudentityjs@1.1.1
npm info lifecycle cloudentityjs@1.1.1~prepare: cloudentityjs@1.1.1
npm info lifecycle cloudentityjs@1.1.1~prepublishOnly: cloudentityjs@1.1.1
npm info attempt registry request try #1 at 11:27:54 AM
npm http request PUT https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/cloudentityjs
npm http 200 https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/cloudentityjs
+ cloudentityjs@1.1.1
npm info lifecycle cloudentityjs@1.1.1~publish: cloudentityjs@1.1.1
npm info lifecycle cloudentityjs@1.1.1~postpublish: cloudentityjs@1.1.1
npm info ok 



Deprecating npm Packages
------------------------

Once your packages have been pushed to an npm hosted repository, you can mark them as deprecated. This is useful when a newer version of the package is available, and you want to warn people that the old package has reached end of life or you want to avoid usage and warn your users for some other reason.

The npm deprecate command uses a registry configuration value to inform where the package lives. To deprecate an existing package, use a command like the following:

  $ npm deprecate --registry https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/ testproject1@0.0.1 "This package is deprecated"

If you change your mind, you can reverse this action using the same command. To undeprecate a package, pass an empty string to the deprecate command:

  $ npm deprecate --registry https://nexus.domain.com:8443/nexus/repository/npm-thirdparty/ testproject1@0.0.1 ""


==============================================================================

	installing packages 
	*******************

add dependency 	
---------------

	$ npm install --save somepackage

adds something like this into package.json:

	"dependencies": {
	    "somepackage": "^2.1.0"
	}	

add dependency with exact version:

	$ npm install --save --save-exact somepackage@1.1.1


==============================================================================

	switching between npm/node versions with n
	******************************************

Install n

  $ sudo npm install -g n

Install/Activate Versions

  $ sudo n 7.6.0
  $ sudo ln -sf /usr/local/n/versions/node/<VERSION>/bin/node /usr/bin/node

List installed versions

  $ n 

Install (latest | stable | lts)

  $ sudo n stable | latest | lts 
  $ sudo ln -sf /usr/local/n/versions/node/<VERSION>/bin/node /usr/bin/node

Install latest stable

  $ sudo n stable
  $ sudo ln -sf /usr/local/n/versions/node/<VERSION>/bin/node /usr/bin/node



Removing versions

 $ sudo n rm 8.0.0

Removing all version except for the current one

 $ sudo n prune


==============================================================================


>npm --version
2.7.4

	How to find the version of an installed npm package?
	****************************************************

List local packages
-------------------

> npm list	 # for local packages

List global packages
--------------------
> npm list -g # for global

> npm list -g --depth=0
npm info it worked if it ends with ok
npm info using npm@2.7.4
npm info using node@v0.12.2
C:\Users\craiskin\AppData\Roaming\npm
├── bower@1.4.1
├── dalek-cli@0.0.5
├── dalekjs@0.0.9
├── generator-angular@0.11.1
├── generator-bootstrap-kickstart@1.2.2
├── generator-bootstrap-less@3.2.1
├── generator-foundation-five@0.1.0
├── generator-karma@1.0.0
├── generator-mocha@0.1.7
├── generator-webapp@0.5.1
├── generator-zf5@0.9.8
├── grunt-cli@0.1.13
└── yo@1.4.6

npm info ok

$ npm list -g | grep grunt

View available versions
-----------------------

$ npm view angular-cli versions

'1.0.0-beta.11-webpack',
'1.0.0-beta.11-webpack.2',
'1.0.0-beta.11-webpack.3',
'1.0.0-beta.11-webpack.4',
'1.0.0-beta.11-webpack.5',
'1.0.0-beta.11-webpack.6',
'1.0.0-beta.11-webpack.7',
'1.0.0-beta.11-webpack.8',
'1.0.0-beta.2-mobile',
'1.0.0-beta.2-mobile.1',
'1.0.0-beta.2-mobile.2',
'1.0.0-beta.2-mobile.3',
'1.0.0-beta.2-mobile.4' ]


if the list is too long..

$ npm view typescript@'>1.8.0' | grep 1.9


==============================================================================

	npm-check-updates
	*****************

cli tool to upgrade your package.json or bower.json dependencies to the latest versions, regardless of existing version constraints.

npm-check-updates maintains your existing semantic versioning policies, i.e. it will upgrade your 

	"express": 	"^4.11.2"

to 

	"express": 	"^5.0.0"	

To show dependencies for the project in the current directory:	

$ ncu

 @angular/common                      2.0.0-rc.4  →     2.0.0-rc.5 
 @angular/compiler                    2.0.0-rc.4  →     2.0.0-rc.5 
 @angular/core                        2.0.0-rc.4  →     2.0.0-rc.5 
 @angular/forms                            0.2.0  →          0.3.0 
 @angular/http                        2.0.0-rc.4  →     2.0.0-rc.5 
 @angular/platform-browser            2.0.0-rc.4  →     2.0.0-rc.5 
 @angular/platform-browser-dynamic    2.0.0-rc.4  →     2.0.0-rc.5 
 @angular/router                    3.0.0-beta.2  →     3.0.0-rc.1 
 reflect-metadata                          0.1.3  →          0.1.8 
 rxjs                               5.0.0-beta.6  →  5.0.0-beta.11 
 systemjs                                0.19.26  →        0.19.37 
 zone.js                                  0.6.12  →         0.6.17 
 codelyzer                                0.0.20  →         0.0.28 
 ember-cli-inject-live-reload              1.4.0  →          1.4.1 
 jasmine-spec-reporter                     2.5.0  →          2.7.0 
 karma                                   0.13.22  →          1.2.0 
 karma-chrome-launcher                     0.2.3  →          2.0.0 
 karma-jasmine                             0.3.8  →          1.0.2 
 protractor                                3.3.0  →          4.0.4 
 ts-node                                   0.5.5  →          1.3.0 
 tslint                                   3.11.0  →         3.15.1 
 typings                                   1.3.1  →          1.3.2 

Run with -u to upgrade package.json

==============================================================================

npm	ERR! extraneous

means a package is installed but is not listed in your project's package.json.

If you're listing packages that have been installed globally, it's going to give you a lot of extraneous errors that can be simply ignored because most things installed globally will not be in your project's 'package.json'


==============================================================================

	troubleshooting
	***************

turn up verbosity to max

	> npm -ddd install -g bower


clean cache

	> npm cache clean


==============================================================================

	npm and Node.js behind a corporate proxy
	****************************************

npm uses a configuration file and it can be added to via the command line

	npm config set ....

The key to getting it right is the spelling of the settings.

Getting npm to work behind a proxy requires setting the proxy and https-proxy settings. The key is noticing the - (dash) is not an _ (underscore).


	> npm config set proxy http://proxy.company.com:8080
	> npm config set https-proxy http://proxy.company.com:8080

what was also suggested in the context of

	> npm install -g generator-bootstrap-kickstart

npm config set proxy http://localhost:3128
npm config set https-proxy http://localhost:3128
npm config set registry "http://registry.npmjs.org/"
npm config set strict-ssl "false"

so you .npmrc looks like

proxy=http://localhost:3128/
https-proxy=http://localhost:3128/
loglevel=info
registry=http://registry.npmjs.org/
strict-ssl=false

==============================================================================

npm cache clean
npm uninstall generator-webapp && npm install generator-webapp

==============================================================================
	/usr/bin/env: 'node' no such file or directory

	$ node -v
	the program 'node' is not currently installed

	$ sudo apt install nodejs-legacy

==============================================================================

	npm-scripts
	***********

npm supports the "scripts" property of the packages.json

  "name": "angular2-todo-app",
  "version": "0.0.0",
  "license": "MIT",
  "angular-cli": {},
  "scripts": {
    "start": "ng serve",
    "postinstall": "typings install",
    "lint": "tslint \"src/**/*.ts\"",
    "test": "ng test",
    "pree2e": "webdriver-manager update",
    "e2e": "protractor"
   }    

So you can run:

$ npm [start | postinstall | list | test | pree2e | e2e ]


==============================================================================

	install node/npm by building from source
	****************************************

1. download source

	node-v6.9.1.tar.gz

   extract

    $ tar zxvf node-v6.9.1.tar.gz

Installing on Enterprise Linux (RHEL / CentOS)
----------------------------------------------

https://www.digitalocean.com/community/tutorials/how-to-compile-node-js-with-npm-from-source-on-centos-6


RHEL 6 / CentOS 6

Prerequisites:

# yum install gcc gcc-c++ automake autoconf libtoolize make

$ ./configure
$ make

	NOTE: compile will fail if you gcc/g++ version is <= 4.7
	      need 4.8 or above.

	      SEE below how to get gcc/g++ 4.8 ..

# make install

or

$ sudo make install




==============================================================================

	installing gcc 4.8 on RHEL6 / CentOS 6
	**************************************

https://gist.github.com/stephenturner/e3bc5cfacc2dc67eca8b

First, verify which version of CentOS you're using:

$ cat /etc/centos-release
CentOS release 6.7 (Final)
Import CERN's GPG key:

	# sudo rpm --import http://ftp.scientificlinux.org/linux/scientific/5x/x86_64/RPM-GPG-KEYs/RPM-GPG-KEY-cern

Save repository information as /etc/yum.repos.d/slc6-devtoolset.repo on your system:

	# wget -O /etc/yum.repos.d/slc6-devtoolset.repo http://linuxsoft.cern.ch/cern/devtoolset/slc6-devtoolset.repo

Install:

	# sudo yum install devtoolset-2	

Enable the environment:

	# scl enable devtoolset-2 bash

	or 

	$ source /opt/rh/devtoolset-2/enable

Test:

	$ gcc --version
	gcc (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)
	...

	$ g++ --version
	g++ (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)
	...

	$ gfortran --version
	GNU Fortran (GCC) 4.8.2 20140120 (Red Hat 4.8.2-15)
	...

	Optional: Permanently enable scl toolchain by putting this in your .bashrc (warning: don't try to use the scl enable devtoolset-2 bash command from before in your .bashrc. This spawns a new bash shell, and if that's in your .bashrc, it creates a new shell, which loads your .bashrc, which creates a new shell, etc.)

	source /opt/rh/devtoolset-2/enable




==============================================================================

	enable HTTPS in nodejs express server
	*************************************

not in webpack-dev-server ... 


https://www.sitepoint.com/how-to-use-ssltls-with-node-js/


generate cert
-----------------

1. The first step is to create a private key. As an example we can use the following command, generating a file called server.enc.key.

	$ openssl genrsa -des3 -out server.enc.key 2048

2. Once we have our key generated we need to issue a certificate signing request. A request can be generated using the following command.

	$ openssl req -new -key server.enc.key -out server.csr

The created CSR is stored in the server.csr file. We will be required to self-sign this file.

Until this point it is required to enter the pass-phrase when using the key from the server.enc.key file. Since we will only use the certificate internally (and for testing purposes) we can think about removing the password protection. Removing the triple DES encryption from the key is done with the following command.

	$ openssl rsa -in server.enc.key -out server.key

3. Finally we have to self-sign the certificate. The self-signed certificate will generate an error in browsers. The reason is that the signing certificate authority is unknown and therefore not trusted. To generate a temporary certificate server.crt we need to issue the following command:

	$ openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt


install https for your project
------------------------------

	$ npm install --save-dev https

enable ssl
------------------------------

	var fs = require('fs');
	var https = require('https');
	var app = require('express')();
	var options = {
	   key  : fs.readFileSync('server.key'),
	   cert : fs.readFileSync('server.crt')
	};

	app.get('/', function (req, res) {
	   res.send('Hello World!');
	});

	https.createServer(options, app).listen(3000, function () {
	   console.log('Started!');
	});



==============================================================================

	npm package.json and package-lock.json
	**************************************

02.2018 update
Clearly, we are not the only ones who have been wondering how the heck this 
package.json and package-lock.json are supposed work together. 
Below is a sampling of issues to make us feel better

https://github.com/npm/npm/issues/16866
https://stackoverflow.com/questions/45022048/why-does-npm-install-rewrite-package-lock-json
https://github.com/npm/npm/issues/18103
https://github.com/npm/npm/issues/17979#issuecomment-332701215

Recently (circa npm 5.4.2) some of the weird interplay between package.json and package-lock.json has been fixed:



  1. If you have a package.json and you run npm i we generate a package-lock.json from it.

  2. If you run npm i against that package.json and package-lock.json, 
     the latter will never be updated, even if the package.json would be happy 
     with newer versions.

  3. If you manually edit your package.json to have different ranges and run 
     npm i and those ranges aren't compatible with your package-lock.json then 
     the latter will be updated with version that are compatible with your package.json. 
     Further runs of npm i will be as with 2 above.


With that, I suggest:

a) we update to npm 5.6.x as build engine

b) as the interplay between package.json and package-lock.json is now supposed to be more predictable, we should check in package-lock.json into our git repo and observe the behavior.

c) if we manually edit package.json, package-lock.json is now supposed to be updated accordingly, 
and we should examine the changes and confirm this behavior.

==============================================================================

	npm shrinkwrap
	**************

One of the main objectives of software engineering discipline is making engineering reproducible. However, the reality is that software is constantly changing, and each package has its own constraints about what other packages it requires to run (its dependencies). npm keeps track of these constraints, and authors express what kind of changes are compatible using semantic versioning, allowing authors to specify that their package will work with even future versions of its dependencies as long as the semantic versions are assigned properly.

This does mean however that when you run npm install, there is no guarantee that you will get the same set of code now that you would have gotten an hour ago, or that you would get if you were to run it again an hour later. You may get a bunch of fixes now that weren't available an hour ago. This is great during development, where you want to keep up with changes upstream. But it's definitely not what you want for production deployment, though, where you want to validate whatever bits you're actually shipping.

short version
-------------
As of 10.16.2017

	1. our angular project (and angular/cli) are locked into npm v4.1.2
	2. only mechanism available with npm v4 is npm-shrinkwrap.json
	3. if you're wondering, --save-exact isn't a solution to this problem, see below..
	4. npm v5 introduces package-lock.json which does not replace npm-shrinkwrap and essentially uses the same mechanism
	5. yarn is arguably superior however it is a package manager running on top of npm and therefore requires modifications to the global build environment on the CI servers. 

workflow
--------

To shrinkwrap an application for the first time

1. run npm shrinkwrap --dev to generate initial version of npm-shrinkwrap.json
2. commit npm-shrinkwrap.json to git

To update dependencies in a shrinkwrapped application

I've seen a number of issues with npm shrinkwrap reported by other people and exerienced them myself to conclude that the most reliable approach for updating an existing shrinkwrapped application is to remove and re-create the shrinkwrap. This will not provide me with a diff of npm-shrinkwrap.json file, however, I've found the diffs of that file to be confusing and inconsistent. My source of truth for dependency declaration is still package.json, so that is what I'll focus on.

Therefore, here is the workflow to update an existing shrinkwrapped application:

1. rm npm-shrinkwrap.json
2. update dependency versions in package.json by editing it directly or running npm isntall .. commands
3. optionally (but you may choose to), run npm prune or rm -rf node_modules before running npm install
4. validate that the application works as expected with the new dependencies.
5. run npm shrinkwrap --dev to generate new npm-shrinkwrap.json and commit it.

Sources:
https://gist.github.com/alanhogan/a32889830384f4e190fa


==============================================================================
	source-map-explorer
	*******************

$ sudo npm install -g source-map-explorer

$ ng build --sourcemaps true
$ source-map-explorer dist/vendor.bundle.js

or for prod build:

$ ng build --prod --sourcemaps true
$ source-map-explorer dist/vendor.bundle.js dist/vendor.bundle.js.map



==============================================================================

	npm link
	*************

package linking is a two-step process

1. `npm link` in a package folder will create a symlink in the global folder

		{prefix}/lib/node_modules/<package>

	that links to the package where the `npm link` command was executed.

	it will also link any bins in the package to 

		{prefix}/bin/{bin}

2. in some other location, `npm link package-name` will create a symbolic link
   from globally installed "package-name" to "node_modules/" of the current 
   folder.

   note: "package-name" is taken from `package.json`, not from directory name.


 Example:

 	$ cd src/app/component-library

 This is the directory where your index.ts for your library lives.

 	$ sudo npm link 					# create a global link

 The above creates a link:

 /usr/local/lib/node_modules/ng-comp-lib -> /home/user/projects/ng-comp-lib/src/app/component-library

 Now, `cd` to the "consumer" project:

 	$ cd /home/user/projects/ng-comp-lib-consumer
 	$ npm link ng-comp-lib

 This will create a link in this project'c `node_modules`:

	npm link ng-comp-lib
	npm info it worked if it ends with ok
	npm info using npm@5.6.0
	npm info using node@v8.9.4
	npm info build /home/user/projects/ng-comp-lib-consumer/node_modules/ng-comp-lib
	
	/home/user/projects/ng-comp-lib-consumer/node_modules/ng-comp-lib -> /usr/local/lib/node_modules/ng-comp-lib -> /home/user/projects/ng-comp-lib/src/app/component-library
	npm info ok 



 Note: the link should be to the package name, not the directory name
 for that package.

 You can shortcut the two steps in one:

 	$ cd ~/projects/node-bloggy 		# go into the dir of your main project
 	$ sudo npm link ../node-redis		# link the dir of your dependency

 The second line is equivalent of doing:

 	$ (cd ../node-redis; sudo npm link)
 	$ sudo npm link node-redis

 That is it first creates a global link, and then links the global installation 
 target into your projects `node_modules` folder.



==============================================================================

	npm snapshots?
	*************

An NPM registry has no native concept of snapshot unlike Maven registries.

snapshots are pre-release versions of modules that can be repeatedly published to a repository.  In a Maven project, all you have to do is to declare your version as x.x.x-SNAPSHOT, and the Maven repository will accurately manage which deployment is the most recent, and serve that version any time a Maven build requests version x.x.x-SNAPSHOT.

mimic npm snapshots
-------------------
we can mimic Maven SNAPSHOT behavior using the following strategy:


Publish your modules with -SNAPSHOT suffix but append an incremented number each time you publish:  -SNAPSHOT.#

	1.0.0-SNAPSHOT.1
	1.0.0-SNAPSHOT.2
	etc..

The reason for the additional incremented number is that the NPM registry will not allow to redeploy over the existing version number.   Even npm publish -f will no longer allow you to do that.

dependency declaration
----------------------

In the consuming application, you can declare your dependency as 

	"^1.0.0-SNAPSHOT"

and NPM will fetch the latest version, 1.0.0-SNAPSHOT.2, for instance.

This is because 

	1.0.0-SNAPSHOT < 1.0.0-SNAPSHOT.1 < 1.0.0-SNAPSHOT.2


Caveat:  do not expect this 1.0.0-SNAPSHOT.2  < 1.1.0-SNAPSHOT.0 to work.   This is because SemVer requires the same [major, minor, patch] tuple when using a pre-release tag as described in the docs.

Therefore, when you publish a new prerelease version:

	1.0.1-SNAPSHOT.0

you will also need to change the dependency declaration to

	"^1.0.1-SNAPSHOT"

==============================================================================

	npm tags

	https://dev.to/andywer/how-to-use-npm-tags-4lla

	When we run 



$ npm install <package>

latest tag is used implicitly to resolve the right version number.

By the same token, when we run 

$ npm publish
a npm tag is either created or updated, and it defaults to latest unless explicitly state something otherwise.


using npm tags


with the help of npm tags, we can share different versions of our library 

For production application builds, we would advise DEV teams to use 


$ npm install <package-name>@stable

and of course, they can always install a specific version of our library if they know it.. 
however they can find out but simply running


$ npm show <package-name>

to obtain information on stable , latest and next versions available.

Beta developers/tester would run



$ npm install <package-name>@next
to obtain the latest  “BETA” release, or 


 $ npm install <package-name>@latest

to obtain the latest “BETA”  SNAPSHOT version.


==============================================================================

	NPM paralell task but wait until resource is available
-------------------------------------------------------


https://stackoverflow.com/questions/46609152/npm-run-parallel-task-but-wait-until-resource-is-available-to-run-second-task


"scripts": {
    "start": "concurrently -k -n \"DB,API,WEB\" -c \"blue,magenta,yellow\" \"npm run start-db\" \"npm run start-api\" \"npm run start-web\"",
    "start-db": "myDbServerCmd",
    "start-api": "wait-on tcp:27017 && myApiServerCmd",
    "start-web": "myFrontServerCmd",
}


https://github.com/open-cli-tools/concurrently

https://github.com/jeffbski/wait-on



==============================================================================


