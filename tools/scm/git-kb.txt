
	useful git commands
	*******************

http://orga.cat/posts/most-useful-git-commands


Force using local user per repo
-------------------------------

	# Require setting user.name and email per-repo:
	$ git config --global user.useConfigOnly true

	# Remove email address from global config:
	$ git config --global --unset-all user.email

set repo specific 
--------------------------

	$ git config --local user.name " ... "
	$ git config --local user.email " ... "

to verify

	$ cat .git/config

credential helper
-----------------

!! credential helper currently does not support different identities per URI
Therefore, you can choose to have global credential.helper cache one identity,
and disable credential.helper in other repos using other identitiy

$ cd <my-repo-using-uncached-identity>
$ git config --local credential.helper ""

This will create `.git/config` with 

[credential]
    helper = 



See your settings
------------------

git config --list

================================================================================

	proxy
	*****

error 407 from proxy after CONNECT
----------------------------------

	git config --global http.sslVerify false
	git config --global https.sslVerify false
	git config --global http.proxy http://user:pass@yourproxy:port
	git config --global https.proxy http://user:pass@yourproxy:port

or set up URL-specific proxes (see below)

note: URL encode pass if it contains special characters


git proxy pass
---------------

you can configure proxy on a per-remote basis:

	$ git config --local --add remote.origin.proxy "proxy.hostname.com:8080"

or you can unset proxy 

	$ git config --local --add remote.origin.proxy ""

================================================================================
	

show proxy config

	$ git config --global --get-regexp http.*

or local config

	$ git config --get-regexp http.*

set global proxy
----------------

	$ git config --global http.proxy http://proxyUsername:proxyPassword@proxy.server.com:port

or specific domain

git config --global http.https://domain.com.proxy http://proxyUsername:proxyPassword@proxy.server.com:port
git config --global http.https://domain.com.sslVerify false

url specific proxy

	git config --global http.https://domain.com.proxy http://proxyUsername:proxyPassword@proxy.server.com:port

that would result in ~/.gitconfig

	[http]
	[http "https://domain.com"]
		proxy = http://proxyUsername:proxyPassword@proxy.server.com:port


SSL protocol errors
--------------------

	$ git -c http.sslVerify=false clone https://domain.com/path/to/git
or set permanently
	$ git config http.sslVerify false
or per domain
	$ git config --global http.https://domain.com.sslVerify false

	[http]
	[http "https://domain.com"]
		proxy = http://proxyUsername:proxyPassword@proxy.server.com:port
		sslVerify = false


unset proxy or ssl stuff
-------------------------

git config --global --unset http.proxy
git config --global --unset http.https://domain.com.proxy

git config --global --unset http.sslVerify
git config --global --unset http.https://domain.com.sslVerify

================================================================================



git add
********

"git add -A" is equivalent to 

	$ git add .; git add -u

"git add -A" is a handy shortcut for doing both.	

NOTE: `git add` === `git add -A` as of Git v.2.x


git commit -am 
***************

	automatically stage all tracked, modified files before the commit
	WILL NOT add unstaged new files (this is what 'git add -u' does..)

	remove files from unpushed commit
	----------------------------------

	so you added a file in you recent commit that shouldn't have been there.. 

		$ git rm --cached .idea/workspace.xml
		# stage .idea/workspace.xml for removal, but leave it on disk

		$ git commit --amend -CHEAD
		# amend the previous commit with the above change(s)

		$ git push

		# or add a .gitignore 

		$ echo "/.idea" > .gitignore
		$ git add -A
		$ git commit -m "add .gitignore"
		$ git push
		# push rewritten modified commit




	git fetch
***************************

Fetch all the branches from the repository.  This also downloads all of the required commits and files from the other repo..

If you already have a remote alias setup with remote URL:

	$ git fetch <remotename>

Only fetch the specified branch:

	$ git fetch <remote> <branch>



Check differences between local and remote branches
***************************************************

One important thing to remember -- remote branches are also stored locally and therefore need to be updated when running commands on them.  To see that, look at file in:

    .git/refs/heads/ [for local branches]
    .git/refs/remotes/ [for tracking branches]

	$ git fetch origin
	$ git diff master origin/master

(after fetch) To see differences in commits between local and remote branch:

	$ git log master..origin/master
	

   
push existing repo to new and different repo server   
================================================== 

1. Create a new repo at github.
2. Clone the repo from fedora hosted to your local machine.
3. $ git remote rename origin upstream
4. $ git remote add origin URL_TO_GITHUB_REPO
5. $ git push origin master

Now you can work with it just like any other github repo. 
To pull in patches from upstream, simply run 

$ git pull upstream master && git push origin master

how to change git remote
========================

$ git remote -v
$ git remote set-url origin [new URL]


working with branches
**********************

	$ git checkout -b <new-branch-name>

		creates and checks out 'new-branch-name'		
		-b = convenience option telling git to run `git branch` before
		running checkout

	$ git checkout -b <new-branch> <existing-branch>

		same as above but base the new branch off of <existing-branch>		
		instead of current branch

	$ git push -u origin <new-branch-name>

		pushes the newly-created branch to origin and sets up tracking..

	$ git diff --name-status origin/master origin/develop

		compares remote branches

    # to delete a branch

    $ git checkout develop
    [you may want to merge first?]	
    $ git branch -d <new-branch>

    To delete remote branch

    $ git push origin --delete <branch-name>

working with remote branches
****************************

	# set up remote for local repo without one

		# on branch "master"

		$ git remote -v
		$ git remote add origin https://github.com/SharedComponents/ess-data-access-dw.git
		$ git  branch --set-upstream-to=origin/master master
		$ git push [origin master]



	# get tracking information on local branches:

		$ git branch -vv

		* develop 5ad292b [origin/develop] added try-with-resources to version resource
		  master  0fbb96a [origin/master: behind 1] project scaffold


    # to check out and track a remote branch (that you don't have yet)

    	$ git fetch origin  			# to pull all remote branch info into your repo
    	$ git checkout <branch-name>

    # in older versions you had to say:

    	$ git checkout --track origin/<remote_branch>

    # to prune tracking branches that are no longer on the remote

  		$ git remote prune origin


    related: maven versions
    ------------------------

      	mvn versions:set -DnewVersion=0.3-RC

	to save your changes
	  
	  	mvn versions:commit

	if you made a mistake

	  	mvn versions:revert  


tag
***************************

create tag

	$ git tag -a v1.0.0 -m "tagging release 1.0.0"


push tags

	$ git push --tags

		or a single tag

	$ git push origin <tag_name>	

		or 

	$ git push --follow-tags // will push annotated tags only

		aslo: push.followTags = true	


list your tags

	$ git tag

list remote tags 

	$ git ls-remote --tags


Search for tags with a particular pattern

	$ git tag -l "v1.8.5*"		

get info about a tag

	$ git show v1.4

check out a tag into a (tmp) branch e.g. for review

	$ git checkout -b [branch-name] [tagname]
	$ git checkout -b version2 v2.0.0	

which branch contains tags?

	$ git branch --contains v1.0

	for the fetched branches (branches in remotes namespace):

	$ git branch -a --contains <tag>
	$ git branch -a --contains <commit>

Which commit a tag refers to?

	If you can find which commit a tag refers to:

		$ git rev-parse --verify v1.0
		53ad8477e0318f9d9a5ac64f5a11cb0650bf17d9

	then you can find which branch contains that commit:

		$ git branch --contains <commit>

		$ git branch --contains 53ad8477e0318f9d9a5ac64f5a11cb0650bf17d9
		* master

delete local tags

	$ git tag --delete tagname
		e.g 
	$ git tag --delete v1.0

delete remote tags

	$ git push --delete origin v1.0


merge
***************************

	# start new feature
	git checkout -b new-feature master

	# do work
	git add <changes>
	git commit -m "new feature changes"

	# merge in the new-feature branch into master
	git checkout master
	git merge new-feature

	# delete the feature branch
	git branch -d new-feature

	# delete remote feature branch (if one exists)
	git push origin --delete feature-branch
	e.g.
	> git branch -r
		origin/distro-assembly-module
	> git push origin -- delete distro-assembly-module # note, omitting "origin/"



diff
***************************

	merge preview
	-------------

A way of showing what merge would actually look like.

	$ git checkout master; git merge --no-ff --no-commit develop; git diff

You can throw away the merge after you've looked at it with

	$ git reset --hard


	comparing local and remote branches
	-----------------------------------

	$ git branch  // to make sure I'm on the right branch
	$ git status  // suppose I'm on develop branch
	
	$ git fetch  // updates my local definition of the remote branch
	$ git diff origin/develop
or explicitly
	$ git diff <local branch> <remote-tracking-branch>
e.g.
	$ git diff develop origin/develop
	
Another option (to be verified)
	
	$ git diff <remote-tracking-branch> <local branch>
	
this shows what is going to be dropped and what is going to be added if I push the local branch.	

Comparing commit differences between local and remote branches
--------------------------------------------------------------

You'd have fetch first if you haven't already.. and then

	$ git fetch origin

	$ git log master..origin/master

	


stash
***************************

	$ git stash 		// push a new stash onto the stack
	$ git stash list 	// list changes stored on the stack

	$ git stash pop		// re-apply previously stashed changes
						// default: most recent change
or 
	$ git stash apply 	// re-apply stashed changes AND keep them in your stash

	$ git stash save "config temp changes"  // annotate stash
	$ git stash pop stash@{2} 				// re-apply stash by id

cleaning

	$ git stash drop stash@{1}
or
	$ git stash clear


================================================================================

	rebase with squash commits
	**************************

NOTE: 	Squash the newer into the older commit rather than the older into the newer one, even if you feel the newer one is "the one you want to keep". 



You are on feature branch.
You've completed the work on your feature and have N WIP commit messages.
You want to squash all those commit messages into one BEFORE merging into develop branch.
You had not intermediate merges from develop into your feature branch.

	you are on my-feature-branch

	$ git log --pretty=oneline
	$ git rebase -i develop
		- change all but one commit to "pick" .. the rest are 'squash'
		  this should be the TOP one..
		- do NOT remove any lines - that commit will be LOST if you do
		- you can either 'reword', or 'pick' and change the commit message
	$ git checkout develop
	$ git merge my-feature-branch
	$ git branch -d my-feature-branch

note: if you had the remote tracking branch set up for your feature branch, you'll have to do this first, before deleting the local feature branch:

	$ git push origin --delete my-feature-branch


	if rebase goes bad..
	--------------------

	$ git rebase --abort		



================================================================================

	untrack / ignore files that have been committed to a git repo
	*************************************************************

To untrack a single file:

	$ git rm --cached <filename>

To untrack every file that is now in your .gitignore:

	$ git rm -r --cached .
or specific dir
	$ git rm -r --cached .idea

Then just run 

	$ git add .

and commit:

	$ git commit -m ".gitignore is now setup"	


To undo `git rm --cached <filename>` use:

	$ git add <filename>	

================================================================================

	add existing project to GitHub
	******************************

$ git init
$ git add .
$ git commit -m "First commit"
$ git remote add origin <remote repo URL>
$ git push origin master

================================================================================

	move specific commit from one branch to another
	***********************************************

A have repository with two branches.
Master branch commits:

	c1, c2, c3, c4, c5, c6, c7, ..., c15, ...

Staging Branch commits:

	c1, c2, c3, c4, c5, c6, c7

I want to move all commits from Master branch after c7 to staging branch
and then revert Master branch.

A: 

git checkout staging
git merge master
git checkout master
git reset --hard c7-hash


================================================================================

	navigate between commits
	************************

$  git log --pretty=oneline

639114adcdbbdc57ee4f747792b22d8f48e03dad (HEAD -> master, origin/master, origin/HEAD) update readme
c2a133b5098309df497309de8af50cceb8c41601 refactor application to use ngrx4
42405a88a7f0caed66c7c858632d9751737b1fdb ad-hoc fixes
41db9537517f3e8beec4eda09a6c11720423420c init commit

$ git checkout 639114adcdbbdc57ee4f747792b22d8f48e03dad
Note: checking out '639114adcdbbdc57ee4f747792b22d8f48e03dad'.

	You are in 'detached HEAD' state. You can look around, make experimental
	changes and commit them, and you can discard any commits you make in this
	state without impacting any branches by performing another checkout.

	If you want to create a new branch to retain commits you create, you may
	do so (now or later) by using -b with the checkout command again. Example:

	  git checkout -b <new-branch-name>

	HEAD is now at 639114a... update readme

To return to master

$ git checkout master




================================================================================
	GitHub
================================================================================

	create GitHub Pages gh-pages branch
	***********************************

To create "gh-pages" orphaned branch in existing repo
-----------------------------------------------------

$ cd my-project
$ git checkout --orphan gh-pages
$ git rm -rf .  # to remove any existing content
$ cp -R /some/directory/docs/* .  # also, create .gitignore if needed
$ git add -A
$ git commit -m "seed gh-pages branch"
$ git push -u origin gh-pages	

your gh-pages site will be published on 

	https://<github-user-name>.github.io/<your-repo-with-gh-pages>/



	close issue with magic text in PR
	*********************************

Suppose you're fixing issue #234.  Put text 'fixes #234' in the description of your PR (or anywhere in the comment on the PR).  Merging the PR will automatically close that issue.



	linking to comments
	*******************

Click the date/time next to the name in the comment header - that is how you link to that comment.



	link to code
	************

to link to a specific line of code, click the line number next to the code in question. The URL is updated witht he line number.

if you hold Shift and click another line, the URL is updated again, and now you've highlighted a range of lines.

hold on, that's  pointing to the current branch.  what if the file changes?
Then use "permalink" to the file in its current state.



	creates lists with checkboxes in issues
	******************************

this will also produce a nifty "2 of 5" bar when looking at the issue list.

Here is the syntax:

 - [ ] Screen width (integer)
 - [x] Service worker support
 - [x] Fetch support
 - [ ] CSS flexbox support
 - [ ] Custom elements

 That’s a space and a dash and a space and a left bracket and a space (or an x) and a close bracket and a space and then some words.



 	Project boards in GitHub with Trello
 	************************************
https://hackernoon.com/12-cool-things-you-can-do-with-github-f3e0424cf2f0




	GitHub wiki
	***********

For an unstructured collection of pages — just like Wikipedia — the GitHub Wiki offering (which I will henceforth refer to as Gwiki) is great.

For a structured collection of pages — for example, your documentation — not so much. There is no way to say “this page is a child of that page”, or have nice things like ‘Next section’ and ‘Previous section’ buttons. 

take Gwiki for a spin, I entered a few pages from the NodeJS docs as wiki pages, then created a custom sidebar so that I could emulate having some actual structure. The sidebar is there at all times, although it doesn’t highlight the page you are currently on.

example: https://github.com/davidgilbertson/about-github/wiki



	GitHub Pages with Jekyll
	************************
You may already know that you can use GitHub Pages to host a static site. And if you didn’t now you do. However this section is specifically about using Jekyll to build out a site.

At its very simplest, GitHub Pages + Jekyll will render your README.md in a pretty theme. 

If I click the "settings" tab for my site in GitHub, turn on GitHub Pages, and pick a Jekyll theme.. I will get a Jekyll-themed page.

From this point on I can build out a whole static site based mostly around markdown files that are easily editable, essentially turning GitHub into a CMS.



	Stylish Chrome Extension
	*************************

gives you ability to add styles/themes to websites.



	GitHub as CMS
	*************

https://hackernoon.com/12-cool-things-you-can-do-with-github-f3e0424cf2f0



	GitHub Templates
	****************

You must create templates on the repository's default branch. 
Templates created in other branches are not available for collaborators to use. 
You can store your pull request template in the repository's visible root directory, 
the `docs` folder, 
or the hidden .github directory. 

Pull request template filenames are not case sensitive, 
and can have an extension such as .md or .txt.


PULL_REQUEST_TEMPLATE.md
pull_request_template.md





	GitHub CODEOWNDERS
	*******************



# This file is used to automatically request reviews on PRs.

# These owners will be the default owners for everything in
# the repo, unless a match on a later line takes precedence.
# "@MyOrganization/MyTeam" below requests review from all members of MyTeam.
*       @MyOrganization/MyTeam

# It's also possible to add notifications based on language
# or location in repo, etc.
# More info at docs: https://help.github.com/articles/about-codeowners/


Example
-------

Example of a CODEOWNERS file
# This is a comment.
# Each line is a file pattern followed by one or more owners.

# These owners will be the default owners for everything in
# the repo. Unless a later match takes precedence,
# @global-owner1 and @global-owner2 will be requested for
# review when someone opens a pull request.
*       @global-owner1 @global-owner2

# Order is important; the last matching pattern takes the most
# precedence. When someone opens a pull request that only
# modifies JS files, only @js-owner and not the global
# owner(s) will be requested for a review.
*.js    @js-owner

# You can also use email addresses if you prefer. They'll be
# used to look up users just like we do for commit author
# emails.
*.go docs@example.com

# In this example, @doctocat owns any files in the build/logs
# directory at the root of the repository and any of its
# subdirectories.
/build/logs/ @doctocat

# The `docs/*` pattern will match files like
# `docs/getting-started.md` but not further nested files like
# `docs/build-app/troubleshooting.md`.
docs/*  docs@example.com

# In this example, @octocat owns any file in an apps directory
# anywhere in your repository.
apps/ @octocat

# In this example, @doctocat owns any file in the `/docs`
# directory in the root of your repository.
/docs/ @doctocat



-----------------------------------------


It looks like you've set up the CODEOWNERS file correctly, but I believe the issue you're having is down to team permissions.

Teams are only requested for a review on a pull request when they have write access to the repository on the team itself. It's not enough for all the members to have write access, you need to grant write access to the actual team.

https://help.github.com/articles/managing-team-access-to-an-organization-repository/

Once you do this all future pull requests that involve files owned by that team should be automatically requested for a review.



# This file is used to automatically request reviews on PRs.

# These owners will be the default owners for everything in
# the repo, unless a match on a later line takes precedence.
# "@MyOrganization/MyTeam" below requests review from all members of MyTeam.

*       @MyOrganization/MyTeam

# It's also possible to add notifications based on language
# or location in repo, etc.
# More info at docs: https://help.github.com/articles/about-codeowners/

Note: teams cannot be SECRET - must be publicly visible.




================================================================================

	go back in history to privous commit
	************************************

Temporarily switch to a earlier commit
---------------------------------------

If you want to temporarily go back, and do some work there, then come back to
where you are now, all you have to do is checkout the desired commit:

	# this will detach your HEAD, that is, leave you with no branch checked out:
	git checkout ab34324bada

Or if you want to make commits while you're there, go ahead make a new branch 
from that commit:

	git checkout -b old-state ab34324bada

This could be handy if you want to generate a release from a previous point in 
history:

	git checkout -b feature-a-release ab34324bada		

.. then merge to master and tag it.

To go back where were, simply checkout the branch you were on again:

	git checkout develop


Hard delete unpublished commits
-------------------------------

If, on the other hand, you want to really get rid of everything you've done 
since then, there are two options:

1. if you haven't published any of these commits, simply reset:

	# this will destroy any local modifications.
	git reset --hard ab34324bada

if there is work you want to keep

	# this saves the modifications, then reapplies that patch after resetting
	# you could get merge conflicts if you've modified things ..
	git stash
	git reset --hard ab34324bada
	git stash pop


2. If you've published your work, you probably don't want to reset the branch
   since that's effectively rewriting history.

   in this case, you could indeed revert the commits.
   with git, revert has a very specific meaning - create a commit with the reverse
   patch to cancel it out.  This way you don't re-write history

   # this will create three separate revert commits:
   
   git revert a353543af 25eeee4ca 0766c065

   # it also takes ranges.
   # this will revert the last 2 commits

   git revert HEAD~2..HEAD

   # or you can revert a range of commits
   
   git revert a353543af..0766c065

   # reverting a merge commit 
   git revert -m 1 <merge-commit-sha>

   # to get just one, you could use `rebase -i` to squash afterwards
   # or, you could do it manually (be sure to do this at top level or the repo) 
   # get your index and work tree into the desired state

   git checkout 0d1d7fc32

   




================================================================================

	how to disable credential.helper for a single repository
	********************************************************

https://stackoverflow.com/questions/13198143/how-do-i-disable-gits-credential-helper-for-a-single-repository

[credential]
    helper = 

With git 2.9 (June 2016), this (helper = ) will actually work

The credential.helper configuration variable is cumulative and there is no good way to override it from the command line.
As a special case, giving an empty string as its value now serves as the signal to clear the values specified in various files.

credential: let empty credential specs reset helper list
Since the credential.helper key is a multi-valued config list, there's no way to "unset" a helper once it's been set. So if your system /etc/gitconfig sets one, you can never avoid running it, but only add your own helpers on top.

Since an empty value for credential.helper is nonsensical (it would just try to run "git-credential-"), we can assume nobody is using it. Let's define it to reset the helper list, letting you override lower-priority instances which have come before.

================================================================================

	github 2FA and credential helper
	********************************

NOTE: credential.helper currently does not support differnt identifies
per URI:
https://stackoverflow.com/questions/48420399/github-separate-credentials-for-two-accounts-on-windows
https://stackoverflow.com/questions/47974196/permission-denied-when-pushing-file-to-remote/47975913#47975913

@see how to disable credential.helper for a single repository

Turn on the credential helper to cache your credentials (so you only need to do this once):

a. Windows:

	git config --global credential.helper wincred

b. Mac:

	git config --global credential.helper osxkeychain	


Set up a personal access token for accessing GitHub repositories - with
gist, repo, and user scope. 

	git push

and use your access token.

For Linux, you can:

- Use credential.helper cache to cache for 15 minutes.
- Use credential.helper store to store the credentials unencrypted on disk
- Enter the access token every time

There are other helpers floating around such as gnome/libsecret

================================================================================

	installing credential.helper on Ubuntu
	**************************************

NOTE: credential.helper currently does not support differnt identifies
per URI:
https://stackoverflow.com/questions/48420399/github-separate-credentials-for-two-accounts-on-windows
https://stackoverflow.com/questions/47974196/permission-denied-when-pushing-file-to-remote/47975913#47975913

==>  @see how to disable credential.helper for a single repository

https://stackoverflow.com/questions/36585496/error-when-using-git-credential-helper-with-gnome-keyring-as-sudo/40312117#40312117	

libgnome-keyring is specific to GNOME and is now deprecated (since January 2014, actually).

Git 2.11+ (Q4 2016) will include a new credential helper using libsecret.
A new credential helper that talks via "libsecret" with implementations of XDG Secret Service API has been added to contrib/credential/.

it uses libsecret which can support other implementations of XDG Secret Service API.

1. install libsecret and the development libraries:

	sudo apt-get install libsecret-1-0 libsecret-1-dev

2. build the credential manager

	cd /usr/share/doc/git/contrib/credential/libsecret

if credential/libsecret folder with sources does not exist, downloade from source
https://github.com/git/git/tree/master/contrib/credential/libsecret

now, compile

	sudo make

3. Configure git to use the newly created credential.helper:

	git config --global credential.helper /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret

Note: some distroes like Arch and Fedora may provide helpers available already.

================================================================================

	git subtree for gh-pages deployment
	***********************************

You have a project that builds a deployable artifact to, say, `dist` folder.
You manage the project in a repo, probably in `master` branch.
But you need to deploy `dist` contents to `gh-pages` branch.

Frequently, you set up a separate git repo in `dist` just to push to 
`gh-pages` for publishing, but there is a simpler way.

1. remove your <build-folder>  (e.g. `dist`) from `.gitignore`.
2. run build - it generates `dist` folder.
3. when ready to deploy to gh-pages

	# replace build_folder as appropriate
    git subtree push --prefix build_folder origin gh-pages

Git pushes a subset of your repo - your <build_folder> to gh-pages.

One problem:  `git subtree` does not have a `--force` option.

To overcome that:

	$ git push origin `git subtree split --prefix build_folder master`:gh-pages --force  

e.g. if <build_folder> == dist:

	$ git push origin `git subtree split --prefix dist master`:gh-pages --force	  	
	

issues with `git subtree push`
------------------------------

When you're trying to update `gh-pages` against a rebased `master`, you will run
into this this situation:

	$ npm run deploy

	> something@1.0.0 deploy /some/folder
	> git subtree push --prefix dist origin gh-pages

	git push using:  origin gh-pages
	. . .
	 ! [rejected]        6e836d06b9b82a26ef1a703f6e103b0f85bb236a -> gh-pages (non-fast-forward)
	error: failed to push some refs to 'https://github.com/some/repo.git'
	hint: Updates were rejected because a pushed branch tip is behind its remote
	hint: counterpart. Check out this branch and integrate the remote changes
	hint: (e.g. 'git pull ...') before pushing again.
	hint: See the 'Note about fast-forwards' in 'git push --help' for details.

We're just using gh-pages to deploy a new buid here, so forcing is not an issue
The problem is:

	`git subtree` does not have a `--force` option.

So to get around it:


$ git push origin `git subtree split --prefix <build_folder> master`:gh-pages --force

where 

	build_folder = 'dist'	

================================================================================

	delete remove file from git repo without deleting
	*************************************************

For single file:

	$ git rm --cached mylogfile.log

For single directory:

	$ git rm --cached -r mydirectory	

================================================================================

	mirror duplicate a repo with git clone
	**************************************

1. Create a new target repo for the mirror/clone

	https://github.com/exampleuser/new-repository.git

2. Create a clone

Be in any directory where you can create a temp folder

	$ git clone --bare https://github.com/exampleuser/old-repository.git

This creates a temporary directory in the file system - old-repository.git

3. Mirror-push to the new repo

	$ cd old-repository.git
	$ git push --mirror https://github.com/exampleuser/new-repository.git


================================================================================

	git submodules
	***************

tutorial
https://www.vogella.com/tutorials/GitSubmodules/article.html


Using Git repositories inside other Git repositories


Git allows you to include other Git repositories called submodules into a repository. 
This allows you to track changes in several repositories via a central one. 

Submodules are Git repositories nested inside a parent Git repository 
at a specific path in the parent repository’s working directory. 

A submodule can be located anywhere in a parent Git repository’s working directory 
and is configured via a .gitmodules file located at the root of the parent repository.

.gitmodules 

This file contains which paths are submodules and what URL should be used when cloning 
and fetching for that submodule. Submodule support includes support for adding, 
updating, synchronizing, and cloning submodules.

Git allows you to commit, pull and push to these repositories independently.

Submodules allow you to keep projects in separate repositories 
but still be able to reference them as folders in the working directory of other repositories.


Clone a repository that contains submodules
--------------------------------------------

If you want to clone a repository including its submodules you can use the --recursive parameter.


	$ git clone --recursive [URL to Git repo]


If you already have cloned a repository and now want to load it’s submodules you have to use submodule update.

	
	$ git submodule update --init

	# if there are nested submodules:
	$ git submodule update --init --recursive



Downloading multiple submodules at once
----------------------------------------

Since a repository can include many submodules, downloading them all sequentially can take much time. 

For this reason clone and submodule update command support the --jobs parameter to fetch multiple submodules at the same time.

	# download up to 8 submodules at once
	git submodule update --init --recursive --jobs 8
	git clone --recursive --jobs 8 [URL to Git repo]
	# short version
	git submodule update --init --recursive -j 8



Pulling with Submodules
--------------------------------------------


Once you have set up the submodules you can update the repository with fetch/pull like you would normally do. 

To pull everything including the submodules, use the --recurse-submodules

	# pull all changes in the repo including changes in the submodules
	$ git pull --recurse-submodules

To just pull changes in submodules only:

	# pull all changes for the submodules
	$ git submodule update --remote


git submodule update --remote works like:

	cd B
	git fetch origin master
	git checkout origin/master

By default master and origin/master are used. 
If the branch is specified by submodule.foo.branch = bar in .gitmodule, 
thenbar and origin/bar are used.



Executing a command on every submodule
--------------------------------------------

Git provides a command that lets us execute an arbitrary shell command on every submodule. 

To allow execution in nested subprojects the --recursive parameter is supported. 

For our example we assume that we want to reset all submodules.

	$ git submodule foreach 'git reset --hard'

	# including nested submodules
	$ git submodule foreach --recursive 'git reset --hard'




Creating Repositories with Submodules
============================================


	Adding a submodule to a Git repo and a tracking branch
	------------------------------------------------------


If you add a submodule, you can specify which branch should be tracked via the -b parameter of the submodule add command. 


The git submodule init command creates the local configuration file for the submodules, if this configuration does not exist.


	# add submodule and define the master branch as the one you want to track

	$ git submodule add -b master [URL to Git repo]  (1)
	$ git submodule init                             (2)


(1) adds a new submodule to an existing Git repository and 
    defines that the master branch should be tracked

(2) initialize submodule configuration


If you track branches in your submodules, you can update them via the --remote parameter of the git submodule update command. 


This pulls in new commits into the main repository and its submodules. It also changes the working directories of the submodules to the commit of the tracked branch.



	# update your submodule --remote fetches new commits in the submodules
	# and updates the working tree to the commit described by the branch

	$ git submodule update --remote




Adding a submodule and tracking commits
----------------------------------------

https://www.vogella.com/tutorials/GitSubmodules/article.html

Alternatively to the tracking of a branch, you can also control which commit of the submodule should be used. In this case the Git parent repository tracks the commit that should be checked out in each configured submodule. Performing a submodule update checks out that specific revision in the submodule’s Git repository. You commonly perform this task after you pull a change in the parent repository that updates the revision checked out in the submodule. You would then fetch the latest changes in the submodule’s Git repository and perform a submodule update to check out the current revision referenced in the parent repository. Performing a submodule update is also useful when you want to restore your submodule’s repository to the current commit tracked by the parent repository. This is common when you are experimenting with different checked out branches or tags in the submodule and you want to restore it back to the commit tracked by the parent repository. You can also change the commit that is checked out in each submodule by performing a checkout in the submodule repository and then committing the change in the parent repository.

You add a submodule to a Git repository via the git submodule add command.


	$ git submodule add [URL to Git repo]   (1)
	$ git submodule init                    (2)


	(1) adds a submodule to the existing Git repository
	(2) initialize submodule configuration



Updating which commit your are tracking
--------------------------------------------

https://www.vogella.com/tutorials/GitSubmodules/article.html

The relevant state for the submodules are defined by the main repository. If you commit in your main repository, the state of the submodule is also defined by this commit.

The git submodule update command sets the Git repository of the submodule to that particular commit. The submodule repository tracks its own content which is nested into the main repository. The main repository refers to a commit of the nested submodule repository.

Use the git submodule update command to set the submodules to the commit specified by the main repository. This means that if you pull in new changes into the submodules, you need to create a new commit in your main repository in order to track the updates of the nested submodules.

The following example shows how to update a submodule to its latest commit in its master branch.


# update submodule in the master branch
# skip this if you use --recurse-submodules
# and have the master branch checked out
cd [submodule directory]
git checkout master
git pull

# commit the change in main repo
# to use the latest commit in master of the submodule
cd ..
git add [submodule directory]
git commit -m "move submodule to latest commit in master"

# share your changes
git push
Another developer can get the update by pulling in the changes and running the submodules update command.

# another developer wants to get the changes
git pull

# this updates the submodule to the latest
# commit in master as set in the last example
git submodule update



Delete a submodule from a repository
--------------------------------------------

Currently Git provides no standard interface to delete a submodule. 

To remove a submodule called mymodule you need to:


	$ git submodule deinit -f — mymodule

	$ rm -rf .git/modules/mymodule

	$ git rm -f mymodule


================================================================================

	
