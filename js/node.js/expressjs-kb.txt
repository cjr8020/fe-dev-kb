
	ExpressJS
	*********

fast minimalist web framework for Node.js

===============================================================================

	Basic routing
	*************

Routing refers to determining how an application responds to a client request
to a particular endpoint - URI (path) + HTTP method (GET, POST, .. )

Each route can have one or more handler functions which are executed when
the route is matched.

	app.method(path, handler);

E.g. 

	app.post('/user', (req, res) => {
		res.send('Got a POST request');
	});


===============================================================================

	Modular routing
	***************

use express.Router class to create modular, mountable route handlers.
A Router instance is a complete middleware and routing system.

The following example:

1. creates a router as a module
2. loads a middleware function in it
3. defines some routes
4. mounts the router module on a path in the main app

create a router file named `birds.js`
-------------------------------------

import * as express from 'express';

const router = express.Router();

// middleware specific for this router
router.use(  (req, res, next) =>  {
  console.log('Time: ', Date.now());
  next();
});

// define the home page route
router.get('/', function (req, res) {
  res.send('Birds home page')
}); 

// define the about route
router.get('/about', function (req, res) {
  res.send('About birds')
}); 

now in the app file:
---------------------

import * as birds from './birds.js';

app.use('/birds', birds);  // mount the router moudle on a path in the main app




The app will now be able to handle request to:

	/birds
	/birds/about

as well as call middleware function specific to this router.


===============================================================================

	or you can just use Router in your app file
	********************************************


import * as express from "express";
import * as bodyParser from "body-parser";

const app = express();

const port = 4444;

const router = express.Router();


router.get("/talks", (req, res) => {
	//
});

router.get("/talk", (req, res) => {
	// 
});

router.post("/rate", (req, res) => {
	// 
});

// CORS headers
app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});


app.use(bodyParser.urlencoded({ extended: true }));
app.use("/", router); // mount Router on a path of the main app
app.listen(port);

console.log(`Server port: ${port}`);	



===============================================================================

	CORS in ExpressJS
	*****************

app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});


===============================================================================

	404
	***

In Express, 404 responses are not a result of an error, so the error handler
will not capture them.  

404 simply indicates the absence of additional work to do -- Express has executed all middleware functions and routes, and found that none of them responded.

So add a middleware function at the very bottom of the stack (below all other
functions) to handle a 404 response:

app.use( (req, res, next) => {
	res.status(404).send("Sorry, cannot find that..");
});



===============================================================================

	Error Hander
	************

You define error-handling middleware in the same way as other middleware, except with four arguments instead of three; specifically with the signature (err, req, res, next):

app.use(function (err, req, res, next) {
  console.error(err.stack)
  res.status(500).send('Something broke!')
});


===============================================================================

	Hello world
	************


install
--------

	$ mkdir myapp
	$ cd myapp
	$ npm init (entry point: index.js or server.js)
	$ npm install express --save
	$ npm install typescript --save-dev
	$ npm install @types/express --save
	$ tsc --init

this creates package.json

	{
	  "name": "express-hello-world",
	  "version": "1.0.0",
	  "description": "test",
	  "main": "server.js",
	  "scripts": {
	    "test": "echo \"Error: no test specified\" && exit 1"
	  },
	  "author": "",
	  "license": "MIT",
	  "dependencies": {
    	"@types/express": "^4.0.37",	  
	    "express": "^4.16.2"
	  }
	}

.. and tsconfig.json:

	{
	    "compilerOptions": {
	        "module": "commonjs",
	        "target": "es5",
	        "noImplicitAny": false,  // default
	        "sourceMap": false
	    }
	}

modify tsconfig.json to be:

tsconfig.json

{
  "compilerOptions": {
    "baseUrl": "",
    "declaration": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "mapRoot": "./",
    "module": "commonjs",
    "moduleResolution": "node",
    "outDir": "./dist",
    "target": "es5",
    "noImplicitAny": true, 
    "sourceMap": true,
    "typeRoots": [
      "./node_modules/@types"
    ]
  },
  "files": [
    "./server.ts"
  ]
}


add the following to package.json

{
  "name": "express-hello-world",
  "version": "1.0.0",
  "description": "test",
  "main": "server.js",
  "scripts": {
  	"server": "tsc && node dist/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@types/express": "^4.0.37",
    "express": "4.16.2"
  },
  "devDependencies": {
  	"typescript": "2.5.3"
  }
}

Now, create your hello-world service:

server.ts
----------

import * as express from 'express';

const app = express();
const port = 8888;

app.get('/', (req, res) => {
    res.send('Hello World!');
});

app.listen(port, () => {
    console.log(`Server port: ${port}`);
});

run server
-----------

	$ npm run server
	Server port: 8888

http://localhost:8888
Hello World!



