
	ExpressJS
	*********

fast minimalist web framework for Node.js

===============================================================================

	express-generator
	*****************

	$ sudo npm install express-generator -g

create an app

	$ express <app-name> -e

===============================================================================

	express-fileupload
	******************

https://www.npmjs.com/package/express-fileupload
https://github.com/richardgirges/express-fileupload/tree/master/example#multi-file-upload

https://www.bezkoder.com/node-js-express-file-upload/

Basic File Upload
-----------------

Your HTML file upload form:

<html>
  <body>
    <form ref='uploadForm' 
      id='uploadForm' 
      action='http://localhost:8000/upload' 
      method='post' 
      encType="multipart/form-data">
        <input type="file" name="sampleFile" />
        <input type='submit' value='Upload!' />
    </form>     
  </body>
</html>


const express = require('express');
const fileUpload = require('express-fileupload');
const app = express();

// default options
app.use(fileUpload());

app.post('/upload', function(req, res) {
  let sampleFile;
  let uploadPath;

  if (!req.files || Object.keys(req.files).length === 0) {
    return res.status(400).send('No files were uploaded.');
  }

  // The name of the input field (i.e. "sampleFile") is used to retrieve the uploaded file
  sampleFile = req.files.sampleFile;
  uploadPath = __dirname + '/somewhere/on/your/server/' + sampleFile.name;

  // Use the mv() method to place the file somewhere on your server
  sampleFile.mv(uploadPath, function(err) {
    if (err)
      return res.status(500).send(err);

    res.send('File uploaded!');
  });
});



Multi-File Upload
-----------------

express-fileupload supports multiple file uploads at the same time.

Let's say you have three files in your form, each of the inputs with the name my_profile_pic, my_pet, and my_cover_photo:

<input type="file" name="my_profile_pic" />
<input type="file" name="my_pet" />
<input type="file" name="my_cover_photo" />


These uploaded files would be accessible like so:

app.post('/upload', function(req, res) {
  // Uploaded files:
  console.log(req.files.my_profile_pic.name);
  console.log(req.files.my_pet.name);
  console.log(req.files.my_cover_photo.name);
});


Get file list as Array and  number of file sent for upload
-----------------------------------------------------------


If you want to retrieve filenames from the req.files, you could just map that over it like that:

var filenames = req.files.map(function(file) {
  return file.filename; // or file.originalname
});


or 

    console.log(`===> Files received ${Object.keys(req.files).length}`);
    console.log(`===> File list ${Object.keys(req.files)}`);




how do i access the other text input fields of the form
--------------------------------------------------------


client 


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Testing upload</title>
</head>
<body>
    <form action="/some" method="post" enctype="multipart/form-data">
        <input type="text" name="firstName"> <br>
        <input type="text" name="lastName"> <br>
        <input type="file" name="pho" > <br>
        <button type="submit">Send</button>
    </form>
</body>
</html>



server


const express = require("express");
const expressFileUpload = require("express-fileupload");

const app = express();
const port = 8585;

app.use(express.static("./public"));

app.post("/some", expressFileUpload(), async function (req, res) {
    await req.files["pho"].mv("./files/some.png");
    res.end("End.");
});

app.listen(port, () => {
    console.log(`Listening at port ${port}`);
});




How to give name to a Blob uploaded as FormData a filename
----------------------------------------------------------

Use:
https://developer.mozilla.org/en-US/docs/Web/API/FormData/append

	form.append("blob", blob, filename);

// Turns out getAsFile will return a blob, not a file
var blob = event.clipboardData.items[0].getAsFile(), 
    form = new FormData(),
    request = new XMLHttpRequest();
form.append("blob",blob,"blob"); // <-=====X
request.open(
            "POST",
            "/upload",
            true
        );
request.send(form);



===============================================================================

	Basic routing
	*************

Routing refers to determining how an application responds to a client request
to a particular endpoint - URI (path) + HTTP method (GET, POST, .. )

Each route can have one or more handler functions which are executed when
the route is matched.

	app.method(path, handler);

E.g. 

	app.post('/user', (req, res) => {
		res.send('Got a POST request');
	});


===============================================================================

	Modular routing
	***************

use express.Router class to create modular, mountable route handlers.
A Router instance is a complete middleware and routing system.

The following example:

1. creates a router as a module
2. loads a middleware function in it
3. defines some routes
4. mounts the router module on a path in the main app

create a router file named `birds.js`
-------------------------------------

import * as express from 'express';

const router = express.Router();

// middleware specific for this router
router.use(  (req, res, next) =>  {
  console.log('Time: ', Date.now());
  next();
});

// define the home page route
router.get('/', function (req, res) {
  res.send('Birds home page')
}); 

// define the about route
router.get('/about', function (req, res) {
  res.send('About birds')
}); 

now in the app file:
---------------------

import * as birds from './birds.js';

app.use('/birds', birds);  // mount the router moudle on a path in the main app




The app will now be able to handle request to:

	/birds
	/birds/about

as well as call middleware function specific to this router.


===============================================================================

	or you can just use Router in your app file
	********************************************


import * as express from "express";
import * as bodyParser from "body-parser";

const app = express();

const port = 4444;

const router = express.Router();


router.get("/talks", (req, res) => {
	//
});

router.get("/talk", (req, res) => {
	// 
});

router.post("/rate", (req, res) => {
	// 
});

// CORS headers
app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});


app.use(bodyParser.urlencoded({ extended: true }));
app.use("/", router); // mount Router on a path of the main app
app.listen(port);

console.log(`Server port: ${port}`);	



===============================================================================

	CORS in ExpressJS
	*****************

app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});


===============================================================================

	404
	***

In Express, 404 responses are not a result of an error, so the error handler
will not capture them.  

404 simply indicates the absence of additional work to do -- Express has executed all middleware functions and routes, and found that none of them responded.

So add a middleware function at the very bottom of the stack (below all other
functions) to handle a 404 response:

app.use( (req, res, next) => {
	res.status(404).send("Sorry, cannot find that..");
});



===============================================================================

	Error Hander
	************

You define error-handling middleware in the same way as other middleware, except with four arguments instead of three; specifically with the signature (err, req, res, next):

app.use(function (err, req, res, next) {
  console.error(err.stack)
  res.status(500).send('Something broke!')
});


===============================================================================

	Hello world
	************


install
--------

	$ mkdir myapp
	$ cd myapp
	$ npm init (entry point: index.js or server.js)
	$ npm install express --save
	$ npm install typescript --save-dev
	$ npm install @types/express --save
	$ tsc --init

this creates package.json

	{
	  "name": "express-hello-world",
	  "version": "1.0.0",
	  "description": "test",
	  "main": "server.js",
	  "scripts": {
	    "test": "echo \"Error: no test specified\" && exit 1"
	  },
	  "author": "",
	  "license": "MIT",
	  "dependencies": {
    	"@types/express": "^4.0.37",	  
	    "express": "^4.16.2"
	  }
	}

.. and tsconfig.json:

	{
	    "compilerOptions": {
	        "module": "commonjs",
	        "target": "es5",
	        "noImplicitAny": false,  // default
	        "sourceMap": false
	    }
	}

modify tsconfig.json to be:

tsconfig.json

{
  "compilerOptions": {
    "baseUrl": "",
    "declaration": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "mapRoot": "./",
    "module": "commonjs",
    "moduleResolution": "node",
    "outDir": "./dist",
    "target": "es5",
    "noImplicitAny": true, 
    "sourceMap": true,
    "typeRoots": [
      "./node_modules/@types"
    ]
  },
  "files": [
    "./server.ts"
  ]
}


add the following to package.json

{
  "name": "express-hello-world",
  "version": "1.0.0",
  "description": "test",
  "main": "server.js",
  "scripts": {
  	"server": "tsc && node dist/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@types/express": "^4.0.37",
    "express": "4.16.2"
  },
  "devDependencies": {
  	"typescript": "2.5.3"
  }
}

Now, create your hello-world service:

server.ts
----------

import * as express from 'express';

const app = express();
const port = 8888;

app.get('/', (req, res) => {
    res.send('Hello World!');
});

app.listen(port, () => {
    console.log(`Server port: ${port}`);
});

run server
-----------

	$ npm run server
	Server port: 8888

http://localhost:8888
Hello World!




===============================================================================

	tutorial using express.js with express-generator
	************************************************

 1. create ExpressJS project

install express-generator using this command.

	$ sudo npm install express-generator -g

Next, create an Express.js app using this command.


	$ express node-rest-api -e


	 create : node-rest-api/
	 . . .

   change directory:
     $ cd node-rest-api

   install dependencies:
     $ npm install

   run the app:
     $ DEBUG=node-rest-api:* npm start

  $ cd node-rest-api && npm install
  $ npm start

 curl -v http://localhost:3000


===============================================================================

	using express.js with express-generator-typescript
	**************************************************

install express-generator-typescript:

	$ sudo npm install express-generator-typescript -g 

create an app with 

	$ npx express-generator-typescript "node-rest-api"

	$ cd "node-rest-api" && npm run start:dev


 s


===============================================================================

	Serving PDF with node expressjs
	*******************************

https://stackoverflow.com/questions/31105846/how-to-send-a-pdf-file-from-node-express-app-to-the-browser


You have to pipe from Readable Stream to Writable stream not the other way around:

	var file = fs.createReadStream('./public/modules/datacollectors/output.pdf');
	var stat = fs.statSync('./public/modules/datacollectors/output.pdf');
	res.setHeader('Content-Length', stat.size);
	res.setHeader('Content-Type', 'application/pdf');
	res.setHeader('Content-Disposition', 'attachment; filename=quote.pdf');
	file.pipe(res);



or

After testing your code in Chrome, it immediately starts the download of the PDF file. But if you want to display the content of the PDF file you could try below:

	var data =fs.readFileSync('./public/modules/datacollectors/output.pdf');
	res.contentType("application/pdf");
	res.send(data);

This should directly send PDF content into the browser.

===============================================================================

	reading relative paths with fs.readFileSync
	-----------------------


how to use fs.readFileSync to give you a relative path to your asset.

this works fine

	import fs from 'fs';

	const logo = fs.readFileSync('/assets/img/logo.svg');

when the `assets` folder is in the root of the project.

To work with relative path


	import fs from 'fs';
	import path from 'path';

	const logo = fs.readFileSync(path.resolve(__dirname, './assets/img/logo.svg'));

===============================================================================