post angular-mix write-up:
https://blog.angular.io/the-angular-team-at-angularmix-2d56fd7fde65


http://codewithdan.me/ng-2day-workshop

https://github.com/DanWahlin?tab=repositories --> lists repositories

https://github.com/johnpapa/angular-event-view-cli

https://github.com/DanWahlin/ES6Samples


Look at Dynamic Component Dashboard

    https://github.com/DanWahlin/Angular-DynamicComponentDashboard

    looked interesting how you can dynamically click and drag components.



sourceMaps: true => see typescript in the browser.

{
  "compilerOptions": {
    "target": "es5",
    "module": "es2015",
    "moduleResolution": "node",
    "sourceMap": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "removeComments": false,
    "noImplicitAny": true,
    "allowJs": true
  }
}

allowsJs: true => allows you to compile to JS to .. JS.

==============================================================================

TypeScript playground
*********************

http://www.typescriptlang.org/play/

var Customer = /** @class */ (function () {

    function Customer() {

    }

    return Customer;

}());

iffy - without an iffy JS will not execute.

==============================================================================

    TS Modules
    **********

'strict' by default if you do modules

Modules rely on export/import

export var name = 'James';
export var city = Chandler
==============================================================================

    Powerline Shell
    ****************

Arrow-style command prompt: Powerline-Shell
https://fedoramagazine.org/add-power-terminal-powerline/
https://github.com/banga/powerline-shell
https://www.youtube.com/watch?v=Rbn65qdd2Wg

https://unix.stackexchange.com/questions/352426/how-to-get-the-arrow-style-bash-prompt-after-installing-powerline


==============================================================================

    angular demo
    ************

$ ng serve -o // open vavorite browser


$ ng eject 

    you are now ejected from the build process .. and you get to play with
    the webpack config yourself.


Plnkr
-----

https://codecraft.tv/courses/angular/quickstart/plunker/


==============================================================================

On bootstrapping, you can put multiple components in bootstrap:

    bootstrap: [AppComponent, AppComponent2, AppComponent3]

but you end up with different DOM trees, and these compoents are not sharing
anything.


==============================================================================


Mike Brocchi??? is heading up Angular CLI development for shared components.
https://github.com/Brocco




==============================================================================

    Discussing Shared vs Core angular modules
    *****************************************

John Papa mentioned one of his demo apps
https://github.com/johnpapa/angular-event-view-cli
that demonstrates the concept of 

    core module
    shared module

He also wrote parts of the angular doc NgModule that describes the concept

https://angular.io/guide/ngmodule#the-core-module
https://angular.io/guide/ngmodule#shared-modules




==============================================================================

    pipes
    *****

built-in: json, currency

Can help you debug data by dumping to console.    

    <pre>
        {{ names | json }}
    </pre>



==============================================================================


    Services
    ********

@Injecteble

    doesn't mean that the service is injectable.
    means: the contstructor of this class (service in this case) is injectable.


Idea: a guard to see how many services are in the injector.



==============================================================================

    Forms
    *****

Angular offers two form-building technologies: reactive forms and template-driven forms. 
The two technologies belong to the @angular/forms library and 
share a common set of form control classes.

But they diverge markedly in philosophy, programming style, and technique. 
They even have their own modules: the ReactiveFormsModule and the FormsModule. 

    Template-Driven or Declarative
    ------------------------------

HTML driven

FormsModule
NgForm
NgModel
NgSubmit

You put NgModel on all your form elements.  ngForm and ngModel directives
work together to provide change state and validation functionality:
 - check if form/controls are dirty/pristine
 - check if form/controls are valid/invalid


    ReactiveFormsModule (Imperative)
    --------------------------------

Angular reactive forms facilitate a reactive style of programming that favors explicit management of the data flowing between a non-UI data model (typically retrieved from a server) and a UI-oriented form model that retains the states and values of the HTML controls on screen. Reactive forms offer the ease of using reactive patterns, testing, and validation.

ReactiveFormsModule
FormGroup 
    - a collection of one or more form controls
FormControlName
FormBuilder

Sample application:

https://github.com/DanWahlin/Angular-Forms


    ReactiveForms vs Template-Driven
    --------------------------------

If you prefer less code and more HTML form work, then use template-driven.

If you prefer TDD, more functionality in the code, use Reactive Forms.





==============================================================================


    Angular Testing
    ***************

Repo: https://github.com/joeeames/TopCoders-angular2-testing.git

Workshop Presentation
----------------------
https://docs.google.com/presentation/d/1FYr10N1sLKo9yNxIM28Xaahz8BRxIMYCs7NjXoDgHsU/edit#slide=id.g17e2acfc6a_3_68


Workshop Materials
------------------
https://docs.google.com/document/d/1aSc9ndWBiQRObQ1AWVmdx7BDj3ksyhog85zGIHSHTuw/edit#


Types of tests

isolated tests
shallow intergration tests
deep intergation tests



==============================================================================


    Routing
    *******

child routes

    We may have the need for multiple routers or nested routes
    
        const routes: Routes = [  
          {     
            path: 'customers/:id', component: CustomerComponent, 
            children: [         
               { path:'details', component: CustomerDetailsComponent }, 
               { path:'orders',  component: CustomerOrdersComponent },     
               { path:'edit',    component: CustomerEditComponent }    
            ]
          }
        ];


    Route Guards
    ------------

Guards allow us to make a decision at key points in the routing lifecycle and either continue, abort or take a new direction

    E.g. during order entry accidentally hitting back button.

CanActivate
    protect this route

CanActivateChild  
    protect child routes

CanLoad
    before we load this code .. 

CanDeactivate
    ideal for asking the user if they want to cancel changes before leaving.

Resolve
    could allow you to load next screen only when data for next screeen is 
    available.   essentially, allows you to get data in advance.
    eager or lazy loading  


NOTE: all of these guards are for user experience/convenience. NOT security.


==============================================================================


    Easy / Lazy Loading
    ********************

Allows us to load NgModules eagerly or lazily.

eager: at startup

lazy:  on demand

let's say you have a module that's 10MB.  you don't want that loaded
eagerly.

options:
    1. prefetching
    2. on demand

Defining Lazy Routes
--------------------

    - use loadChildren
    - load the module by path and name (string value)
    - do NOT import module reference.


Configuring feature module path
-------------------------------

look at 'orders' feature which lazily loads OrdersModule



const routes: Routes = [
  { path: '', pathMatch: 'full', redirectTo: 'customers' },
  { path: 'customers', loadChildren: 'app/customers/customers.module#CustomersModule' },
  { 
    path: 'orders', 
    loadChildren: 'app/orders/orders-routing.module#OrdersRoutingModule' 
  },
  { path: '**', pathMatch: 'full', component: PageNotFoundComponent },
];



Now, in the feature module routing, path ('') will be applied when
user enters .../orders   -> that will load OrderListComponent.

const routes: Routes = [
  {
    path: '', component: OrdersComponent,
    children: [
      { path: '', component: OrderListComponent },
      { path: ':id', component: OrderComponent}]
  },
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule],
})
export class OrdersRoutingModule { }


Compiling
---------

Each lazy-loaded module will be compiled as a separate JS file so it can be
loaded separately.


Module Preloading Strategy
---------------------------

PreloadModulesStrategy implements PreloadingStrategy {
    
    preload(route: Route, load: () => Observable<any> {

    });
}


==============================================================================


    Angular Optimization (John Papa)
    ********************

Techniques how to optimize code

1. only import things that you're using (remove unused imports)
2. run `ng bulid` and examine sizes of your bundles/modules

    e.g. vendor.bundles.js  3.56 MB

    now run `ng build --prod`

    polyfills are for legacy browser compatibility

    vendor.bundles.js is now 675 KB

    --prod does AOT

soon to be revieled

    ng build --prod --build-optimizer


    ng build --prod -sm true // source-maps true


Source maps explorers 

    look for a lot of small boxes with small lettering!!!!

    do not import the entire RxJS library - only the operators you need.


webpack-bundle-analyzer

    another good analyzer particularly if you didn't write the code.

        ng build --prod --build-optimizer -sm(?) --stats-json


==============================================================================

    Igor Minar: Software Engineering as Engineering Discipline
    -----------------------------------------------------------
Presentation: https://goo.gl/oLfoQC      

- assure engineering quality
    - future maintenance is expected
    - test automation
    - test maintainability
    - test takes too long
        - compared to what? bug fixes? problem resolution?

- make engineering reproducable
    - control your variables (if for given input, we get the same output)
        - dependencies - use npm or yarn lock files
            - lock versions of all tools & deps
            - consider VM images for CI
        - build process
            - same build for local and CI
                - use Bazel 
        - network
            - avoid installing dependencies from Internet
                - use repository proxies


- Measure and Track
    - make engineering quantifiable
    - fast
        - what should be fast?
        - how fast is fast enough?
    - reflect business or UX objectives
        - startup time (TTI)
        - responsiveness (response latency, navigation from route to route)
        - engaging UX (smoothness in FPS)
    - use existing tools
        - benchpress
        - lighthouse
        - webpagetest.org
    - should track metrics over time
        - google analytics

      


    Alex Richabaugh: Advanced Angular Concepts
    -------------------------------------------
arick@google.com
@synalx

works on:
- HttpClient
- Service Worker


Presentation: follow on twitter to get the slides
https://docs.google.com/presentation/d/1o1zbqxe-Fn4IdGRYeVGFNQb1PSiOpjXvIsNHRC7Bk1w/edit#slide=id.p3

Advanced Angular: 

<ng-templates>

    Left Nav UI
        we want the route to dictate what shows up in Left-Nav

        well .. we can have route send innerHTML to send data to LeftNav

        or we can use templates .. 
        we mostly use templates with components..
        there is another type of template - <ng-template>
        TemplateRef - reference to a template that we can send around in 
        services

        <ng-template #myTemplate>

        @ViewChild('myTemplate')

        so:
            - routes declare a template
            - send template to left nav

        how to render a template? View -> View Container - @ViewChild
        <ng-container> is like an invisible <div>

        <ng-template> + Directive = Template Directive


2nd problem: Image Carousel



Rob Wormald: Enterprise Angular
------------------------------------------------

@robwormal
Developer Advocate at google
Labs Project

Cool idea: how can I use angular components as DOM elemnents in other,
non-angular, environments (anything)?

Enhancing existing HTML pages (CMS)

    - sites driven by CMS, where you might have > 1 "root" component
    - possible today, but quite complex
    - widgets, angular.io functionality

Angular Embedded (angualar repo "embedded")
    
    - how do we embed Angular in other environments (React, JQuery, etc.)


Web Components (no real spec)
made up of 
    - HTML Templats
    - Shadow DOM
    - HTML Imports
    - Custom Elements


Jeremy Elbourne: Angular Component Developer Kit (CDK)
------------------------------------------------------

CDK announcment: http://angularjs.blogspot.com/2017/07/angular-material-status-update.html

Over the course of working on Angular Material, an important goal has been crafting a general, reusable foundation upon which components can be built. We've reached the point now where we want to start sharing this foundation with everyone as a standalone package: the Angular CDK.

The goal of the CDK is to give developers more tools to build awesome components for the web. This will be especially useful for projects that want to take advantage of the features of Angular Material without adopting the Material Design visual language.



Alex Eagle: Angular with Bazel and Closure
---------------------------------------------------------------

@Jakeherringbone

presetation: 

https://github.com/alexeagle/angular-bazel-example

Incrementality
    compile each package separately

    @NgModule was designed as a compilation unit
    You could compile each @NgModule separately


    //airplane:app
        - // team0:module
        - // shared:logo
        - // 

https://bazel.build/

Bazel only rebuilds what's necessary.
Bazel and Webpack are good at different things

Same as internal Google toolchain
One build tool for frontend and backend
Hermeticity: means it is "sealed", never need to clean

config: BUILD.bazel
google plans to maintain these for you.. 




Nx: The New Way to Build Enterprise Angular Apps
Jeff Cross & Victor Savkin
-------------------------------------------------------------------

https://github.com/nrwl/mixdemo

    Nx - Nrwl (prounounced "n r wall") extentions

nrwl.io/nx

Nx Workspace

    - unified versioning
    - promotes code sharing and reuse.
    - Nx can handle setting up an Angular CLI project in an Nx Workspace format
    - would support multiple Angular applications and shared libs

once you have Nx Workspace set up, adding new Angular applications and libs 
is as easy as running `ng generate`.

Examples:

NgRx is great but many decisions are left to teams
Nx helps use NgRx by providing a consistent way that works for most teams.

ng generate workspace mycurrentapp --collection=@nrwl/...


What Nx Provides

    Productivity

        helps teams quickly setup enterprise Angular apps by providing 
        a default setup for complex projects. 
        provides runtime libraries to simplify complex tasks with state
        management and testing

    Consistency

        out of the box, Angular CLI follows the Angular style guide and helps
        enforce patterns and practices with app folder/file structure, naming
        conventions, component/module organization, etc

        Nx builds on the CLI foundation, and provides a more opinionated 
        architecture which allows Nx to provide more advanced code generation
        and analysis, with stronger conventions around code organization and 
        state management in place.

    Safety

        The contributors to Nx have worked with many teams building massive 
        Angular applicaitons, and found common mistakes and antipatterns which 
        can lead to race conditions, performance issues, or code maintainability.
        many of these mistakes can be identified by static analysis at develop
        time.

Out of the box:

    - Workspace
    - State Management
        - NgRx
        - Data Persistence
    - Linters
    - Code Formatter
    - Upgrade Shell




==============================================================================

    What is Redux?

redux.js.org
predictable state container for JavaScript apps.

    What is NgRx

https://github.com/ngrx/platform

@ngrx/store
@ngrx/effects - side effect model for @ngrx/store to model event sources as actions
@ngrx/router-store - bindings to connect to the Angular Router to @ngrx/store
@ngrx/store-devtools - store instrumentation that enables debugger

RxJS powered state management for Angular applications, inspired by Redux.
is a controlled state container designed to write performant, consistent
applications on top of Angular.  

Core tenets:

- state is a single immutable data structure
- actions describe state changes
- pure funcitons called reducers take the previous state and the next action
  to compute the new state
- state accessed with the Store, an Observable of state and an observer of actions.



==============================================================================

    Wednesday

==============================================================================
==============================================================================


    TypeScript: Tooling for Titans
------------------------------------------



    Central Data Stores are Amazing: Now, stop using them so much!
------------------------------------------------------------------

Sergio Cruz
@hashtagserg

NgRx
Redux Fundamentals
Understand Side Effects of Functional Programming

Fundamentals of Redux and NgRx
----
How to pass data from parent to child components
    property binding
Data flow

    <app>
<sidebar>    <dashbar>

NgRx store lives entirely outside of this hierarchy.
components can simply subscribe to this store to receive data.

NgRx is great at managing application state.
1. Share data across component trees.
2. Share data across routes.
whats the diff between injecting services into components and NgRx?
NgRx offers good structure and scalability.

Using services, people come up with their own patterns.  Every app looks different.
With NgRx, state management starts to look similar and recognizable.

Side Effects
---

    user submits form
    action handled by reducer
    effects trigger other actions
    action is handled by reducer
    effect triggers other actions
    ....
    ....

Proceed with caution!!

Act globally - think locally.
Redux is great at managing of APPLICATION STATE

other things should be kept local.

For things local to components, Inject Services!

Redux and NgRx
---------------
    1. greate for managing application state
    2. side effects isolate logic from components
    3. avoid using your Central Data Store for local data.





    My Ally, the CLI
------------------------------------------
Mike Brocchi



    Reactive Angular
-------------------------------------------
Jason Aden

Observable.let
lettable operators

Make your RxJS code modular
Problems being solved: 

1. problem with prototypes

    import 'rxjs/add/operator/map';

side-effectful import

Observable.prototype.map = map;

Cannot be tree-shaken.

Operator is retained whether used or not.
Difficult to code-spit
"undefined" is not a function.

Other problem with prototypes: 

2. API for creating operators can be confusing.
RxJS operators can be used only on RxJS Observables


What is RxJs  "let" operator?
---

    .map(data => manipulate(data))
    .let(applySchedules)

"lettable" operators

    RxJS 5.5

    import {filter} from 'rxjs/operators';

now you can just import all operators - these will be lettable versions of 
operators - which can be tree shaken
takes predicate and returns function that receives an observable

how do you compose "lettable" operators

    composed thru the "pipe" operator

        let sumEven = Observable
            .from([1,2,3,4])
            .pipe(
                filter(),
                reduce()
            )
            .subscribe()


- no side-effectful imports
- tree shakable(smaller apps)



    Malicious Input: Angular Has Our Back
------------------------------------------------------
Brian Clark
@_clarkio

angular.io/guide/security

OWASP Guide 

prevents cross-site scripting natively.

On node.js platform

    https://www.npmjs.com/package/express-validator
    https://www.npmjs.com/package/xss-filters  # developed by yahoo

Content Security Policy
------------------------

    1. content-security-policy: default-src 'self'
    2. describes sources types in directives (css, image, etc.)
    3.

https://www.npmjs.com/package/helmet
helps implemnet content-security policy

Summary:
1. learned about XSS attack
2. XSS mitigation
3. How angular can help
4. how node can help


NgRx Patterns and Best Practices
--------------------------------------------------------------------------------
Viktor Savkin

based on Enterprise Integration Pattens

What is NgRx and Why Use it?

Create and Dispatch
Receive and Process

    reducer will pick it up


Action: dispatch a message

    this.store.dispatch({
        type: 'CONFIRM_TODO_DELETION',
        payload: {todoId: this.todo.id}
    })  

Types of Actions

    commands
    documents 
    events

Command:

{
    type: 'TODO',
    payload: data
}

Events

{
    type: 'APP_WENT_OFFLINE'
}

Commands
- may provide a reply

Events
- never expect a reply

Correlation ID
- request-reply
- 

Store
-----

route -> transform -> side effects -> reducer

route: Action Deciders
transform: Action Transformers


Guard your app from user mayhem
--------------------------------------------------
John Niedzwiecki

https://github.com/RHGeek/guard-user-mayhem






    RxJS Observables in Angular
----------------------------------------------------------
Ward Bell & Sander Elias

repo: https://github.com/SanderElias/AngularMix2017Demo


Angular APIs using Observables

HttpClient
Async Pipe


Search with debounceTime

    http://embed.plnkr.co/SIltBL/

    Example: WikipediaComponent

        keyWords$ = this.searchTerm.valueChanges
            .debounceTime(300)
            .distinctUntilChanges()
            .switchMap(searchTerm => this.wikiService.load(searchTerm))
            .map(this.makeResultsPretty);


Do I need to unsubscribe?
    
- are you listening to a long-lived source?
- if so, does that thing complete on its own? soon enough?
- if not, you must unsubscribe.

Resources: https://blog.thoughtram.io/exploring-angular-2/


    Take Until

    ngOnInit() {
        this.t.time('TakeUntil')
            .takeUntil(this.onDestroy.asObservable())
            .subscribe(
                time => (this.time = time),
                err => console.error(err),
                () => console.log('')
            );
    }



https://github.com/SanderElias/AngularMix2017Demo




    Angular Routing
-----------------------------------------------------
Deborah Kurata    

https://github.com/DeborahK/MovieHunter-routing

Routing Parameters
    - required
    - optional
    - query

Decide which ones you want.  You cannot mix and match them.

Required
    configure: 
        { path: 'movies/:id', component: MovieDetailComponent }
    
    activate:
        <a [routerLink]="['/movies', movie.id]"> ... </a>

        this.router.navigate(['/movies', this.movie.id]);

    resulting URL:

    http://localhost:4200/movies/5

    read:

    this.route.snapshot.paramMap.get('id');

Optional parameters

    - not configured on the path

        { path: 'movies', component: MovieListComponent }

    activate:

        <a [routerLink]="['/movies', {title:ring, si: true}]"    


Query parameters

    - you acivate them using queryParams directive

        Activate:



            <a [routerLink]="[/movies]"
               [queryParams]=

When to use which type of parameters
----------------

- YOU use required params when you HAVE TO HAVE that value

- Optional or Query when you want to pass some value to another route.   

- Query parameters can be retained across multiple routes - by passing them along.

Not sure on the purpose of the optional parameters.  Query params seem to be
the preferred option to required.


Preventing Partial Page Displays
-------------------

We do that with a Resolver

    @Injectable
    export class MovieResolver implements Resolve<IMovie> {

        resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<IMovie>{


        }
    }

    add as provider

    add to router path:

        {
            path: ':id',
            resolve: {movie: MovieResolver},
            component: MovieDetailComponent
        }

Display a spinner
-----------------

on every single page where we are waiting for data to be retrieved.

    checkRouterEvent(routerEvent: Event): void {
        if (routerEvent instanceof NavigationStart) {
            this.loading = true;
        }

        if (routerEvent instanceof NavigationEnd ||
            routerEvent instanceof NavigationCancel ||
            routerEvent instanceof NavigationError) {
            this.loading = false;
        }


<span class="glyphicon glyphicon-refresh glyphicon-spin spinner" *ngIf="loading"></span>
<router-outlet></router-outlet>


{ enableTracing: true }
------------------------

@NgModule({
    imports: [
        RouterModule.forRoot([
            {
                path: '',
                component: ShellComponent,
                children: [
                    { path: 'welcome', component: WelcomeComponent },
                    {
                        path: 'movies',
                        loadChildren: './movies/movie.module#MovieModule',
                        canActivate: [AuthGuard]
                    },
                    { path: '', redirectTo: 'welcome', pathMatch: 'full' },
                ]
            },
            { path: '**', component: PageNotFoundComponent }
        ]) // , { enableTracing: true })
    ],
    exports: [RouterModule]
})
export class AppRoutingModule { }


Guards
---------

Improve UX experience
by confirming whether user wants to navigate away without saving data
or by redirecting to login when user is not logged in

checks if the object is "dirty"


    @Injectable()
    export class MovieEditGuard implements CanDeactivate<MovieEditComponent> {

        canDeactivate(component: MovieEditComponent): boolean {
            if (component.isDirty) {
                const title = component.movie.title || 'New Movie';
                return confirm('Navigate away and lose all changes to ${title}?');
            }
        }
        return true;

    }


Keep Tabs
-------------

forms, pages, views with tabs.

one way to implement tabs with router

When you use AOT - it will not like this lambda syntax on loadChildren

    loadChildren: () => MovieModule

so instead, you need to use:

    loadChildren: _
    loadChildren: './movies/movie.module#MovieModule',   ??? 



export function _movieModuleLoader() {
    return MovieModule;  // ref to that Module created by import
}

export const crisisCenterRoutes: Routes = [
    {
        path: '',
        component: ShellComponent,
        children: [
            { path: 'welcome', component: WelcomeComponent },
            {
                path: 'movies',
                loadChildren: _movieModuleLoader,
                canActivate: [AuthGuard]
            },
            { path: '', redirectTo: 'welcome', pathMatch: 'full' },
        ]
    },
    { 
        path: '**', component: PageNotFoundComponent 
    }
];


==============================================================================

Angular Dynamic Pages 
----------------------------------
Ward Bell

Demonstrates ability to 
- inject components into components/modules without modifying the receiving component/module
- inject components via constructor

Open issues
     - nested embedded components
     - lazy loading of the embedded components
     - code splitting

 https://github.com/wardbell/ng-dynamic-app



Mega Bootstrap

some.html

<div> .. blah .. blah </div>
<component-1></component1>
<div> .. blah .. blah </div>
<component-2></component1>

Bootstrap the doc

this.embeddedComponentFactories.forEach()

EmbeddedComponents - compoent that holds declarations of all components


    providers: [
    ]
    entryComponents: embeddedComponents  // anything Angular wont find on its own



addTitle() - creates browsing history


ngDoCheck() {
    this.embeddedCompnentInstances.forEach(
        comp => comp.changeDetectorRef.detectChanges()
    );
}


ngOnDestroy() {
    this.destroyEmbeddedComponentInstances();
}


--- can pass components to Module via constructor

export class QuestionareModule {
    constructor(EmbeddedComponents) {

    }
}


==============================================================================

Modeling Redux State - Jesse Sanders
------------------------------------------------

https://github.com/briebug/ngrx-model-state
https://github.com/briebug/angular-redux-demo

Adapter
--------

    The heavy lifter
    provides methods to maintain our collections
    addOne, addMany, addAll, removeOne, removeMany

    interface EntityState<V> {
        ids: stirng[];
        entities: { [id: stirng]: V};
    }


Selectors
---------

    createSelector
    createFeatureSelector


@ngrx/platform - brand new, not even in npm registry yet


==============================================================================

Forgotten Security
-------------------------------------

Brian Clark [ https://github.com/clarkio ]
https://www.clarkio.com/
https://www.clarkio.com/about/ - see publishings and github projects

https://angular.io/guide/security
https://github.com/clarkio/vulnerable-app



- Deter your enemies 

- Defending against

    -infantry
    -arrows
    -mortars

OWASP owasp.org

Access Control

    AAA

applied to client-server paradign

    browser                Server
    login    ------------- http://insecureheroes.com

Cookie id=1 for  insecureheroes.com

Cross-Site request forgery   XSRF Protection (see angular.io)
--------------------------

    synchronizer token pattern

    gen random token
    unique to user and session
    included as a header
    validated on server-side

    node: module csurf will implement random token generation and validation.


Attack: Stealing clicks
---------------------

attacker will load your site in iframe and make it invisible then put a 
button that looks like something you want to click but the button is on top 
of your iframe-loaded site.

Helmet 
https://helmetjs.github.io
implements browser security for us.

$ nsp check // nodesecurity/nsp - node security platform command-line tool
            // https://nodesecurity.io

Summary:

 - faking requests
 - stealing clicks
 - package management

 https://github.com/Azure-Samples/angular-cosmosdb
 branch: insecure-heroes
 https://github.com/Azure-Samples/angular-cosmosdb/tree/insecure-heroes

 https://snyk.io

==============================================================================

First Mobile App with Angular and Ionic

Steve Michelotti
steve.michelotti@microsoft.com

Latest version of Ionic

    mobile optimized framework for building cross-platform apps (HTML/CSS/JS)
    that look like iOS or Android native apps

    built for native Cordova Apps

    what is Cordova?
        JS API "wraps" native API (e.g. camera)
        for Native Mobile Apps (HTML/JS/CSS)
        Plugin Ecosystem

    why Ionic?
        - angular/typescript
        - navigation
        - platform theming
        - build tools

First think is to install the CLI
$ ionic --help

$ ionic start start-wars-game-app blank

Buttons
Navigation




==============================================================================

Developer Roadmap
******************

mindmap of web and back-end technologies for 2017 web dev

https://github.com/kamranahmedse/developer-roadmap

