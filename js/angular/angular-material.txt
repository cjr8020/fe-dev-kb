
	********************

		Angular Material 

	********************

Installation
-------------

	$ ng add @angular/material

this adds 

	@angular/cdk
	@angular/material



Configure animations
--------------------

should be done by the CLI.

@NgModule({
  imports: [BrowserAnimationsModule],
})

export class AppModule { }


Import the Angular Material component modules
---------------------------------------------

Imports the Angular Material component modules which you need in App.


Gesture Support
----------------


Some components (mat-slide-toggle, mat-slider, matTooltip) rely on HammerJS for gestures.

In order to urge the complete feature-set of those elements, HammerJS should be loaded into the appliance.

 npm install hammerjs --save
Complete installing HammerJS then import it on ‘main.ts’ file

import 'hammerjs';

================================================================================

  add Bootstrap Reboot to Angular Material project
  ------------------------------------------------

https://www.amadousall.com/the-good-parts-of-bootstrap-4-you-are-missing-in-your-angular-material-projects/


add bootstrap

  npm install bootstrap --save

import the Reboot Sass file into our global stylesheet src/styles.scss

// Imports functions, variables, and mixins that are needed by other Bootstrap files
@import "~bootstrap/scss/functions";
@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/mixins";
// Import Bootstrap Reboot
@import "~bootstrap/scss/reboot";



Unfortunately it has introduced some styles that we do not want:

an outline when focus is set on buttons,
blue colored, and underlined button-links on hover,
blue links (blue is the primary color in Bootstrap)

To fix these issues, we create two Sass partials that we import in styles.scss:

src/_variables.scss: we import it before any Bootstrap import.
src/_reset.scss: we import it after all our Bootsrap imports

@import "variables";
@import "~bootstrap/scss/functions";
@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/mixins";
@import "~bootstrap/scss/reboot";
@import "reset";



_variables.scss


The _variables.scss Sass partial allows us to customize Bootstrap - more precisely, the parts of Bootstrap that we will be using. That's why we added it before any Bootstrap import. This makes Bootstrap use our values instead of its default values. Those defaults are defined in ~bootstrap/scss/variables . For instance, $link-color: theme-color("primary") !default;.

Here is the content of the _variables.scss partial:

$link-color: #3f51b5;
$link-hover-color: currentColor;
$link-hover-decoration: none;
$label-margin-bottom: 0;


We set our links color to our primary color (#3f51b5) (we could have used our secondary color, if we wanted) as per the Material Design specification. We also set text-decoration: none; for hovered links.


_reset.scss



The _reset.scss Sass partial allows us to override some of the Bootstrap styles we don't want. That's why we added it after all Bootstrap imports.

* {
  &:active,
  :focus {
    outline: none !important;  // 1
  }
}

a:not(.mat-button):not(.mat-raised-button):not(.mat-fab):not(.mat-mini-fab):not([mat-list-item]) {
    color: #3f51b5; // 2
  }
Remove the blue outline on links, and buttons when they are active; or the focus is set on them.
Use our primary color for all links that are not Angular Material elements. Those have one of the following classes: .mat-button, mat-raised-button, mat-fab-button, mat-list-item, etc.






================================================================================

	<mat-button-toggle>
	<mat-button-toggle-group>
	*****************************


The <mat-button-toggle>, an Angular Directive, is used to create a toggle or on/off button with material styling and animations. 

mat-button-toggle buttons can be configured to behave as radio buttons or checkboxes. 

Typically they are part of <mat-button-toggle-group>.

app.module.ts
--------------

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatButtonToggleModule, MatIconModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatButtonToggleModule, MatIconModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }

app.component.css
-----------------

.tp-selected-value {
   margin: 15px 0;
}

app.component.div
------------------

<mat-button-toggle-group #group = "matButtonToggleGroup">
   <mat-button-toggle value = "left">
      <mat-icon>format_align_left</mat-icon>
   </mat-button-toggle>
   <mat-button-toggle value = "center">
      <mat-icon>format_align_center</mat-icon>
   </mat-button-toggle>
   <mat-button-toggle value = "right">
      <mat-icon>format_align_right</mat-icon>
   </mat-button-toggle>
   <mat-button-toggle value = "justify" disabled>
      <mat-icon>format_align_justify</mat-icon>
   </mat-button-toggle>
</mat-button-toggle-group>
<div class = "tp-selected-value">Selected value: {{group.value}}</div>



another example
----------------

template:
-----------

<form [formGroup]="outerForm">
	<div formGroupName="secondFormGroup">
		<mat-button-toggle-group #group="matButtonToggleGroup" (change)="onEndpointValChange(group.value)" multiple="false" formControlName='endpoints'
		 [(ngModel)]="myFlagForButtonToggle">
			<mat-button-toggle *ngFor="let item of endpointToggleOptions;" [value]="item">{{item}}</mat-button-toggle>
		</mat-button-toggle-group>
	</div>
</form>

component:
------------

import { Component } from '@angular/core';

import { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';

/**
 * @title Exclusive selection
 */
@Component({
  selector: 'button-toggle-exclusive-example',
  templateUrl: 'button-toggle-exclusive-example.html',
  styleUrls: ['button-toggle-exclusive-example.css'],
})
export class ButtonToggleExclusiveExample {

  myFlagForButtonToggle: String = "Single";
  endpointToggleOptions: Array<String> = ["Single", "Multiple"];
  outerForm: FormGroup;
  constructor(private _formBuilder: FormBuilder) {
    this.outerForm = this._formBuilder.group({
      firstFormGroup: this._formBuilder.group({ pidNumber: new FormControl(''), }), secondFormGroup:
        this._formBuilder.group({ endpoints: new FormControl(''), })
    });
  }
}






================================================================================