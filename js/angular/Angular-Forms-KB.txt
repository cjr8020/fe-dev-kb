
Every form-intensive application has to provide answers for the following problems:

1. how to keep track of the global form state
2. know which parts of the form are valid and which are still invalid
3. properly displaying error messages to the user so that the user knows what to do to make the form valid




	Angular Forms
 	*************

Angular offers two form-building technologies: reactive and template-driven.
both belong to the `@angular/forms` library and share a common set of form
control classes.

But the diverge in philosophy, programming style and technique.

They also have their own modules: ReactiveFormsModule and FormsModule.

	which is better?
	------------------

they are two architectural paradigms with their own strengths and weaknesses.
choose the approach that works best.
and you may decide to use both in the same application.

================================================================================

  FormControl
  -----------

represents a single input field - smallest unit of Angular form.
encapsulates the field's value, and states such as valid, dirty, or has errors.

To build up forms, we create FormControls (and groups of FormControls) and then
attach metadata and logic to them.


	FormGroup
	----------

Tracks the value and validity state of a group of FormControl instances.
A FormGroup aggregates the values of each child `FormControl` into one 
object, which each control name as the key.

It calculates its status by reducing the statuses of its children.  E.g. if one of the controls in a group is invalid, the entire group become


  AbstractControl
  ---------------

Common ancestor of FormControl and FormGroup.


  ngModel
  ---------

NgModel is a special directive: it binds a model to a form.

ngModel mimics two-way data binding.

There are still good reasons to aoivd 



===============================================================================
  	Angular Reactive Forms
===============================================================================

 	Reactive forms is an Angular technique for creating forms in a reactive 
 	style that favor explicit management of the data flowing between a non-UI data model (typically retrieved from a server) and a UI-oriented form model
 	that retains the states and values of the HTML controls on the screen.

 	You create a tree of Angular form control objects in a component class
 	and bind them to native form control elements in the component template.

 	You create and manipulate form control objects directly in the component
 	class.  As the component class has immediate access to both the data model and the form control structure, you can push data model values into the
 	form controls and pull user-changed values back out.

 	The component can observe changes in form control state and react to those
 	changes.

 	One advantage of working with form control objects directly is that value
 	and validity updates are always synchronous and under your control.

 		Reactive forms are synchronous
 		------------------------------

 	1. you won't encounter the timing issues that sometimes occur in a template-driven form, and 

 	2. reactive forms can be easier to test.

 	In keeping with the reactive paradigm, the component preserves the immutabilty of the data model, treating it as a pure source of original values.

Essential Form Classes
----------------------

	AbstractControl

		abstract base class for the three concrete form control classes:

	FormControl
		tracks the value and validity status of an individual form control.
		corresponds to an HTML form control such as an input box or selector.

	FormGroup
		tracks the value and validity state of a group of AbstractControl's
		the group's properties include its child controls.  The top-level form
		in your component is a FormGroup.

	FormArray
		tracks the value and validity state of a numerically indexed array of
		AbstractControl's


FormControl
-----------
	optionally accepts three arguments:
		1. initial data value
		2. array of validators
		3. array of async validators



===============================================================================
  	Angular Template-driven Forms
===============================================================================

You place HTML form controls (<input> and <select>) in the component template
and bind them to data model properties in the component using directives like
ngModel.

You don't create Angular form control objects - angular directives create them for you, using the information in your data bindings.   

You don't push or pull data values - angular handles that for you with ngModel.
Angular updates the mutable 'data model' with user changes as they happen.
While this means less code in component class, template-driven forms are asynchronous.


 	Template-Driven forms are asynchronous
 	--------------------------------------



===============================================================================

  Custom validator functions
  **************************

Custom validator is nothing but a function:

  function classValidator(control: AbstractControl): {[key: string] : boolean} | null {
    return null;
  }

argument:  
  FormControl or FormGroup (ref by base class AbstractControl)

return value:

  if there is something wrong with the input field,
  the function returns and object in the form of 
    key / value pair 

    [key: string] / boolean

  if everyting validates fine, it returns null

Example of simple range validator for age:

  
  function ageValidator(control: AbstractControl): { [key: string]: boolean} | null {

    if(control.value !== null && (isNaN(control.value) || control.value < 20 || control.value > 70)) {
      return { 'ageValidator': true }
    }

    return null;

  };

To apply this to your input field, use the name of your custom validator on the
form control name inside the form group:

  this.customerForm = this.fb.group({
    firstName: ['', [Validators.required, Validators.minLength(5)]],
    email: ['', Validators.required],
    age: [null, ageValidator]
  })


On the template:

  <span *ngIf="customerForm.get('age').errors?.ageValidator">Only for age group 20 to 70</span>


================================================================================

  watching for form changes
  *************************

To watch for changes on a control:

1. get access to the EventEmitter by calling 

  control.valueChanges

2. add an observer using the .subscribe() method

this.blah = this.blahForm.controls['blah'];
this.blah.valueChanges.subscribe(
  (value: string) => {
    console.log('blah chnaged to: ', value);
  }
);


================================================================================

NG_VALUE_ACCESSOR

	import { NG_VALUE_ACCESSOR } from '@angular/forms';

	used to provide a ControlValueAccessor for form controls.

	See DefaultValueAccessor for how to implement it.


DefaultValueAccessor

	https://angular.io/api/forms/DefaultValueAccessor

	The default accessor for writing a value and listening to changes that is used by the NgModel.

		Example
			<input type="text" name="searchQuery" ngModel>

================================================================================
