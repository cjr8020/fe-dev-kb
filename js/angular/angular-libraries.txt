	
	************************
		Angular libraries
	************************


================================================================================

	ng6 libraries
	*************


Angular v6 CLI delivers integration with ng-packagr.

ng-packgr
---------
https://www.npmjs.com/package/ng-packagr

	Transpiles your library to Angular Package Format.


Creating a library
-------------------------------------------------------

	In angular 6, angular.json represents what is now called a 'workspace'
	with possibly multiple projects.


Plan:
-----

- create a workspace with the same name as the intended library: `example-ng6-lib`
- in the same workspace, generate a test application for this library named `example-ng6-lib-test-app`
- in the same workspace, generate an Angular library named `example-ng6-lib`
- the library will have a prefix `enl` (**e**xample **n**g6-**l**ibrary)
- the library will be tested by importing it into `example-ng6-lib-test-app` test application.



#### create new angular workspace with 


	$ ng new example-ng6-lib-test-app
	$ mv example-ng6-lib-test-app example-ng6-lib


The reason for this is to create the test app right away, but then rename the repository folder 
so that it is named to correspond to the name of the library we are generating. 

Resulting structure:


example-ng6-lib/
  e2e/
  src/
    app/
      [this is our test-app]
    assets/
    environments/
    index
    karma.conf.js
    .
    .
    .



Next, generate the library itself:


	$ ng generate library example-ng6-lib --prefix=enl


note: by default, the CLI will use `lib` prefix.


CREATE projects/example-ng6-lib/karma.conf.js (968 bytes)
CREATE projects/example-ng6-lib/ng-package.json (191 bytes)
CREATE projects/example-ng6-lib/ng-package.prod.json (164 bytes)
CREATE projects/example-ng6-lib/package.json (175 bytes)
CREATE projects/example-ng6-lib/tsconfig.lib.json (769 bytes)
CREATE projects/example-ng6-lib/tsconfig.spec.json (246 bytes)
CREATE projects/example-ng6-lib/tslint.json (317 bytes)
CREATE projects/example-ng6-lib/src/public_api.ts (191 bytes)
CREATE projects/example-ng6-lib/src/test.ts (700 bytes)
CREATE projects/example-ng6-lib/src/lib/example-ng6-lib.module.ts (261 bytes)
CREATE projects/example-ng6-lib/src/lib/example-ng6-lib.component.spec.ts (679 bytes)
CREATE projects/example-ng6-lib/src/lib/example-ng6-lib.component.ts (281 bytes)
CREATE projects/example-ng6-lib/src/lib/example-ng6-lib.service.spec.ts (418 bytes)
CREATE projects/example-ng6-lib/src/lib/example-ng6-lib.service.ts (142 bytes)
UPDATE angular.json (4979 bytes)
UPDATE package.json (1565 bytes)
UPDATE tsconfig.json (566 bytes)



Outcome: 

- new `example-ng6-lib` project added to angular.json and project structure
- `ng-packagr` dependencies added to `package.json`


  "devDependencies": {
    ...
    "@angular-devkit/build-ng-packagr": "~0.7.0",
    "ng-packagr": "^3.0.0",
    "tsickle": ">=0.29.0",
    "tslib": "^1.9.0",    
    ...


- reference to `example-ng6-lib` build path is added to `tsconfig.json`:


    "paths": {
      "example-ng6-lib": [
        "dist/example-ng6-lib"
      ],
      "example-ng6-lib/*": [
        "dist/example-ng6-lib/*"
      ]
    }


Resulting structure:


example-ng6-lib/
  e2e/
  
  projects/             <-- this is added
    example-ng6-lib/
      src/
        lib/
          example-ng6-lib.component.spec.ts
          example-ng6-lib.component.ts
          example-ng6-lib.module.ts
          example-ng6-lib.service.spec.ts
          example-ng6-lib.service.ts
        public_api.ts
        tests.ts
      karma.conf.js
      ng-package.json
      ng-package.prod.json
      package.json
      tsconfig.lib.json
      tsconfig.spec.json
      tslint.json
      
  src/
    app/
      [this is our test-app]
    assets/
    environments/
    index
    karma.conf.js
    .
    .
    .

angular.json projects object
-----------------------------



{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "example-ng6-lib-test-app": {
    	.
    	.
    	.
    },
    "example-ng6-lib-test-app-e2e": {
    	.
    	.
    	.
    },
    "example-ng6-lib": {
      "root": "projects/example-ng6-lib",
      "sourceRoot": "projects/example-ng6-lib/src",
      "projectType": "library",
      "prefix": "enl",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-ng-packagr:build",
          "options": {
            "tsConfig": "projects/example-ng6-lib/tsconfig.lib.json",
            "project": "projects/example-ng6-lib/ng-package.json"
          },
          "configurations": {
            "production": {
              "project": "projects/example-ng6-lib/ng-package.prod.json"
            }
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "projects/example-ng6-lib/src/test.ts",
            "tsConfig": "projects/example-ng6-lib/tsconfig.spec.json",
            "karmaConfig": "projects/example-ng6-lib/karma.conf.js"
          }
        },
        "lint": {
          "builder": "@angular-devkit/build-angular:tslint",
          "options": {
            "tsConfig": [
              "projects/example-ng6-lib/tsconfig.lib.json",
              "projects/example-ng6-lib/tsconfig.spec.json"
            ],
            "exclude": [
              "**/node_modules/**"
            ]
          }
        }
      }
    }
  },
  "defaultProject": "example-ng6-lib-test-app"
}


Testing the library
================================================================================

Typically, we use `npm install` to add a library to our app.

In this project, `example-ng6-lib` won't be in node_modules.. 
it will be built to a sub-folder in our workspace's dist folder.

Angular CLI adds this folder to `tsconfig.json`:


    "paths": {
      "example-ng6-lib": [
        "dist/example-ng6-lib"
      ],
      "example-ng6-lib/*": [
        "dist/example-ng6-lib/*"
      ]
    }


library sources
----------------

  the `src` folder is in `projects/example-ng6-lib`.
  In the library, Angular CLI created a new module with a service and a component.


example-ng6-lib/
    .
    .
    projects/
      example-ng6-lib
        src/
          lib/
            example-ng6-lib.component.spec.ts
            example-ng6-lib.component.ts
            example-ng6-lib.module.ts
            example-ng6-lib.service.spec.ts
            example-ng6-lib.servidce.ts
          public_api.ts
          tests.ts
        karma.conf.js
        ng-package.json
        ng-package.prod.json
        package.json
        tsconfig.lib.json
        tsconfig.spec.json
        tslint.json


  package.json
    this is specific to our library - it gets published with library as npm package.

  public_api.ts
    this is known as 'entry file'.  It specifies which parts of our library are
    visible externally.. Isn't that what `export` does?

  ng-package.json
    this is a config for `ng-packagr`.
    Thanks to the CLI, it tells ng-packagr where to find our entry file and where
    to build this library.

      {
        "$schema": "../../node_modules/ng-packagr/ng-package.schema.json",
        "dest": "../../dist/example-ng6-lib",
        "deleteDestPath": false,
        "lib": {
          "entryFile": "src/public_api.ts"
        }
      }


Build the library
-----------------

Before we can use this library, we need to build it:

  $ ng build --prod example-ng6-lib

NOTE: always use `--prod` flag.


  ng build --prod example-ng6-lib
  Building Angular Package
  Building entry point 'example-ng6-lib'
  Rendering Stylesheets
  Rendering Templates
  Compiling TypeScript sources through ngc
  Bundling to FESM2015
  Bundling to FESM5
  Bundling to UMD
  Minifying UMD bundle
  Copying declaration files
  Writing package metadata
  Removing scripts section in package.json as it's considered a potential security vulnerability.
  Built example-ng6-lib
  Built Angular Package!
  - from: /home/gobber/ws/ng/lib/example-ng6-lib/projects/example-ng6-lib
  - to:   /home/gobber/ws/ng/lib/example-ng6-lib/dist/example-ng6-lib


Use library in the test app
------------------------------

1. import example-ng6-lib Module

  
  import {ExampleNg6LibModule} from '../../projects/example-ng6-lib/src/lib/example-ng6-lib.module';

  @NgModule({
    declarations: [
      AppComponent
    ],
    imports: [
      BrowserModule,
      ExampleNg6LibModule    <-- 
    ],
    providers: [],
    bootstrap: [AppComponent]
  })
  export class AppModule { }  

This works b/c when importing this library by name, Angular CLI first looks in 
`tsconfig.json.paths` and then in `node_modules`.

Display `example-ng6-lib` Component
-------------------------------------

  add to src/app/app.component.html

    <enl-example-ng6-lib></enl-example-ng6-lib>


  and serve

    $ng serve

  test

    $npm run test-lib
    $npm run test-app


Adding another component to the library
***************************************

1. Generate a new component in our library.
2. Add the component to our library module’s exports.
3. Add the component to our entry file.
4. Rebuild our library after we make changes to it.
5. Use the new component in our application

1. Generate a new component in our library.
-------------------------------------------

  $ ng g comp foo --project=example-ng6-lib

    CREATE projects/example-ng6-lib/src/lib/foo/foo.component.css (0 bytes)
    CREATE projects/example-ng6-lib/src/lib/foo/foo.component.html (22 bytes)
    CREATE projects/example-ng6-lib/src/lib/foo/foo.component.spec.ts (607 bytes)
    CREATE projects/example-ng6-lib/src/lib/foo/foo.component.ts (257 bytes)
    UPDATE projects/example-ng6-lib/src/lib/example-ng6-lib.module.ts (327 bytes)

2. Add the component to our library module’s exports.
-----------------------------------------------------

    import { FooComponent } from './foo/foo.component';

    @NgModule({
      imports: [
      ],
      declarations: [
        ExampleNg6LibComponent,
        FooComponent],             <--
      exports: [
        ExampleNg6LibComponent,
        FooComponent               <--
      ]
    })
    export class ExampleNg6LibModule { }



3. Add the component to our entry file.
----------------------------------------

  while <enl-foo> component is useable without adding it to the entry file,
  however, FooComponent.class itself won't be exported:
  adding a reference like this:

    fooComponent: FooComponent;

  causes:

    Module has no exported member 'FooComponent'


  FOR COMPONENTS:
  Using export makes the element visible.
  Adding it to the entry file makes the class visible.


    public_api.ts
    -------------

  /*
   * Public API Surface of example-ng6-lib
   */

  export * from './lib/example-ng6-lib.service';
  export * from './lib/example-ng6-lib.component';
  export * from './lib/example-ng6-lib.module';  
  export * from './lib/foo/foo.component';           <-- 

  
4. Rebuild our library after we make changes to it.

  $ ng build --prod example-ng6-lib


5. Use the new component in our application

add <enl-foo>

  <enl-example-ng6-lib></enl-example-ng6-lib>
  <enl-foo></enl-foo>


Library `package.json`
***********************

Critical attributes in `package.json`:

  name
    the name will appear in "from" when you do 
      import { ExampleNg6LibModule }


  version

  dependencies
    dependencies and peerDependencies (no devDependencies)


Library distribution `package.json`
************************************

this one is generated by `ng-packagr` in 

  dist/example-ng6-lib

when you build your library, and it is the one that gets released with
your library.

do not modify it directly.


Packaging
**********

create script in root `package.json` of your project

  "lib-pack": "cd dist/example-ng6-lib && npm pack"

Now, when you execute 

  $ npm run lib-pack

the script will `cd` to the library `dist` folder and run `npm pack`
to create a package file named something like:

  example-ng6-lib-1.0.0.tgz


Or you can combine build and pack together: 

  "scripts": {
    ...
    "build_lib": "ng build --prod example-ng6-lib",
    "npm_pack": "cd dist/example-ng6-lib && npm pack",
    "package": "npm run build_lib && npm run npm_pack"
  },


Now, the overall sequence of steps:

1. build the library

    ng build --prod your-ng6-lib

2. pack the library

    cd dist/your-ng6-lib && npm pack



Adding global assets to ng6 library
************************************

as of angular/cli v6, ng-packagr doesn't support bundling global assets ..yet,
so this needs to be done manually

https://stackoverflow.com/questions/50595900/angular-6-building-a-library-with-assets

copy global styles manually into dist/

  cp -R projects/example-ng6-lib/assets dist/example-ng6-lib


So, the sequence becomes:

1. build the library

    ng build --prod your-ng6-lib   &&
    cp -R projects/example-ng6-lib/assets dist/example-ng6-lib


2. pack the library

    cd dist/your-ng6-lib && npm pack


"scripts": {

    "_copy-lib-assets": "cp -R projects/sfg-ng-brand-library/assets dist/example-ng6-lib",

    "_build-lib": "ng build --prod example-ng6-lib && npm run _copy-lib-assets",
    
    "_pack-lib": "cd dist/sfg-ng-brand-library && npm pack",
    
    "package-lib": "npm run _build-lib && npm run _pack-lib",

}


Adding global SASS styles to ng6 library
****************************************

just like with global assets, angular/cli v6 (ng-packagr) does not support 
global styles yet.. 

To do that manually, use scss-bundle

  https://www.npmjs.com/package/scss-bundle

which bundles all SCSS imports into a single file recusively, so we need to 
add it as a devDependency to the library project:

  $ npm install --save-dev scss-bundle

  "scss-bundle": "^2.4.0",

scss-bundle can run with a configuration file or without:

with `scss-bundle.config.json`

  $ scss-bundle -c scss-bundle.config.json

{
  "entry": "./projects/sfg-ng-brand-library/sass/styles.scss",
  "dest": "./dist/sfg-ng-brand-library/sass/styles.scss"
}

without:

  $ scss-bundle \
      -e  ./projects/sfg-ng-brand-library/sass/styles.scss \
      -d ./dist/sfg-ng-brand-library/sass/styles.scss

So, we can add this as a step to `_build-lib` script:

"_build-lib-styles": "scss-bundle -e ./projects/sfg-ng-brand-library/sass/styles.scss -d ./dist/sfg-ng-brand-library/sass/styles.scss",
    
"scripts": {
  . . .

    "_copy-lib-assets": "cp -R projects/sfg-ng-brand-library/assets dist/sfg-ng-brand-library",
    "_build-lib-styles": "scss-bundle -e ./projects/sfg-ng-brand-library/sass/styles.scss -d ./dist/sfg-ng-brand-library/sass/styles.scss",
    "_build-lib": "ng build --prod sfg-ng-brand-library && npm run _copy-lib-assets && npm run _build-lib-styles",
    "_pack-lib": "cd dist/sfg-ng-brand-library && npm pack",
    "package-lib": "npm run _build-lib && npm run _pack-lib",

  . . . 
}


================================================================================
================================================================================

Use the library in a separate HOST application
***********************************************

  $ ng new lib-tester
  $ cd lib-tester
  $ ng serve

Install the libarary
--------------------

  $ npm install ../example-ng6-lib/dist/example-ng6-lib/example-ng6-lib-0.0.1.tgz


"dependencies": {
  "@angular/animations": "^6.0.3",
  .
  .
  .
  "example-ng6-lib": "file:../example-ng6-lib/dist/example-ng6-lib/example-ng6-lib-0.0.1.tgz",
  "rxjs": "^6.0.0",
  "zone.js": "^0.8.26"
},


NOTE: do not `npm install` the project's `dist` directory, or strange
3rd party import errors will happen.


Import the library module
-------------------------

  import { ExampleNg6LibModule } from 'example-ng6-lib';

  @NgModule({
    declarations: [
      AppComponent
    ],
    imports: [
      BrowserModule,
      ExampleNg6LibModule  <-- 
    ],
    providers: [],
    bootstrap: [AppComponent]
  })
  export class AppModule { }

Use it
---------

  app.component.html

    <enl-foo></enl-foo>



Publishing the Library
**************************    
https://blog.angularindepth.com/the-angular-library-series-publishing-ce24bb673275

In order to publish your library to npm you will need to come up with a unique name for it -- you'll want to check npm first.

E.g. to check for name `ng-library-x`, check this URL:

  https://www.npmjs.com/package/ng-library-x

404 means "you're good!"

Look at your library's `package.json`:

  {
    "name": "example-ng6-lib",
    "version": "1.0.0",
    "peerDependencies": {
      "@angular/common": "^6.0.0-rc.0 || ^6.0.0",
      "@angular/core": "^6.0.0-rc.0 || ^6.0.0"
    }
  }

  
Read-me and License files
*************************


"scripts": {
  ...
  "copy-license": "copy ./LICENSE ./dist/ng-example-library",
  "copy-readme": "copy ./README.md ./dist/ng-example-library",  
  "copy-files": "npm run copy-license && npm run copy-readme",
  ...
},


More information in `package.json`
**********************************

  {
    "name": "ng-example-library",
    "version": "1.2.0",
    "description": "This is a simple example Angular Library published to npm.",
    "keywords" :["Angular","Library"],
    "license" : "SEE LICENSE IN LICENSE",
    "repository": {
      "type" : "git",
      "url" : "https://github.com/xyz/ng-example-library"
    },
    "homepage" :"https://homepage/",
    "peerDependencies": {
      "@angular/common": "^6.0.0-rc.0 || ^6.0.0",
      "@angular/core": "^6.0.0-rc.0 || ^6.0.0"
    }
  }


Publishing
**********

  $ npm publish ./dist/ng-example-library/ng-example-library-1.2.0.tgz

================================================================================