
	NgRx

  ********

Types of States of a typical web application:

1. Server state
2. Persistent state
3. The URL and Router state
4. Client state
5. Transient client state
6. Local UI state




Server state
-----------------------

	server state is stored on the server side

Persistent state
-----------------------

	persistent state is a subset of the server state stored on the client
	in memory.  e.g. when you loaded a list of items from the server..

The URL and Router state
-----------------------

		Structured representation of the URL


Client state
-----------------------

	not stored on the server
	good example - filters used to create a list of items displayed to the user.
	data is stored on the b/e, but the values of the filters are not.

Transient client state
-----------------------

	state stored on the client, but not represented in the URL.
	e.g. youtube remembering where i stopped watching the video.

		like local storage...

Local UI state
-----------------------

	individual compnents can have local state governing small aspects 
	of their behavior.  What should be the color of a button?


Recommendation:
***************
1. it's a good practice to reflect both the persistent and client state in the URL.

2. Use immutable data for persistent and client state
3. Optimistic updates require SEPARATE actions to deal with errors.






State Synchronization
**********************

why do we need to synchronize?

The Persistent state and the Server state store the same information.
So do the Client state and the URL.
Therefore, we have to sync them.

The choice of the synchronization strategy is one of the most important
decisions we make when designing the state management.

Can we make some of this synchronization synchronous?
What has to async?
Using distributed systems terminology: should we use strict or eventual consistency?


	separate state management from side effects

		store has reducers - manages state
		component dispatches actions to store
		effects 