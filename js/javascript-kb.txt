
	JavaScript
	**********

===============================================================================

How to give name to a Blob uploaded as FormData a filename
----------------------------------------------------------

Use:
https://developer.mozilla.org/en-US/docs/Web/API/FormData/append

	form.append("blob", blob, filename);

// Turns out getAsFile will return a blob, not a file
var blob = event.clipboardData.items[0].getAsFile(), 
    form = new FormData(),
    request = new XMLHttpRequest();
form.append("blob",blob,"blob"); // <-=====X
request.open(
            "POST",
            "/upload",
            true
        );
request.send(form);


===============================================================================

	Generic Object in javascript
	****************************

Instead of Object, use the non-primitive object type (added in TypeScript 2.2).


let myVariable: object = { fun: 1 };


this does not work eg: const me: object = {}; me.fun = 1 Will throw an error. 
Property 'fun' does not exist on type 'object'.


But you can do 

	let myVariable: object = { fun: 1 };


===============================================================================

	Tests
	***********

Empty object
-----------------------

var obj = {};
return Object.keys(obj).length; //returns 0 if empty or an integer > 0 if non-empty



===============================================================================

	Detect Internet Speed
	---------------------

You can easily detect internet speed in JavaScript by using the navigator object.

navigator.connection.downlink;
10.55


===============================================================================

	prevent user from pasting text
	------------------------------

you can easily do that in JavaScript using a paste event listener

	<input type="text"></input>
	<script>
	//selecting the input.
	  const input = document.querySelector('input');
	  
	//prevent the user to paste text by using the paste eventListener.
	  input.addEventListener("paste", function(e){
	    e.preventDefault()
	  })
	  
	</script>



===============================================================================

	vibrate your phone
	------------------

//vibrating the device for 500 milliseconds
window.navigator.vibrate(500);

===============================================================================

	console API
	***********

https://levelup.gitconnected.com/moving-beyond-console-log-8-console-methods-you-should-use-when-debugging-javascript-and-node-25f6ac840ada


console.assert

console.count
console.countReset

console.group
console.groupEnd

console.table  - useful way to describe object or array content.

console.time
console.timeEnd

	BEFORE

		const start = Date.now();
		// do something

		const diff = Date.now() - start;
		console.log("Time execution: " + diff + ' ms');

	AFTER

		console.time('START');
		for (let i = 0; i < 1000000; i++) {
			// do something
		}

		console.timeEnd('END');



===============================================================================


Javascript destructuring
------------------------

  an expression that allows us to 

  - extract data from arrays, objects, maps and sets into their own variable
  - extract properties from an object or items from an array, multiple at a time.

  e.g.
    sometimes you need top level variables like:

      const Person = {
        first: 'Wes',
        ...
        twitter: '@wesbos'
      };
      const first = person.first;
      const last = person.last;

    You've got this repetitive code over and over again, where you need to make
    a variable from something that is inside of an object, or inside of an array...

    What we could do instead of creating multiple variables,
    we destructure them in a single line like so:

      const { first, last } = person;

    Curly brackets on the LEFT side of the equals sign?  
    That is not a block!.
    That is not an object.
    It's the new destructuring syntax.

    The code above says, give me a variable called "first", a var called "last", 
    and take it from the 'person' object.  We're taking the `first` property and 
    the `last` property and putting them into a new var that will be scoped 
    to the parent block (or window).

      console.log(first);
      console.log(last);


Another example:

const wes = {
  first: 'Wes',
  last: 'Bos',
  links: {
    social: {
      twitter: 'https://twitter.com/wesbos',
      facebook: 'https://facebook.com/wesbos.developer',
    },
    web: {
      blog: 'https://wesbos.com'
    }
  }
};


I want to pull twitter and facebook URLs.. 

const twitter = wes.links.social.twitter;
const facebook = wes.links.social.facebook;
// Annoying!


// Much better
const { twitter, facebook } = wes.links.social;
console.log(twitter, facebook); // logs the 2 variables 


Notice how we destructure `wes.links.social` and not just `wes`? 
That is important because we are destructuring a few levels deep.




===============================================================================

	Array functions
	***************

a JavaScript can be constructed using either

	var arr = []; // using array literal notation

or 

	var arr = new Array(); // using constructor notation.

filter
------

	creates a new array with all elements that pass the test implemented 
	by the provided function

		var words = ["one", "two", "three", "four"];

		var longerWords = words.filter(function(word) {
			return word.length > 4;
		});

	ES6 version

		let longerWords = words.filter(word => word.length > 4);

	returns an array!!

find 
----

	const element = someArray.find(x = > x.id === someId);
	
	returns element that matches 


reduce
------

	arr.reduce(callback[, initialValue])

	applies a function against an accumulator and each element in the array
	(from left to right) to reduce it to a single value.

	e.g. without initialValue

		[0, 1, 2, 3, 4].reduce( (acc, n) => acc + n);

	e.g. w/ initialValue

		[0, 1, 2, 3, 4].reduce( (acc, n) => (acc + n), 5);


===============================================================================

	String functions
	***************

indexOf
---------

	str.indexOf(searchValue[, fromIndex])


	returns the index within the calling String object of the first occurence of the specified value, starting the search at 'fromIndex'
	returns -1 if the value not found


===============================================================================

	Operators
	*********

comma 
--------

	the comma is only a comma operator when it acts on two expressions

		lefthand_expr, righthand_expr

	e.g.

		a = (1, 2);  // a == 2

	evaluates each expression starting with lefthand, and returns the value of
	the righthand expression.  So the above stores `2` in "a"

	precedence

		the comma operator has the lowest precedence, so need parens.
		without parens

		a = 1, 2;  // returns 2 and stores 1 in `a`

		the expression will be parsed as 

		(a=1), 2;

	side effects

		why bother with the lefthand expression if it's value is lost?
		b/c the lefthand expression can have a side effect that affects the
		righthand expession.

		e.g. accumulator for the reduce function could be provided as:

			(acc[t.id] = t, acc) 

		the lefthand expression is evaluated first

			acc[t.id] = t

		and then the righthand expression is returned.

+ plus 
--------

	used with a variable to convert a string to number

		+var || 0;  // return numeric value of `var` or zero

	if conversion cannot be perfored, NaN is returned

		n = +"five"; // NaN


!! (not not) operator 
-----------------------

"bang bang - you're boolean" - coerces Object to boolean.
If it was falsey (e.g. 0, null, undefined, etc.), it will be `false`.
otherwise, `true`.

The first `!` negates it once, converting values like so:

	undefined to true
	null to true
	+0 to true
	-0 to true
	'' to true
	NaN to true
	false to true
	All other expressions to false

the second `!` negates it again.


!oObject  // inverted boolean
!!oObject // non inverted boolean - so true boolean representation

Example:

let isIE8 = false;
isIE8 = !! navigator.userAgent.match(/MSIE 8.0/);
console.log(isIE8); // returns true or false

if you 
console.log(navigator.userAgent.match(/MSIE 8.0/));
// returns `null`

if you 
console.log(!!navigator.userAgent.match(/MSIE 8.0/));
// returns true or false



===============================================================================

	object properties
	*****************

iterate over object properties
------------------------------

  for (let property in talks) {
      if (talks.hasOwnProperty(property)) {
          console.log(`talks[${property}]: ${talks[property]}`);
      }
  }

	`hasOwnProperty` checks to see is this is a property specific to this class
	and not the one inherited from a base class.


object to string
------------------

	JSON.stringify(obj);



===============================================================================

	object of name value pairs
	**************************

there are two ways to add properties to an object

var obj = {
	key1: value1,
	key2: value2
};

	obj.key3 = "value3"; // using dot notation

or

	obj["key3"] = "value3"; // using square bracket notation

The second form is frequently used when the name of the property is determined
dynamically:

	var getProperty = function(propertyName) {
		// returns the value of the property whose name is provided dynamically
		return obj[propertyName]; 
	}


===============================================================================

	Comparing numbers with Number
	*****************************

var fn = 20;
var sn = 20;

alert(Number(fn) === Number(sn));


===============================================================================

	Object.values()
	***************

returns an array of a given object's own enumerable property values, 
in the same order that is provided by a for...in loop.

const object1 = {
  a: 'somestring',
  b: 42,
  c: false
};

console.log(Object.values(object1));
// expected output: Array ["somestring", 42, false]



===============================================================================


===============================================================================

	reading relative paths with fs.readFileSync
	-----------------------


how to use fs.readFileSync to give you a relative path to your asset.

this works fine

	import fs from 'fs';

	const logo = fs.readFileSync('/assets/img/logo.svg');

when the `assets` folder is in the root of the project.

To work with relative path


	import fs from 'fs';
	import path from 'path';

	const logo = fs.readFileSync(path.resolve(__dirname, './assets/img/logo.svg'));

===============================================================================

	Regular Expressions RegEx
	--------------------------

Testers
https://www.debuggex.com/r/XCRXcsFXx_oqaU9H

https://regex.observepoint.com/



Test to see if a string matches

use test()	


 private mimeType = new RegExp('^(\\w+)/(.*$)'); // contains '/' but not the first char
 private mimeTypeWithWildCardRegex = new RegExp('^.*\\*$'); // mime type contains '*'


		// contains asterisk
    return this.mimeTypeWithWildCardRegex.test(mimeType);

 exec() 

return the first element in the result array [1]
   * because it contains the value of the first group which is what contains the 'type'

    const match = this.mimeType.exec(mimeType);
    if (match) {
      return match[1];
    } else {
      return undefined;
    }
===============================================================================
